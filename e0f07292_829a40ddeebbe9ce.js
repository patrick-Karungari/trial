"use strict";
(self.webpackChunk_N_E = self.webpackChunk_N_E || []).push([
  [29594],
  {
    757700: function (e, t, n) {
      n.d(t, {
        Ak: function () {
          return lh;
        },
      });
      var i = Object.defineProperty,
        r = Object.defineProperties,
        a = Object.getOwnPropertyDescriptors,
        o = Object.getOwnPropertySymbols,
        s = Object.prototype.hasOwnProperty,
        l = Object.prototype.propertyIsEnumerable,
        c = (e, t, n) =>
          t in e
            ? i(e, t, {
                enumerable: !0,
                configurable: !0,
                writable: !0,
                value: n,
              })
            : (e[t] = n),
        d = (e, t) => {
          for (var n in t || (t = {})) s.call(t, n) && c(e, n, t[n]);
          if (o) for (var n of o(t)) l.call(t, n) && c(e, n, t[n]);
          return e;
        },
        u = (e, t) => r(e, a(t)),
        h = (e) => ("symbol" == typeof e ? e : e + ""),
        p = (e, t) => {
          var n = {};
          for (var i in e) s.call(e, i) && t.indexOf(i) < 0 && (n[i] = e[i]);
          if (null != e && o)
            for (var i of o(e))
              t.indexOf(i) < 0 && l.call(e, i) && (n[i] = e[i]);
          return n;
        };
      function m(e) {
        return Array.isArray(e);
      }
      function f() {
        return "window" in globalThis && "document" in globalThis;
      }
      function y() {
        return "function" == typeof navigator.vibrate;
      }
      function g() {
        var e, t;
        if (!f()) return "other";
        let n =
          null !=
          (t = null == (e = navigator.userAgentData) ? void 0 : e.platform)
            ? t
            : navigator.platform;
        return /^mac/i.test(n)
          ? 5 === navigator.maxTouchPoints
            ? "ios"
            : "macos"
          : /^win/i.test(n)
          ? "windows"
          : /android/i.test(navigator.userAgent)
          ? "android"
          : /iphone|ipod|ipad/i.test(navigator.userAgent)
          ? "ios"
          : /\bcros\b/i.test(navigator.userAgent)
          ? "chromeos"
          : "other";
      }
      var b = {
        strings: {
          en: {
            "keyboard.tooltip.functions": "Functions",
            "keyboard.tooltip.symbols": "Symbols",
            "keyboard.tooltip.greek": "Greek Letters",
            "keyboard.tooltip.command": "LaTeX Command Mode",
            "keyboard.tooltip.numeric": "Numeric",
            "keyboard.tooltip.alphabetic": "Roman Letters",
            "tooltip.copy to clipboard": "Copy to Clipboard",
            "tooltip.cut to clipboard": "Cut to Clipboard",
            "tooltip.paste from clipboard": "Paste from Clipboard",
            "tooltip.redo": "Redo",
            "tooltip.toggle virtual keyboard": "Toggle Virtual Keyboard",
            "tooltip.undo": "Undo",
            "menu.insert matrix": "Insert Matrix",
            "menu.insert vector": "Insert Vector",
            "submenu.array.matrix delimiters": "Matrix Delimiters",
            "menu.array.add row above": "Add Row After",
            "menu.array.add row below": "Add Row Before",
            "menu.array.add column after": "Add Column After",
            "menu.array.add column before": "Add Column Before",
            "menu.array.delete row": "Delete Row",
            "menu.array.delete rows": "Delete Selected Rows",
            "menu.array.delete column": "Delete Column",
            "menu.array.delete columns": "Delete Selected Columns",
            "submenu.array.insert separator": "Insert Separator",
            "menu.insert table": "Insert Table",
            "submenu.table style": "Table Style",
          },
          ar: {
            "keyboard.tooltip.functions": "\u0645\u0647\u0627\u0645",
            "keyboard.tooltip.symbols":
              "\u062d\u0631\u0641 \u0627\u0648 \u0631\u0645\u0632",
            "keyboard.tooltip.greek":
              "\u062d\u0631\u0648\u0641 \u064a\u0648\u0646\u0627\u0646\u064a\u0629",
            "keyboard.tooltip.command":
              "\u062d\u0627\u0644\u0629 \u062a\u0644\u0642\u064a \u0627\u0644\u0623\u0648\u0627\u0645\u0631 \u0627\u0644\u0644\u0627\u062a\u0643",
            "keyboard.tooltip.numeric":
              "\u0627\u0644\u0631\u0642\u0645\u064a\u0629",
            "keyboard.tooltip.alphabetic":
              "\u0631\u0645\u0648\u0632 \u0627\u0644\u0627\u062d\u0631\u0641 \u0627\u0644\u0631\u0648\u0645\u0627\u0646\u064a\u0629",
            "tooltip.copy to clipboard":
              "\u0646\u0633\u062e \u0625\u0644\u0649 \u0627\u0644\u062d\u0627\u0641\u0638\u0629",
            "tooltip.cut to clipboard":
              "\u0642\u0635 \u0625\u0644\u0649 \u0627\u0644\u062d\u0627\u0641\u0638\u0629",
            "tooltip.paste from clipboard":
              "\u0644\u0635\u0642 \u0645\u0646 \u0627\u0644\u062d\u0627\u0641\u0638\u0629",
            "tooltip.redo": "\u0627\u0644\u0625\u0639\u0627\u062f\u0629",
            "tooltip.toggle virtual keyboard":
              "\u062a\u0628\u062f\u064a\u0644 \u0644\u0648\u062d\u0629 \u0627\u0644\u0645\u0641\u0627\u062a\u064a\u062d \u0627\u0644\u0625\u0641\u062a\u0631\u0627\u0636\u064a\u0629",
            "tooltip.undo": "\u0625\u0644\u063a\u0627\u0621",
            "menu.insert matrix":
              "\u0623\u062f\u062e\u0644 \u0627\u0644\u0645\u0635\u0641\u0648\u0641\u0629",
            "menu.insert vector":
              "\u0623\u062f\u062e\u0644 \u0645\u062a\u062c\u0647",
            "submenu.array.matrix delimiters":
              "\u0645\u062d\u062f\u062f\u0627\u062a \u0627\u0644\u0645\u0635\u0641\u0648\u0641\u0629",
            "menu.array.add row above":
              "\u0623\u0636\u0641 \u0635\u0641\u064b\u0627 \u0628\u0639\u062f \u0630\u0644\u0643",
            "menu.array.add row below":
              "\u0623\u0636\u0641 \u0627\u0644\u0635\u0641 \u0642\u0628\u0644",
            "menu.array.add column after":
              "\u0623\u0636\u0641 \u0627\u0644\u0639\u0645\u0648\u062f \u0628\u0639\u062f \u0630\u0644\u0643",
            "menu.array.add column before":
              "\u0623\u0636\u0641 \u0627\u0644\u0639\u0645\u0648\u062f \u0642\u0628\u0644",
            "menu.array.delete row": "\u0627\u062d\u0630\u0641 \u0635\u0641",
            "menu.array.delete rows":
              "\u062d\u0630\u0641 \u0627\u0644\u0635\u0641\u0648\u0641 \u0627\u0644\u0645\u062d\u062f\u062f\u0629",
            "menu.array.delete column":
              "\u062d\u0630\u0641 \u0627\u0644\u0639\u0645\u0648\u062f",
            "menu.array.delete columns":
              "\u062d\u0630\u0641 \u0627\u0644\u0623\u0639\u0645\u062f\u0629 \u0627\u0644\u0645\u062d\u062f\u062f\u0629",
            "submenu.array.insert separator":
              "\u0623\u062f\u062e\u0644 \u0641\u0627\u0635\u0644",
            "menu.insert table":
              "\u0625\u062f\u0631\u0627\u062c \u062c\u062f\u0648\u0644",
            "submenu.table style":
              "\u0646\u0645\u0637 \u0627\u0644\u062c\u062f\u0648\u0644",
          },
          bg: {
            "keyboard.tooltip.functions":
              "\u0424\u0443\u043d\u043a\u0446\u0438\u0438",
            "keyboard.tooltip.symbols":
              "\u0421\u0438\u043c\u0432\u043e\u043b\u0438",
            "keyboard.tooltip.greek":
              "\u0413\u0440\u044a\u0446\u043a\u0438 \u0431\u0443\u043a\u0432\u0438",
            "keyboard.tooltip.command":
              "\u041a\u043e\u043c\u0430\u043d\u0434\u0435\u043d \u0440\u0435\u0436\u0438\u043c \u043d\u0430 \u043b\u0430\u0442\u0435\u043a\u0441",
            "keyboard.tooltip.numeric":
              "\u0427\u0438\u0441\u043b\u043e\u0432\u0438",
            "keyboard.tooltip.alphabetic":
              "\u0420\u0438\u043c\u0441\u043a\u0438 \u0431\u0443\u043a\u0432\u0438",
            "tooltip.copy to clipboard":
              "\u041a\u043e\u043f\u0438\u0440\u0430\u043d\u0435 \u0432 \u043a\u043b\u0438\u043f\u0431\u043e\u0440\u0434\u0430",
            "tooltip.redo": "\u041f\u043e\u0432\u0442\u043e\u0440\u043d\u043e",
            "tooltip.toggle virtual keyboard":
              "\u041f\u0440\u0435\u0432\u043a\u043b\u044e\u0447\u0432\u0430\u043d\u0435 \u043d\u0430 \u0432\u0438\u0440\u0442\u0443\u0430\u043b\u043d\u0430 \u043a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440\u0430",
            "tooltip.undo": "\u041e\u0442\u043c\u044f\u043d\u0430",
            "menu.insert matrix":
              "\u0412\u043c\u044a\u043a\u0432\u0430\u043d\u0435 \u043d\u0430 \u043c\u0430\u0442\u0440\u0438\u0446\u0430",
            "menu.insert vector":
              "\u0412\u043c\u044a\u043a\u0432\u0430\u043d\u0435 \u043d\u0430 \u0432\u0435\u043a\u0442\u043e\u0440",
            "submenu.array.matrix delimiters":
              "\u041c\u0430\u0442\u0440\u0438\u0447\u043d\u0438 \u0440\u0430\u0437\u0434\u0435\u043b\u0438\u0442\u0435\u043b\u0438",
            "menu.array.add row above":
              "\u0414\u043e\u0431\u0430\u0432\u044f\u043d\u0435 \u043d\u0430 \u0440\u0435\u0434 \u0441\u043b\u0435\u0434",
            "menu.array.add row below":
              "\u0414\u043e\u0431\u0430\u0432\u044f\u043d\u0435 \u043d\u0430 \u0440\u0435\u0434 \u043f\u0440\u0435\u0434\u0438",
            "menu.array.add column after":
              "\u0414\u043e\u0431\u0430\u0432\u044f\u043d\u0435 \u043d\u0430 \u043a\u043e\u043b\u043e\u043d\u0430 \u0441\u043b\u0435\u0434",
            "menu.array.add column before":
              "\u0414\u043e\u0431\u0430\u0432\u044f\u043d\u0435 \u043d\u0430 \u043a\u043e\u043b\u043e\u043d\u0430 \u043f\u0440\u0435\u0434\u0438",
            "menu.array.delete row":
              "\u0418\u0437\u0442\u0440\u0438\u0432\u0430\u043d\u0435 \u043d\u0430 \u0440\u0435\u0434\u0430",
            "menu.array.delete rows":
              "\u0418\u0437\u0442\u0440\u0438\u0432\u0430\u043d\u0435 \u043d\u0430 \u0438\u0437\u0431\u0440\u0430\u043d\u0438\u0442\u0435 \u0440\u0435\u0434\u043e\u0432\u0435",
            "menu.array.delete column":
              "\u0418\u0437\u0442\u0440\u0438\u0432\u0430\u043d\u0435 \u043d\u0430 \u043a\u043e\u043b\u043e\u043d\u0430",
            "menu.array.delete columns":
              "\u0418\u0437\u0442\u0440\u0438\u0432\u0430\u043d\u0435 \u043d\u0430 \u0438\u0437\u0431\u0440\u0430\u043d\u0438\u0442\u0435 \u043a\u043e\u043b\u043e\u043d\u0438",
            "submenu.array.insert separator":
              "\u041f\u043e\u0441\u0442\u0430\u0432\u0435\u0442\u0435 \u0440\u0430\u0437\u0434\u0435\u043b\u0438\u0442\u0435\u043b",
            "menu.insert table":
              "\u0412\u043c\u044a\u043a\u0432\u0430\u043d\u0435 \u043d\u0430 \u0442\u0430\u0431\u043b\u0438\u0446\u0430",
            "submenu.table style":
              "\u0422\u0430\u0431\u043b\u0438\u0447\u0435\u043d \u0441\u0442\u0438\u043b",
          },
          bs: {
            "keyboard.tooltip.functions": "Funkcije",
            "keyboard.tooltip.symbols": "Simboli",
            "keyboard.tooltip.greek": "Gr\u010dka slova",
            "keyboard.tooltip.command": "LaTeX naredbeni na\u010din",
            "keyboard.tooltip.numeric": "Numeri\u010dki",
            "keyboard.tooltip.alphabetic": "Rimska slova",
            "tooltip.copy to clipboard": "Kopirati u clipboard",
            "tooltip.redo": "Ponovi",
            "tooltip.toggle virtual keyboard":
              "Uklju\u010di / isklju\u010di virtualnu tipkovnicu",
            "tooltip.undo": "Poni\u0161ti",
            "menu.insert matrix": "Umetni matricu",
            "menu.insert vector": "Umetni vektor",
            "submenu.array.matrix delimiters": "Matri\u010dni razdjelnici",
            "menu.array.add row above": "Dodaj redak nakon",
            "menu.array.add row below": "Dodaj red prije",
            "menu.array.add column after": "Dodaj stupac nakon",
            "menu.array.add column before": "Dodaj stupac prije",
            "menu.array.delete row": "Izbri\u0161i red",
            "menu.array.delete rows": "Izbri\u0161i odabrane redove",
            "menu.array.delete column": "Izbri\u0161i stupac",
            "menu.array.delete columns": "Izbri\u0161i odabrane stupce",
            "submenu.array.insert separator": "Umetni separator",
            "menu.insert table": "Ubaci tabelu",
            "submenu.table style": "Stil tabele",
          },
          cs: {
            "keyboard.tooltip.functions": "Funkce",
            "keyboard.tooltip.symbols": "Symboly",
            "keyboard.tooltip.greek": "\u0158eck\xe9 dopisy",
            "keyboard.tooltip.command": "P\u0159\xedkazov\xfd re\u017eim LaTeX",
            "keyboard.tooltip.numeric": "\u010c\xedseln\xe9",
            "keyboard.tooltip.alphabetic": "\u0158\xedmsk\xe9 dopisy",
            "tooltip.copy to clipboard": "Zkop\xedrovat do schr\xe1nky",
            "tooltip.redo": "P\u0159ed\u011blat",
            "tooltip.toggle virtual keyboard":
              "P\u0159epnout virtu\xe1ln\xed kl\xe1vesnici",
            "tooltip.undo": "Vr\xe1tit",
            "menu.insert matrix": "Vlo\u017ete matici",
            "menu.insert vector": "Vlo\u017eit vektor",
            "submenu.array.matrix delimiters": "Odd\u011blova\u010de matic",
            "menu.array.add row above": "P\u0159idat \u0159\xe1dek za",
            "menu.array.add row below": "P\u0159idat \u0159\xe1dek p\u0159ed",
            "menu.array.add column after": "P\u0159idat sloupec za",
            "menu.array.add column before": "P\u0159idat sloupec d\u0159\xedve",
            "menu.array.delete row": "Odstranit \u0159\xe1dek",
            "menu.array.delete rows": "Odstranit vybran\xe9 \u0159\xe1dky",
            "menu.array.delete column": "Odstranit sloupec",
            "menu.array.delete columns": "Odstranit vybran\xe9 sloupce",
            "submenu.array.insert separator": "Vlo\u017ete odd\u011blova\u010d",
            "menu.insert table": "Vlo\u017eit tabulku",
            "submenu.table style": "Styl tabulky",
          },
          da: {
            "keyboard.tooltip.functions": "Funktioner",
            "keyboard.tooltip.symbols": "Symboler",
            "keyboard.tooltip.greek": "Gr\xe6ske bogstaver",
            "keyboard.tooltip.command": "LaTeX kommandotilstand",
            "keyboard.tooltip.numeric": "Numerisk",
            "keyboard.tooltip.alphabetic": "Romerske breve",
            "tooltip.copy to clipboard": "Kopier til udklipsholder",
            "tooltip.redo": "Gentag igen",
            "tooltip.toggle virtual keyboard": "Skift virtuelt tastatur",
            "tooltip.undo": "Fortryd",
            "menu.insert matrix": "Inds\xe6t matrix",
            "menu.insert vector": "Inds\xe6t vektor",
            "submenu.array.matrix delimiters": "Matrixafgr\xe6nsere",
            "menu.array.add row above": "Tilf\xf8j r\xe6kke efter",
            "menu.array.add row below": "Tilf\xf8j r\xe6kke f\xf8r",
            "menu.array.add column after": "Tilf\xf8j kolonne efter",
            "menu.array.add column before": "Tilf\xf8j kolonne f\xf8r",
            "menu.array.delete row": "Slet r\xe6kke",
            "menu.array.delete rows": "Slet valgte r\xe6kker",
            "menu.array.delete column": "Slet kolonne",
            "menu.array.delete columns": "Slet valgte kolonner",
            "submenu.array.insert separator": "Inds\xe6t separator",
            "menu.insert table": "Inds\xe6t tabel",
            "submenu.table style": "Tabelstil",
          },
          de: {
            "keyboard.tooltip.functions": "Funktionen",
            "keyboard.tooltip.symbols": "Symbole",
            "keyboard.tooltip.greek": "Griechische Buchstaben",
            "keyboard.tooltip.command": "LaTeX-Befehlsmodus",
            "keyboard.tooltip.numeric": "Numerisch",
            "keyboard.tooltip.alphabetic": "R\xf6mische Buchstaben",
            "tooltip.copy to clipboard": "In die Zwischenablage kopieren",
            "tooltip.redo": "Wiederholen",
            "tooltip.toggle virtual keyboard": "Virtuelle Tastatur umschalten",
            "tooltip.undo": "Widerrufen",
            "menu.insert matrix": "Matrix einf\xfcgen",
            "menu.insert vector": "Vektor einf\xfcgen",
            "submenu.array.matrix delimiters": "Matrixtrennzeichen",
            "menu.array.add row above": "Zeile hinzuf\xfcgen nach",
            "menu.array.add row below": "Zeile hinzuf\xfcgen vor",
            "menu.array.add column after": "Spalte hinzuf\xfcgen nach",
            "menu.array.add column before": "Spalte hinzuf\xfcgen vor",
            "menu.array.delete row": "Zeile l\xf6schen",
            "menu.array.delete rows": "Ausgew\xe4hlte Zeilen l\xf6schen",
            "menu.array.delete column": "Spalte l\xf6schen",
            "menu.array.delete columns": "Ausgew\xe4hlte Spalten l\xf6schen",
            "submenu.array.insert separator": "Trennzeichen einf\xfcgen",
            "menu.insert table": "Tabelle einf\xfcgen",
            "submenu.table style": "Tabellenstil",
          },
          el: {
            "keyboard.tooltip.functions":
              "\u03c3\u03c5\u03bd\u03b1\u03c1\u03c4\u03ae\u03c3\u03b5\u03b9\u03c2",
            "keyboard.tooltip.symbols":
              "\u03c3\u03cd\u03bc\u03b2\u03bf\u03bb\u03b1",
            "keyboard.tooltip.greek":
              "\u03b5\u03bb\u03bb\u03b7\u03bd\u03b9\u03ba\u03ac \u03b3\u03c1\u03ac\u03bc\u03bc\u03b1\u03c4\u03b1",
            "keyboard.tooltip.command":
              "\u039b\u03b5\u03b9\u03c4\u03bf\u03c5\u03c1\u03b3\u03af\u03b1 \u03b5\u03bd\u03c4\u03bf\u03bb\u03ce\u03bd LaTeX",
            "keyboard.tooltip.numeric":
              "\u0391\u03c1\u03b9\u03b8\u03bc\u03b7\u03c4\u03b9\u03ba\u03cc\u03c2",
            "keyboard.tooltip.alphabetic":
              "\u03a1\u03c9\u03bc\u03b1\u03ca\u03ba\u03ac \u03b3\u03c1\u03ac\u03bc\u03bc\u03b1\u03c4\u03b1",
            "tooltip.copy to clipboard":
              "\u0391\u03bd\u03c4\u03b9\u03b3\u03c1\u03b1\u03c6\u03ae \u03c3\u03c4\u03bf \u03c0\u03c1\u03cc\u03c7\u03b5\u03b9\u03c1\u03bf",
            "tooltip.redo": "\u039e\u03b1\u03bd\u03b1\u03ba\u03ac\u03bd\u03c9",
            "tooltip.toggle virtual keyboard":
              "\u0395\u03bd\u03b1\u03bb\u03bb\u03b1\u03b3\u03ae \u03b5\u03b9\u03ba\u03bf\u03bd\u03b9\u03ba\u03bf\u03cd \u03c0\u03bb\u03b7\u03ba\u03c4\u03c1\u03bf\u03bb\u03bf\u03b3\u03af\u03bf\u03c5",
            "tooltip.undo": "\u039e\u03b5\u03ba\u03ac\u03bd\u03c9",
            "menu.insert matrix":
              "\u0395\u03b9\u03c3\u03b1\u03b3\u03c9\u03b3\u03ae Matrix",
            "menu.insert vector":
              "\u0395\u03b9\u03c3\u03b1\u03b3\u03c9\u03b3\u03ae \u03b4\u03b9\u03b1\u03bd\u03cd\u03c3\u03bc\u03b1\u03c4\u03bf\u03c2",
            "submenu.array.matrix delimiters":
              "\u039f\u03c1\u03b9\u03bf\u03b8\u03ad\u03c4\u03b5\u03c2 Matrix",
            "menu.array.add row above":
              "\u03a0\u03c1\u03bf\u03c3\u03b8\u03ae\u03ba\u03b7 \u03c3\u03b5\u03b9\u03c1\u03ac\u03c2 \u03bc\u03b5\u03c4\u03ac",
            "menu.array.add row below":
              "\u03a0\u03c1\u03bf\u03c3\u03b8\u03ae\u03ba\u03b7 \u03c3\u03b5\u03b9\u03c1\u03ac\u03c2 \u03c0\u03c1\u03b9\u03bd",
            "menu.array.add column after":
              "\u03a0\u03c1\u03bf\u03c3\u03b8\u03ae\u03ba\u03b7 \u03c3\u03c4\u03ae\u03bb\u03b7\u03c2 \u03bc\u03b5\u03c4\u03ac",
            "menu.array.add column before":
              "\u03a0\u03c1\u03bf\u03c3\u03b8\u03ae\u03ba\u03b7 \u03c3\u03c4\u03ae\u03bb\u03b7\u03c2 \u03c0\u03c1\u03b9\u03bd",
            "menu.array.delete row":
              "\u0394\u03b9\u03b1\u03b3\u03c1\u03b1\u03c6\u03ae \u03c3\u03b5\u03b9\u03c1\u03ac\u03c2",
            "menu.array.delete rows":
              "\u0394\u03b9\u03b1\u03b3\u03c1\u03b1\u03c6\u03ae \u03b5\u03c0\u03b9\u03bb\u03b5\u03b3\u03bc\u03ad\u03bd\u03c9\u03bd \u03c3\u03b5\u03b9\u03c1\u03ce\u03bd",
            "menu.array.delete column":
              "\u0394\u03b9\u03b1\u03b3\u03c1\u03b1\u03c6\u03ae \u03c3\u03c4\u03ae\u03bb\u03b7\u03c2",
            "menu.array.delete columns":
              "\u0394\u03b9\u03b1\u03b3\u03c1\u03b1\u03c6\u03ae \u03b5\u03c0\u03b9\u03bb\u03b5\u03b3\u03bc\u03ad\u03bd\u03c9\u03bd \u03c3\u03c4\u03b7\u03bb\u03ce\u03bd",
            "submenu.array.insert separator":
              "\u0395\u03b9\u03c3\u03b1\u03b3\u03c9\u03b3\u03ae \u03b4\u03b9\u03b1\u03c7\u03c9\u03c1\u03b9\u03c3\u03c4\u03b9\u03ba\u03bf\u03cd",
            "menu.insert table":
              "\u0395\u03b9\u03c3\u03b1\u03b3\u03c9\u03b3\u03ae \u03c0\u03af\u03bd\u03b1\u03ba\u03b1",
            "submenu.table style":
              "\u03a3\u03c4\u03c5\u03bb \u03c0\u03af\u03bd\u03b1\u03ba\u03b1",
          },
          es: {
            "keyboard.tooltip.functions": "Funciones",
            "keyboard.tooltip.symbols": "S\xedmbolos",
            "keyboard.tooltip.greek": "Letras griegas",
            "keyboard.tooltip.command": "Modo Comando LaTeX",
            "keyboard.tooltip.numeric": "Num\xe9rico",
            "keyboard.tooltip.alphabetic": "Letras romanas",
            "tooltip.copy to clipboard": "Copiar al portapapeles",
            "tooltip.redo": "Rehacer",
            "tooltip.toggle virtual keyboard": "Alternar teclado virtual",
            "tooltip.undo": "Deshacer",
            "menu.insert matrix": "A\xf1adir Matriz",
            "menu.insert vector": "A\xf1adir vector",
            "submenu.array.matrix delimiters": "Delimitadores de Matriz",
            "menu.array.add row above": "A\xf1adir L\xednea Antes",
            "menu.array.add row below": "A\xf1adir L\xednea Despues",
            "menu.array.add column after": "A\xf1adir Columna Despues",
            "menu.array.add column before": "A\xf1adir Columna Antes",
            "menu.array.delete row": "Borrar L\xednea",
            "menu.array.delete rows": "Borrar L\xedneas Seleccionadas",
            "menu.array.delete column": "Borrar Columna",
            "menu.array.delete columns": "Borrar Columnas Seleccionadas",
            "submenu.array.insert separator": "Insertar un Separador",
            "menu.insert table": "Insertar Tabla",
            "submenu.table style": "Estilo de Tabla",
          },
          et: {
            "keyboard.tooltip.functions": "Funktsioonid",
            "keyboard.tooltip.symbols": "S\xfcmbolid",
            "keyboard.tooltip.greek": "Kreeka kirjad",
            "keyboard.tooltip.command": "LaTeXi k\xe4sure\u017eiim",
            "keyboard.tooltip.numeric": "Numbriline",
            "keyboard.tooltip.alphabetic": "Rooma kirjad",
            "tooltip.copy to clipboard": "Kopeerida l\xf5ikelauale",
            "tooltip.redo": "Tee uuesti",
            "tooltip.toggle virtual keyboard":
              "L\xfclitage sisse virtuaalne klaviatuur",
            "tooltip.undo": "V\xf5ta tagasi",
            "menu.insert matrix": "Sisesta maatriks",
            "menu.insert vector": "Sisesta vektor",
            "submenu.array.matrix delimiters": "Maatriksi eraldajad",
            "menu.array.add row above": "Lisa rida p\xe4rast",
            "menu.array.add row below": "Lisa rida enne",
            "menu.array.add column after": "Lisa veerg p\xe4rast",
            "menu.array.add column before": "Lisa veerg enne",
            "menu.array.delete row": "Kustuta rida",
            "menu.array.delete rows": "Kustuta valitud read",
            "menu.array.delete column": "Kustuta veerg",
            "menu.array.delete columns": "Kustuta valitud veerud",
            "submenu.array.insert separator": "Sisestage eraldaja",
            "menu.insert table": "Sisesta tabeli",
            "submenu.table style": "Tabeli stiilis",
          },
          fa: {
            "keyboard.tooltip.functions": "\u062a\u0648\u0627\u0628\u0639",
            "keyboard.tooltip.symbols": "\u0646\u0645\u0627\u062f\u0647\u0627",
            "keyboard.tooltip.greek":
              "\u062d\u0631\u0648\u0641 \u06cc\u0648\u0646\u0627\u0646\u06cc",
            "keyboard.tooltip.command":
              "\u062d\u0627\u0644\u062a \u062f\u0633\u062a\u0648\u0631 \u0644\u0627\u062a\u06a9",
            "keyboard.tooltip.numeric": "\u0639\u062f\u062f\u06cc",
            "keyboard.tooltip.alphabetic":
              "\u062d\u0631\u0648\u0641 \u0631\u0648\u0645\u06cc",
            "tooltip.copy to clipboard":
              "\u06a9\u067e\u06cc \u0628\u0647 \u06a9\u0644\u06cc\u067e\u0628\u0648\u0631\u062f",
            "tooltip.redo":
              "\u0628\u0627\u0632\u06af\u0634\u062a \u0628\u0647 \u0628\u0639\u062f",
            "tooltip.toggle virtual keyboard":
              "\u0646\u0645\u0627\u06cc\u0634/\u0646\u0647\u0641\u062a\u0646 \u06a9\u06cc\u0628\u0648\u0631\u062f \u0645\u062c\u0627\u0632\u06cc",
            "tooltip.undo":
              "\u0628\u0627\u0632\u06af\u0634\u062a \u0628\u0647 \u0642\u0628\u0644",
            "menu.insert matrix":
              "\u0645\u0627\u062a\u0631\u06cc\u0633 \u0631\u0627 \u0648\u0627\u0631\u062f \u06a9\u0646\u06cc\u062f",
            "menu.insert vector":
              "\u062f\u0631\u062c \u0628\u0631\u062f\u0627\u0631",
            "submenu.array.matrix delimiters":
              "\u0645\u0631\u0632\u0647\u0627\u06cc \u0645\u0627\u062a\u0631\u06cc\u0633",
            "menu.array.add row above":
              "\u0628\u0639\u062f \u0627\u0632 \u0622\u0646 \u0631\u062f\u06cc\u0641 \u0627\u0636\u0627\u0641\u0647 \u06a9\u0646\u06cc\u062f",
            "menu.array.add row below":
              "\u0631\u062f\u06cc\u0641 \u0631\u0627 \u0642\u0628\u0644 \u0627\u0636\u0627\u0641\u0647 \u06a9\u0646\u06cc\u062f",
            "menu.array.add column after":
              "\u0627\u0636\u0627\u0641\u0647 \u06a9\u0631\u062f\u0646 \u0633\u062a\u0648\u0646 \u0628\u0639\u062f",
            "menu.array.add column before":
              "\u0633\u062a\u0648\u0646 \u0642\u0628\u0644 \u0631\u0627 \u0627\u0636\u0627\u0641\u0647 \u06a9\u0646\u06cc\u062f",
            "menu.array.delete row":
              "\u0631\u062f\u06cc\u0641 \u0631\u0627 \u062d\u0630\u0641 \u06a9\u0646\u06cc\u062f",
            "menu.array.delete rows":
              "\u0631\u062f\u06cc\u0641 \u0647\u0627\u06cc \u0627\u0646\u062a\u062e\u0627\u0628 \u0634\u062f\u0647 \u0631\u0627 \u062d\u0630\u0641 \u06a9\u0646\u06cc\u062f",
            "menu.array.delete column":
              "\u062d\u0630\u0641 \u0633\u062a\u0648\u0646",
            "menu.array.delete columns":
              "\u0633\u062a\u0648\u0646 \u0647\u0627\u06cc \u0627\u0646\u062a\u062e\u0627\u0628 \u0634\u062f\u0647 \u0631\u0627 \u062d\u0630\u0641 \u06a9\u0646\u06cc\u062f",
            "submenu.array.insert separator":
              "\u062f\u0631\u062c \u062c\u062f\u0627 \u06a9\u0646\u0646\u062f\u0647",
            "menu.insert table":
              "\u0642\u0631\u0627\u0631 \u062f\u0627\u062f\u0646 \u062c\u062f\u0648\u0644",
            "submenu.table style": "\u0633\u0628\u06a9 \u0645\u06cc\u0632",
          },
          fi: {
            "keyboard.tooltip.functions": "Toiminnot",
            "keyboard.tooltip.symbols": "Symbolit",
            "keyboard.tooltip.greek": "Kreikkalaiset kirjeet",
            "keyboard.tooltip.command": "LaTeX-komentotila",
            "keyboard.tooltip.numeric": "Numeerinen",
            "keyboard.tooltip.alphabetic": "Roomalaiset kirjeet",
            "tooltip.copy to clipboard": "Kopioi leikep\xf6yd\xe4lle",
            "tooltip.redo": "Tee uudelleen",
            "tooltip.toggle virtual keyboard":
              "Vaihda virtuaalin\xe4pp\xe4imist\xf6",
            "tooltip.undo": "Kumoa",
            "menu.insert matrix": "Lis\xe4\xe4 matriisi",
            "menu.insert vector": "Lis\xe4\xe4 vektori",
            "submenu.array.matrix delimiters": "Matriisin erottimet",
            "menu.array.add row above": "Lis\xe4\xe4 rivi j\xe4lkeen",
            "menu.array.add row below": "Lis\xe4\xe4 rivi ennen",
            "menu.array.add column after": "Lis\xe4\xe4 sarake j\xe4lkeen",
            "menu.array.add column before": "Lis\xe4\xe4 sarake ennen",
            "menu.array.delete row": "Poista rivi",
            "menu.array.delete rows": "Poista valitut rivit",
            "menu.array.delete column": "Poista sarake",
            "menu.array.delete columns": "Poista valitut sarakkeet",
            "submenu.array.insert separator": "Aseta erotin",
            "menu.insert table": "Lis\xe4\xe4 taulukko",
            "submenu.table style": "Taulukon tyyli",
          },
          fr: {
            "keyboard.tooltip.functions": "Fonctions",
            "keyboard.tooltip.symbols": "Symboles",
            "keyboard.tooltip.greek": "Lettres grecques",
            "keyboard.tooltip.command": "Mode de commandes LaTeX",
            "keyboard.tooltip.numeric": "Num\xe9rique",
            "keyboard.tooltip.alphabetic": "Lettres romaines",
            "tooltip.copy to clipboard": "Copier dans le presse-papiers",
            "tooltip.redo": "R\xe9tablir",
            "tooltip.toggle virtual keyboard":
              "Afficher/Masquer le clavier virtuel",
            "tooltip.undo": "Annuler",
            "menu.insert matrix": "Ins\xe9rer une Matrice",
            "menu.insert vector": "Ins\xe9rer un Vecteur",
            "submenu.array.matrix delimiters": "D\xe9limiteurs de la Matrice",
            "menu.array.add row above": "Ajouter une Ligne Avant",
            "menu.array.add row below": "Ajouter une Ligne Apr\xe8s",
            "menu.array.add column before": "Ajouter une Colonne Avant",
            "menu.array.add column after": "Ajouter une Colonne Apr\xe8s",
            "menu.array.delete row": "Enlever une Ligne",
            "menu.array.delete rows": "Enlever les Lignes S\xe9lection\xe9es",
            "menu.array.delete column": "Enlever une Colone",
            "menu.array.delete columns":
              "Enlever les Colonnes S\xe9lection\xe9es",
            "submenu.array.insert separator": "Ins\xe9rer un S\xe9parateur",
            "menu.insert table": "Ins\xe9rer une Table",
            "submenu.table style": "Style de la  Table",
          },
          ga: {
            "keyboard.tooltip.functions": "Feidhmeanna",
            "keyboard.tooltip.symbols": "Siombail\xed",
            "keyboard.tooltip.greek": "Litreacha na Gr\xe9ige",
            "keyboard.tooltip.command": "M\xf3d Ord\xfa LaTeX",
            "keyboard.tooltip.numeric": "Uimhri\xfail",
            "keyboard.tooltip.alphabetic": "Litreacha R\xf3mh\xe1nacha",
            "tooltip.copy to clipboard":
              "C\xf3ipe\xe1il chuig an Ghearrthaisce",
            "tooltip.redo": "Athdh\xe9an",
            "tooltip.toggle virtual keyboard":
              "M\xe9archl\xe1ir F\xedor\xfail a Fh\xe1il",
            "tooltip.undo": "Cealaigh",
            "menu.insert matrix": "Cuir isteach Maitr\xeds",
            "menu.insert vector": "Cuir isteach Veicteoir",
            "submenu.array.matrix delimiters": "Delimiters Maitr\xeds",
            "menu.array.add row above": "Cuir Rae Tar \xe9is",
            "menu.array.add row below": "Cuir Rae Roimh",
            "menu.array.add column after": "Cuir Col\xfan Tar \xe9is",
            "menu.array.add column before": "Cuir Col\xfan Roimh",
            "menu.array.delete row": "Scrios Rae",
            "menu.array.delete rows": "Scrios Sraitheanna Roghnaithe",
            "menu.array.delete column": "Scrios Col\xfan",
            "menu.array.delete columns": "Scrios Col\xfain Roghnaithe",
            "submenu.array.insert separator": "Cuir Deighilteoir isteach",
            "menu.insert table": "Ions\xe1igh T\xe1bla",
            "submenu.table style": "St\xedl T\xe1bla",
          },
          he: {
            "keyboard.tooltip.functions":
              "\u05e4\u05d5\u05e0\u05e7\u05e6\u05d9\u05d5\u05ea",
            "keyboard.tooltip.symbols": "\u05e1\u05de\u05dc\u05d9\u05dd",
            "keyboard.tooltip.greek":
              "\u05d0\u05d5\u05ea\u05d9\u05d5\u05ea \u05d9\u05d5\u05d5\u05e0\u05d9\u05d5\u05ea",
            "keyboard.tooltip.command":
              "\u05de\u05e6\u05d1 \u05e4\u05e7\u05d5\u05d3\u05d4 \u05dc\u05d8\u05e7\u05e1",
            "keyboard.tooltip.numeric": "\u05de\u05e1\u05e4\u05e8\u05d9",
            "keyboard.tooltip.alphabetic":
              "\u05de\u05db\u05ea\u05d1\u05d9\u05dd \u05e8\u05d5\u05de\u05d9\u05d9\u05dd",
            "tooltip.copy to clipboard":
              "\u05d4\u05e2\u05ea\u05e7 \u05dc\u05dc\u05d5\u05d7",
            "tooltip.redo":
              "\u05dc\u05b7\u05e2\u05b2\u05e9\u05c2\u05d5\u05b9\u05ea \u05e9\u05c1\u05d5\u05bc\u05d1",
            "tooltip.toggle virtual keyboard":
              "\u05d4\u05d7\u05dc\u05e3 \u05d0\u05ea \u05d4\u05de\u05e7\u05dc\u05d3\u05ea \u05d4\u05d5\u05d5\u05d9\u05e8\u05d8\u05d5\u05d0\u05dc\u05d9\u05ea",
            "tooltip.undo": "\u05dc\u05d1\u05d8\u05dc",
            "menu.insert matrix":
              "\u05d4\u05db\u05e0\u05e1 \u05de\u05d8\u05e8\u05d9\u05e7\u05e1",
            "menu.insert vector":
              "\u05d4\u05db\u05e0\u05e1 \u05d5\u05e7\u05d8\u05d5\u05e8",
            "submenu.array.matrix delimiters":
              "\u05de\u05e4\u05e8\u05d9\u05d3\u05d9 \u05de\u05d8\u05e8\u05d9\u05e7\u05e1",
            "menu.array.add row above":
              "\u05d4\u05d5\u05e1\u05e3 \u05e9\u05d5\u05e8\u05d4 \u05d0\u05d7\u05e8\u05d9",
            "menu.array.add row below":
              "\u05d4\u05d5\u05e1\u05e3 \u05e9\u05d5\u05e8\u05d4 \u05dc\u05e4\u05e0\u05d9",
            "menu.array.add column after":
              "\u05d4\u05d5\u05e1\u05e3 \u05e2\u05de\u05d5\u05d3\u05d4 \u05d0\u05d7\u05e8\u05d9",
            "menu.array.add column before":
              "\u05d4\u05d5\u05e1\u05e3 \u05e2\u05de\u05d5\u05d3\u05d4 \u05dc\u05e4\u05e0\u05d9",
            "menu.array.delete row":
              "\u05de\u05d7\u05e7 \u05e9\u05d5\u05e8\u05d4",
            "menu.array.delete rows":
              "\u05de\u05d7\u05e7 \u05e9\u05d5\u05e8\u05d5\u05ea \u05e9\u05e0\u05d1\u05d7\u05e8\u05d5",
            "menu.array.delete column":
              "\u05de\u05d7\u05e7 \u05e2\u05de\u05d5\u05d3\u05d4",
            "menu.array.delete columns":
              "\u05de\u05d7\u05e7 \u05e2\u05de\u05d5\u05d3\u05d5\u05ea \u05e9\u05e0\u05d1\u05d7\u05e8\u05d5",
            "submenu.array.insert separator":
              "\u05d4\u05db\u05e0\u05e1 \u05de\u05e4\u05e8\u05d9\u05d3",
            "menu.insert table":
              "\u05d4\u05db\u05e0\u05e1 \u05d8\u05d1\u05dc\u05d4",
            "submenu.table style":
              "\u05d8\u05d1\u05dc\u05d4 \u05e1\u05b4\u05d2\u05b0\u05e0\u05d5\u05b9\u05df",
          },
          hr: {
            "keyboard.tooltip.functions": "Funkcije",
            "keyboard.tooltip.symbols": "Simboli",
            "keyboard.tooltip.greek": "Gr\u010dka slova",
            "keyboard.tooltip.command": "LaTeX naredbeni na\u010din",
            "keyboard.tooltip.numeric": "Numeri\u010dki",
            "keyboard.tooltip.alphabetic": "Rimska slova",
            "tooltip.copy to clipboard": "Kopirati u me\u0111uspremnik",
            "tooltip.redo": "Ponovi",
            "tooltip.toggle virtual keyboard":
              "Uklju\u010di / isklju\u010di virtualnu tipkovnicu",
            "tooltip.undo": "Poni\u0161ti",
            "menu.insert matrix": "Umetni matricu",
            "menu.insert vector": "Umetni vektor",
            "submenu.array.matrix delimiters": "Matri\u010dni razdjelnici",
            "menu.array.add row above": "Dodaj redak nakon",
            "menu.array.add row below": "Dodaj redak prije",
            "menu.array.add column after": "Dodaj stupac nakon",
            "menu.array.add column before": "Dodaj stupac prije",
            "menu.array.delete row": "Izbri\u0161i redak",
            "menu.array.delete rows": "Izbri\u0161i odabrane retke",
            "menu.array.delete column": "Izbri\u0161i stupac",
            "menu.array.delete columns": "Izbri\u0161i odabrane stupce",
            "submenu.array.insert separator": "Umetni separator",
            "menu.insert table": "Umetni tablicu",
            "submenu.table style": "Stil tabele",
          },
          id: {
            "keyboard.tooltip.functions": "Fungsi",
            "keyboard.tooltip.symbols": "Simbol",
            "keyboard.tooltip.greek": "Huruf Yunani",
            "keyboard.tooltip.command": "Mode Perintah LaTeX",
            "keyboard.tooltip.numeric": "Numerik",
            "keyboard.tooltip.alphabetic": "Surat Romawi",
            "tooltip.copy to clipboard": "Menyalin ke clipboard",
            "tooltip.redo": "Mengulangi",
            "tooltip.toggle virtual keyboard": "Alihkan Keyboard Virtual",
            "tooltip.undo": "Membuka",
            "menu.insert matrix": "Sisipkan Matriks",
            "menu.insert vector": "Sisipkan Vektor",
            "submenu.array.matrix delimiters": "Pembatas Matriks",
            "menu.array.add row above": "Tambahkan Baris Setelah",
            "menu.array.add row below": "Tambahkan Baris Sebelumnya",
            "menu.array.add column after": "Tambahkan Kolom Setelah",
            "menu.array.add column before": "Tambahkan Kolom Sebelumnya",
            "menu.array.delete row": "Hapus Baris",
            "menu.array.delete rows": "Hapus Baris yang Dipilih",
            "menu.array.delete column": "Hapus Kolom",
            "menu.array.delete columns": "Hapus Kolom yang Dipilih",
            "submenu.array.insert separator": "Sisipkan Pemisah",
            "menu.insert table": "Sisipkan Tabel",
            "submenu.table style": "Gaya Tabel",
          },
          hi: {
            "keyboard.tooltip.functions":
              "\u0915\u093e\u0930\u094d\u092f\u094b\u0902",
            "keyboard.tooltip.symbols": "\u092a\u094d\u0930\u0924\u0940\u0915",
            "keyboard.tooltip.greek":
              "\u0917\u094d\u0930\u0940\u0915 \u0905\u0915\u094d\u0937\u0930",
            "keyboard.tooltip.command":
              "\u0932\u093e\u091f\u0947\u0915\u094d\u0938 \u0915\u092e\u093e\u0902\u0921 \u092e\u094b\u0921",
            "keyboard.tooltip.numeric":
              "\u0938\u0902\u0916\u094d\u092f\u093e\u0924\u094d\u092e\u0915",
            "keyboard.tooltip.alphabetic":
              "\u0930\u094b\u092e\u0928 \u092a\u0924\u094d\u0930",
            "tooltip.copy to clipboard":
              "\u0915\u094d\u0932\u093f\u092a\u092c\u094b\u0930\u094d\u0921 \u092a\u0930 \u0915\u0949\u092a\u0940 \u0915\u0930\u0947\u0902",
            "tooltip.redo":
              "\u092b\u093f\u0930 \u0938\u0947 \u0915\u0930\u0947\u0902",
            "tooltip.toggle virtual keyboard":
              "\u0935\u0930\u094d\u091a\u0941\u0905\u0932 \u0915\u0940\u092c\u094b\u0930\u094d\u0921 \u091f\u0949\u0917\u0932 \u0915\u0930\u0947\u0902",
            "tooltip.undo": "\u092a\u0942\u0930\u094d\u0935\u0935\u0924",
            "menu.insert matrix":
              "\u092e\u0948\u091f\u094d\u0930\u093f\u0915\u094d\u0938 \u0921\u093e\u0932\u0947\u0902",
            "menu.insert vector":
              "\u0935\u0947\u0915\u094d\u091f\u0930 \u0921\u093e\u0932\u0947\u0902",
            "submenu.array.matrix delimiters":
              "\u092e\u0948\u091f\u094d\u0930\u093f\u0915\u094d\u0938 \u0938\u0940\u092e\u093e\u0902\u0915\u0915",
            "menu.array.add row above":
              "\u092c\u093e\u0926 \u092e\u0947\u0902 \u092a\u0902\u0915\u094d\u0924\u093f \u091c\u094b\u0921\u093c\u0947\u0902",
            "menu.array.add row below":
              "\u092a\u0939\u0932\u0947 \u092a\u0902\u0915\u094d\u0924\u093f \u091c\u094b\u0921\u093c\u0947\u0902",
            "menu.array.add column after":
              "\u092c\u093e\u0926 \u092e\u0947\u0902 \u0915\u0949\u0932\u092e \u091c\u094b\u0921\u093c\u0947\u0902",
            "menu.array.add column before":
              "\u092a\u0939\u0932\u0947 \u0915\u0949\u0932\u092e \u091c\u094b\u0921\u093c\u0947\u0902",
            "menu.array.delete row":
              "\u092a\u0902\u0915\u094d\u0924\u093f \u0915\u094b \u0939\u091f\u093e\u090f\u0902",
            "menu.array.delete rows":
              "\u091a\u092f\u0928\u093f\u0924 \u092a\u0902\u0915\u094d\u0924\u093f\u092f\u094b\u0902 \u0915\u094b \u0939\u091f\u093e\u090f\u0902",
            "menu.array.delete column":
              "\u0915\u0949\u0932\u092e \u0939\u091f\u093e\u090f\u0902",
            "menu.array.delete columns":
              "\u091a\u092f\u0928\u093f\u0924 \u0915\u0949\u0932\u092e \u0939\u091f\u093e\u090f\u0902",
            "submenu.array.insert separator":
              "\u0935\u093f\u092d\u093e\u091c\u0915 \u0921\u093e\u0932\u0947\u0902",
            "menu.insert table":
              "\u091f\u0947\u092c\u0932 \u0907\u0902\u0938\u0930\u094d\u091f \u0915\u0930\u0947\u0902",
            "submenu.table style":
              "\u091f\u0947\u092c\u0932 \u0938\u094d\u091f\u093e\u0907\u0932",
          },
          hu: {
            "keyboard.tooltip.functions": "Funkci\xf3k",
            "keyboard.tooltip.symbols": "Szimb\xf3lumok",
            "keyboard.tooltip.greek": "G\xf6r\xf6g levelek",
            "keyboard.tooltip.command": "LaTeX Parancs m\xf3d",
            "keyboard.tooltip.numeric": "Numerikus",
            "keyboard.tooltip.alphabetic": "R\xf3mai levelek",
            "tooltip.copy to clipboard": "M\xe1solja a v\xe1g\xf3lapra",
            "tooltip.redo": "\xdajra",
            "tooltip.toggle virtual keyboard":
              "V\xe1lt\xe1s a virtu\xe1lis billenty\u0171zetre",
            "tooltip.undo": "Visszavon\xe1s",
            "menu.insert matrix": "Helyezze be a M\xe1trixot",
            "menu.insert vector": "Vektor besz\xfar\xe1sa",
            "submenu.array.matrix delimiters": "M\xe1trixhat\xe1rol\xf3k",
            "menu.array.add row above": "Sor hozz\xe1ad\xe1sa ut\xe1n",
            "menu.array.add row below": "Add Add Sor el\u0151tt",
            "menu.array.add column after": "Oszlop hozz\xe1ad\xe1sa ut\xe1n",
            "menu.array.add column before": "Add oszlop el\u0151tt",
            "menu.array.delete row": "Sor t\xf6rl\xe9se",
            "menu.array.delete rows": "Kijel\xf6lt sorok t\xf6rl\xe9se",
            "menu.array.delete column": "Oszlop t\xf6rl\xe9se",
            "menu.array.delete columns": "A kijel\xf6lt oszlopok t\xf6rl\xe9se",
            "submenu.array.insert separator":
              "Helyezze be az elv\xe1laszt\xf3t",
            "menu.insert table": "Helyezze be a t\xe1bl\xe1zatot",
            "submenu.table style": "T\xe1bl\xe1zatos st\xedlus",
          },
          it: {
            "keyboard.tooltip.functions": "Funzioni",
            "keyboard.tooltip.symbols": "Simboli",
            "keyboard.tooltip.greek": "Lettere greche",
            "keyboard.tooltip.command": "Modalit\xe0 di comando LaTeX",
            "keyboard.tooltip.numeric": "Numerico",
            "keyboard.tooltip.alphabetic": "Lettere romane",
            "tooltip.copy to clipboard": "Copia negli appunti",
            "tooltip.redo": "Rifare",
            "tooltip.toggle virtual keyboard":
              "Attiva / disattiva la tastiera virtuale",
            "tooltip.undo": "Disfare",
            "menu.insert matrix": "Inserisci una Matrice",
            "menu.insert vector": "Inserisci Vettore",
            "submenu.array.matrix delimiters": "Delimitatori di Matrice",
            "menu.array.add row above": "Aggiungi una Riga Prima",
            "menu.array.add row below": "Aggiungi una Riga Dopo",
            "menu.array.add column before": "Aggiungi una Colonna Prima",
            "menu.array.add column after": "Aggiungi una Colonna Dopo",
            "menu.array.delete row": "Rimuovi una Riga",
            "menu.array.delete rows": "Rimuovi le Righe Selezionate",
            "menu.array.delete column": "Rimuovi una Colonna",
            "menu.array.delete columns": "Rimuovi le Colonne Selezionate",
            "submenu.array.insert separator": "Inserisci un Separatore",
            "menu.insert table": "Inserisci Tabella",
            "submenu.table style": "Stile tabella",
          },
          is: {
            "keyboard.tooltip.functions": "A\xf0ger\xf0ir",
            "keyboard.tooltip.symbols": "T\xe1kn",
            "keyboard.tooltip.greek": "Gr\xedsk br\xe9f",
            "keyboard.tooltip.command": "LaTeX stj\xf3rnunarstilling",
            "keyboard.tooltip.numeric": "T\xf6lulegt",
            "keyboard.tooltip.alphabetic": "R\xf3mversk br\xe9f",
            "tooltip.copy to clipboard": "Afrita\xf0u \xe1 klemmuspjald",
            "tooltip.redo": "Endurtaka",
            "tooltip.toggle virtual keyboard":
              "Skiptu um s\xfdndarlyklabor\xf0",
            "tooltip.undo": "Afturkalla",
            "menu.insert matrix": "Settu fylki inn",
            "menu.insert vector": "Settu inn Vector",
            "submenu.array.matrix delimiters": "Matrix afm\xf6rkun",
            "menu.array.add row above": "B\xe6ta vi\xf0 r\xf6\xf0 \xe1 eftir",
            "menu.array.add row below": "B\xe6ta vi\xf0 r\xf6\xf0 \xe1\xf0ur",
            "menu.array.add column after": "B\xe6ta vi\xf0 d\xe1lki \xe1 eftir",
            "menu.array.add column before":
              "B\xe6ta vi\xf0 d\xe1lki \xe1\xf0ur",
            "menu.array.delete row": "Ey\xf0a r\xf6\xf0",
            "menu.array.delete rows": "Ey\xf0a v\xf6ldum l\xednum",
            "menu.array.delete column": "Ey\xf0a d\xe1lki",
            "menu.array.delete columns": "Ey\xf0a v\xf6ldum d\xe1lkum",
            "submenu.array.insert separator": "Settu skiljuna \xed",
            "menu.insert table": "Settu inn t\xf6flu",
            "submenu.table style": "T\xf6flu st\xedl",
          },
          ja: {
            "keyboard.tooltip.functions": "\u95a2\u6570",
            "keyboard.tooltip.symbols": "\u30b7\u30f3\u30dc\u30eb",
            "keyboard.tooltip.greek": "\u30ae\u30ea\u30b7\u30e3\u6587\u5b57",
            "keyboard.tooltip.command":
              "\u30e9\u30c6\u30c3\u30af\u30b9\u30b3\u30de\u30f3\u30c9\u30e2\u30fc\u30c9",
            "keyboard.tooltip.numeric": "\u6570\u5024",
            "keyboard.tooltip.alphabetic": "\u30ed\u30fc\u30de\u5b57",
            "tooltip.copy to clipboard":
              "\u30af\u30ea\u30c3\u30d7\u30dc\u30fc\u30c9\u306b\u30b3\u30d4\u30fc",
            "tooltip.redo": "\u3084\u308a\u76f4\u3057",
            "tooltip.toggle virtual keyboard":
              "\u4eee\u60f3\u30ad\u30fc\u30dc\u30fc\u30c9\u306e\u5207\u308a\u66ff\u3048",
            "tooltip.undo": "\u5143\u306b\u623b\u3059",
            "menu.insert matrix":
              "\u30de\u30c8\u30ea\u30c3\u30af\u30b9\u3092\u633f\u5165",
            "menu.insert vector": "\u30d9\u30af\u30c8\u30eb\u3092\u633f\u5165",
            "submenu.array.matrix delimiters":
              "\u884c\u5217\u533a\u5207\u308a\u6587\u5b57",
            "menu.array.add row above": "\u5f8c\u306b\u884c\u3092\u8ffd\u52a0",
            "menu.array.add row below": "\u524d\u306b\u884c\u3092\u8ffd\u52a0",
            "menu.array.add column after":
              "\u5f8c\u306b\u5217\u3092\u8ffd\u52a0",
            "menu.array.add column before":
              "\u524d\u306b\u5217\u3092\u8ffd\u52a0",
            "menu.array.delete row": "\u884c\u3092\u524a\u9664",
            "menu.array.delete rows":
              "\u9078\u629e\u3057\u305f\u884c\u3092\u524a\u9664\u3059\u308b",
            "menu.array.delete column": "\u5217\u3092\u524a\u9664",
            "menu.array.delete columns":
              "\u9078\u629e\u3057\u305f\u5217\u3092\u524a\u9664\u3059\u308b",
            "submenu.array.insert separator":
              "\u30bb\u30d1\u30ec\u30fc\u30bf\u30fc\u3092\u633f\u5165",
            "menu.insert table": "\u30c6\u30fc\u30d6\u30eb\u3092\u633f\u5165",
            "submenu.table style":
              "\u30c6\u30fc\u30d6\u30eb\u30b9\u30bf\u30a4\u30eb",
          },
          ko: {
            "keyboard.tooltip.functions": "\uae30\ub2a5",
            "keyboard.tooltip.symbols": "\uae30\ud638",
            "keyboard.tooltip.greek": "\uadf8\ub9ac\uc2a4 \ubb38\uc790",
            "keyboard.tooltip.command":
              "\uc720\uc561 \uba85\ub839 \ubaa8\ub4dc",
            "keyboard.tooltip.numeric": "\uc22b\uc790",
            "keyboard.tooltip.alphabetic": "\ub85c\ub9c8 \ubb38\uc790",
            "tooltip.copy to clipboard":
              "\ud074\ub9bd \ubcf4\ub4dc\uc5d0 \ubcf5\uc0ac",
            "tooltip.redo": "\ub2e4\uc2dc \ud558\ub2e4",
            "tooltip.toggle virtual keyboard":
              "\uac00\uc0c1 \ud0a4\ubcf4\ub4dc \uc804\ud658",
            "tooltip.undo": "\uc2e4\ud589 \ucde8\uc18c",
            "menu.insert matrix": "\ub9e4\ud2b8\ub9ad\uc2a4 \uc0bd\uc785",
            "menu.insert vector": "\ubca1\ud130 \uc0bd\uc785",
            "submenu.array.matrix delimiters":
              "\ud589\ub82c \uad6c\ubd84 \uae30\ud638",
            "menu.array.add row above": "\ub4a4\uc5d0 \ud589 \ucd94\uac00",
            "menu.array.add row below": "\uc55e\uc5d0 \ud589 \ucd94\uac00",
            "menu.array.add column after": "\ub4a4\uc5d0 \uc5f4 \ucd94\uac00",
            "menu.array.add column before": "\uc55e\uc5d0 \uc5f4 \ucd94\uac00",
            "menu.array.delete row": "\ud589 \uc0ad\uc81c",
            "menu.array.delete rows": "\uc120\ud0dd\ud55c \ud589 \uc0ad\uc81c",
            "menu.array.delete column": "\uc5f4 \uc0ad\uc81c",
            "menu.array.delete columns":
              "\uc120\ud0dd\ud55c \uc5f4 \uc0ad\uc81c",
            "submenu.array.insert separator": "\uad6c\ubd84\uc790 \uc0bd\uc785",
            "menu.insert table": "\ud45c \uc0bd\uc785",
            "submenu.table style": "\ud14c\uc774\ube14 \uc2a4\ud0c0\uc77c",
          },
          lv: {
            "keyboard.tooltip.functions": "Funkcijas",
            "keyboard.tooltip.symbols": "Simboli",
            "keyboard.tooltip.greek": "Grie\u0137u burti",
            "keyboard.tooltip.command": "LaTeX komandu re\u017e\u012bms",
            "keyboard.tooltip.numeric": "Ciparu skaitlis",
            "keyboard.tooltip.alphabetic": "Romie\u0161u v\u0113stules",
            "tooltip.copy to clipboard": "Kop\u0113t starpliktuv\u0113",
            "tooltip.redo": "P\u0101rtais\u012bt",
            "tooltip.toggle virtual keyboard":
              "P\u0101rsl\u0113gt virtu\u0101lo tastat\u016bru",
            "tooltip.undo": "Atsaukt",
            "menu.insert matrix": "Ievietojiet matricu",
            "menu.insert vector": "Ievietot vektoru",
            "submenu.array.matrix delimiters":
              "Matricas norobe\u017eot\u0101ji",
            "menu.array.add row above": "Pievienot rindu p\u0113c",
            "menu.array.add row below": "Pievienot rindu pirms",
            "menu.array.add column after": "Pievienot kolonnu p\u0113c",
            "menu.array.add column before": "Pievienot kolonnu pirms",
            "menu.array.delete row": "Dz\u0113st rindu",
            "menu.array.delete rows": "Dz\u0113st atlas\u012bt\u0101s rindas",
            "menu.array.delete column": "Dz\u0113st kolonnu",
            "menu.array.delete columns":
              "Dz\u0113st atlas\u012bt\u0101s kolonnas",
            "submenu.array.insert separator":
              "Ievietojiet atdal\u012bt\u0101ju",
            "menu.insert table": "Ievietojiet tabulu",
            "submenu.table style": "Galda stils",
          },
          lt: {
            "keyboard.tooltip.functions": "Funkcijos",
            "keyboard.tooltip.symbols": "Simboliai",
            "keyboard.tooltip.greek": "Graiki\u0161kos raid\u0117s",
            "keyboard.tooltip.command": "LaTeX komand\u0173 re\u017eimas",
            "keyboard.tooltip.numeric": "Skaitmeninis",
            "keyboard.tooltip.alphabetic": "Romos lai\u0161kai",
            "tooltip.copy to clipboard":
              "Nukopijuoti \u012f i\u0161karpin\u0119",
            "tooltip.redo": "Perdaryti",
            "tooltip.toggle virtual keyboard":
              "Perjungti virtuali\u0105j\u0105 klaviat\u016br\u0105",
            "tooltip.undo": "At\u0161aukti",
            "menu.insert matrix": "Ievietojiet matricu",
            "menu.insert vector": "Ievietot vektoru",
            "submenu.array.matrix delimiters":
              "Matricas norobe\u017eot\u0101ji",
            "menu.array.add row above": "Pievienot rindu p\u0113c",
            "menu.array.add row below": "Pievienot rindu pirms",
            "menu.array.add column after": "Pievienot kolonnu p\u0113c",
            "menu.array.add column before": "Pievienot kolonnu pirms",
            "menu.array.delete row": "Dz\u0113st rindu",
            "menu.array.delete rows": "Dz\u0113st atlas\u012bt\u0101s rindas",
            "menu.array.delete column": "Dz\u0113st kolonnu",
            "menu.array.delete columns":
              "Dz\u0113st atlas\u012bt\u0101s kolonnas",
            "submenu.array.insert separator":
              "Ievietojiet atdal\u012bt\u0101ju",
            "menu.insert table": "Ievietojiet tabulu",
            "submenu.table style": "Tabulas stili",
          },
          lu: {
            "keyboard.tooltip.functions": "Funktiounen",
            "keyboard.tooltip.symbols": "Symboler",
            "keyboard.tooltip.greek": "Griichesch Br\xe9iwer",
            "keyboard.tooltip.command": "LaTeX Kommando Modus",
            "keyboard.tooltip.numeric": "Numeresch",
            "keyboard.tooltip.alphabetic": "R\xe9imesch Br\xe9iwer",
            "tooltip.copy to clipboard": "Kop\xe9iert op Clipboard",
            "tooltip.redo": "Nees nei maachen",
            "tooltip.toggle virtual keyboard": "Wiesselt Virtuell Tastatur",
            "tooltip.undo": "Undoen",
            "menu.insert matrix": "Matrix asetzen",
            "menu.insert vector": "Insert Vector",
            "submenu.array.matrix delimiters": "Matrix Ofgrenzer",
            "menu.array.add row above": "Dob\xe4izemaachen Rei No",
            "menu.array.add row below": "F\xfc\xfcgt Rei vir",
            "menu.array.add column after": "Dob\xe4izemaachen Kolonn No",
            "menu.array.add column before": "Kolonn derb\xe4i Virun",
            "menu.array.delete row": "Rad l\xe4schen",
            "menu.array.delete rows": "L\xe4scht Ausgewielte Reien",
            "menu.array.delete column": "L\xe4scht Kolonn",
            "menu.array.delete columns": "L\xe4scht Ausgewielte Kolonnen",
            "submenu.array.insert separator": "Insert Separator",
            "menu.insert table": "D\xebsch anzeginn",
            "submenu.table style": "D\xebsch Style",
          },
          nl: {
            "keyboard.tooltip.functions": "Functies",
            "keyboard.tooltip.symbols": "Symbolen",
            "keyboard.tooltip.greek": "Griekse letters",
            "keyboard.tooltip.command": "LaTeX commando mode",
            "keyboard.tooltip.numeric": "Numeriek",
            "keyboard.tooltip.alphabetic": "Romeinse letters",
            "tooltip.copy to clipboard": "Kopi\xebren naar klembord",
            "tooltip.redo": "Opnieuw",
            "tooltip.toggle virtual keyboard":
              "Schakel naar virtueel toetsenbord",
            "tooltip.undo": "Ongedaan maken",
            "menu.insert matrix": "Matrix invoegen",
            "menu.insert vector": "Vector invoegen",
            "submenu.array.matrix delimiters": "Matrixscheidingstekens",
            "menu.array.add row above": "Rij toevoegen na",
            "menu.array.add row below": "Rij toevoegen eerder",
            "menu.array.add column after": "Kolom toevoegen na",
            "menu.array.add column before": "Kolom toevoegen voor",
            "menu.array.delete row": "Verwijder rij",
            "menu.array.delete rows": "Geselecteerde rijen verwijderen",
            "menu.array.delete column": "Kolom verwijderen",
            "menu.array.delete columns": "Geselecteerde kolommen verwijderen",
            "submenu.array.insert separator": "Scheidingsteken invoegen",
            "menu.insert table": "Tabel invoegen",
            "submenu.table style": "Tabelstijl",
          },
          no: {
            "keyboard.tooltip.functions": "Funksjoner",
            "keyboard.tooltip.symbols": "Symboler",
            "keyboard.tooltip.greek": "Greske bokstaver",
            "keyboard.tooltip.command": "LaTeX kommandomodus",
            "keyboard.tooltip.numeric": "Numerisk",
            "keyboard.tooltip.alphabetic": "Romerske bokstaver",
            "tooltip.copy to clipboard": "Kopiere til utklippstavle",
            "tooltip.redo": "Gj\xf8re om",
            "tooltip.toggle virtual keyboard": "Bytt virtuelt tastatur",
            "tooltip.undo": "Angre",
            "menu.insert matrix": "Sett inn matrise",
            "menu.insert vector": "Sett inn vektor",
            "submenu.array.matrix delimiters": "Matrix avgrensere",
            "menu.array.add row above": "Legg til rad etter",
            "menu.array.add row below": "Legg til rad f\xf8r",
            "menu.array.add column after": "Legg til kolonne etter",
            "menu.array.add column before": "Legg til kolonne f\xf8r",
            "menu.array.delete row": "Slett rad",
            "menu.array.delete rows": "Slett valgte rader",
            "menu.array.delete column": "Slett kolonne",
            "menu.array.delete columns": "Slett valgte kolonner",
            "submenu.array.insert separator": "Sett inn skilletegn",
            "menu.insert table": "Sett inn tabell",
            "submenu.table style": "Tabellstil",
          },
          mk: {
            "keyboard.tooltip.functions":
              "\u0424\u0443\u043d\u043a\u0446\u0438\u0438",
            "keyboard.tooltip.symbols":
              "\u0421\u0438\u043c\u0431\u043e\u043b\u0438",
            "keyboard.tooltip.greek":
              "\u0413\u0440\u0447\u043a\u0438 \u0431\u0443\u043a\u0432\u0438",
            "keyboard.tooltip.command":
              "\u0420\u0435\u0436\u0438\u043c \u043d\u0430 \u043a\u043e\u043c\u0430\u043d\u0434\u0430 \u0432\u043e \u043b\u0430\u0442\u0435\u043a\u0441",
            "keyboard.tooltip.numeric":
              "\u041d\u0443\u043c\u0435\u0440\u0438\u0447\u043a\u0438",
            "keyboard.tooltip.alphabetic":
              "\u0420\u0438\u043c\u0441\u043a\u0438 \u043f\u0438\u0441\u043c\u0430",
            "tooltip.copy to clipboard":
              "\u041a\u043e\u043f\u0438\u0440\u0430\u0458\u0442\u0435 \u0432\u043e \u043a\u043b\u0438\u043f\u0431\u043e\u0440\u0434",
            "tooltip.redo": "\u041f\u043e\u0432\u0442\u043e\u0440\u043d\u043e",
            "tooltip.toggle virtual keyboard":
              "\u0412\u043a\u043b\u0443\u0447\u0435\u0442\u0435 \u0458\u0430 \u0432\u0438\u0440\u0442\u0443\u0435\u043b\u043d\u0430\u0442\u0430 \u0442\u0430\u0441\u0442\u0430\u0442\u0443\u0440\u0430",
            "tooltip.undo": "\u0412\u0440\u0430\u0442\u0438",
            "menu.insert matrix":
              "\u0412\u043c\u0435\u0442\u043d\u0435\u0442\u0435 \u043c\u0430\u0442\u0440\u0438\u0446\u0430",
            "menu.insert vector":
              "\u0412\u043c\u0435\u0442\u043d\u0438 \u0432\u0435\u043a\u0442\u043e\u0440",
            "submenu.array.matrix delimiters":
              "\u0420\u0430\u0437\u0433\u0440\u0430\u043d\u0438\u0447\u0443\u0432\u0430\u0447\u0438 \u043d\u0430 \u043c\u0430\u0442\u0440\u0438\u0446\u0430",
            "menu.array.add row above":
              "\u0414\u043e\u0434\u0430\u0434\u0435\u0442\u0435 \u0440\u0435\u0434 \u043f\u043e\u0441\u043b\u0435",
            "menu.array.add row below":
              "\u0414\u043e\u0434\u0430\u0434\u0438 \u0440\u0435\u0434 \u043f\u0440\u0435\u0434 \u0442\u043e\u0430",
            "menu.array.add column after":
              "\u0414\u043e\u0434\u0430\u0434\u0435\u0442\u0435 \u043a\u043e\u043b\u043e\u043d\u0430 \u043f\u043e\u0441\u043b\u0435",
            "menu.array.add column before":
              "\u0414\u043e\u0434\u0430\u0434\u0435\u0442\u0435 \u043a\u043e\u043b\u043e\u043d\u0430 \u043f\u0440\u0435\u0434 \u0442\u043e\u0430",
            "menu.array.delete row":
              "\u0418\u0437\u0431\u0440\u0438\u0448\u0438 \u0433\u043e \u0440\u0435\u0434\u043e\u0442",
            "menu.array.delete rows":
              "\u0418\u0437\u0431\u0440\u0438\u0448\u0435\u0442\u0435 \u0433\u0438 \u0438\u0437\u0431\u0440\u0430\u043d\u0438\u0442\u0435 \u0440\u0435\u0434\u043e\u0432\u0438",
            "menu.array.delete column":
              "\u0418\u0437\u0431\u0440\u0438\u0448\u0438 \u0458\u0430 \u043a\u043e\u043b\u043e\u043d\u0430\u0442\u0430",
            "menu.array.delete columns":
              "\u0418\u0437\u0431\u0440\u0438\u0448\u0438 \u0458\u0430 \u043a\u043e\u043b\u043e\u043d\u0430\u0442\u0430",
            "submenu.array.insert separator":
              "\u0412\u043c\u0435\u0442\u043d\u0435\u0442\u0435 \u0441\u0435\u043f\u0430\u0440\u0430\u0442\u043e\u0440",
            "menu.insert table":
              "\u0412\u043c\u0435\u0442\u043d\u0438 \u0442\u0430\u0431\u0435\u043b\u0430",
            "submenu.table style":
              "\u0422\u0430\u0431\u0435\u043b\u0430 \u0441\u0442\u0438\u043b",
          },
          pl: {
            "keyboard.tooltip.functions": "Funkcje",
            "keyboard.tooltip.symbols": "Symbolika",
            "keyboard.tooltip.greek": "Litery greckie",
            "keyboard.tooltip.command": "Tryb polece\u0144 LaTeX",
            "keyboard.tooltip.numeric": "Numeryczne",
            "keyboard.tooltip.alphabetic": "Litery rzymskie",
            "tooltip.copy to clipboard": "Kopiuj do Schowka",
            "tooltip.redo": "Przywr\xf3\u0107",
            "tooltip.toggle virtual keyboard":
              "Prze\u0142\u0105cz wirtualn\u0105 klawiatur\u0119",
            "tooltip.undo": "Cofnij",
            "menu.insert matrix": "Wstaw macierz",
            "menu.insert vector": "Wstaw wektor",
            "submenu.array.matrix delimiters": "Ograniczniki macierzy",
            "menu.array.add row above": "Dodaj wiersz po",
            "menu.array.add row below": "Dodaj wiersz przed",
            "menu.array.add column after": "Dodaj kolumn\u0119 po",
            "menu.array.add column before": "Dodaj kolumn\u0119 przed",
            "menu.array.delete row": "Usu\u0144 wiersz",
            "menu.array.delete rows": "Usu\u0144 wybrane wiersze",
            "menu.array.delete column": "Usu\u0144 kolumn\u0119",
            "menu.array.delete columns": "Usu\u0144 wybrane kolumny",
            "submenu.array.insert separator": "Wstaw separator",
            "menu.insert table": "Wype\u0142nij tabel\u0119",
            "submenu.table style": "Styl tabel\u0119",
          },
          pt: {
            "keyboard.tooltip.functions": "Functions",
            "keyboard.tooltip.symbols": "S\xedmbolos",
            "keyboard.tooltip.greek": "Letras gregas",
            "keyboard.tooltip.command": "Modo de Comando LaTeX",
            "keyboard.tooltip.numeric": "Num\xe9rico",
            "keyboard.tooltip.alphabetic": "Letras romanas",
            "tooltip.copy to clipboard":
              "Copiar para \xe1rea de transfer\xeancia",
            "tooltip.redo": "Refazer",
            "tooltip.toggle virtual keyboard": "Alternar teclado virtual",
            "tooltip.undo": "Desfazer",
            "menu.insert matrix": "Inserir Matriz",
            "menu.insert vector": "Inserir vetor",
            "submenu.array.matrix delimiters": "Delimitadores de matriz",
            "menu.array.add row above": "Adicionar linha depois",
            "menu.array.add row below": "Adicionar linha antes",
            "menu.array.add column after": "Adicionar coluna depois",
            "menu.array.add column before": "Adicionar coluna antes",
            "menu.array.delete row": "Excluir linha",
            "menu.array.delete rows": "Excluir linhas selecionadas",
            "menu.array.delete column": "Apagar Coluna",
            "menu.array.delete columns": "Excluir Colunas Selecionadas",
            "submenu.array.insert separator": "Inserir Separador",
            "menu.insert table": "Insira a tabela",
            "submenu.table style": "Estilo tabela",
          },
          ro: {
            "keyboard.tooltip.functions": "Func\u021bii",
            "keyboard.tooltip.symbols": "Simboluri",
            "keyboard.tooltip.greek": "Scrisori grece\u0219ti",
            "keyboard.tooltip.command": "Modul de comand\u0103 latex",
            "keyboard.tooltip.numeric": "Numeric",
            "keyboard.tooltip.alphabetic": "Scrisori romane",
            "tooltip.copy to clipboard": "Copia\u021bi \xeen clipboard",
            "tooltip.redo": "A reface",
            "tooltip.toggle virtual keyboard":
              "Comuta\u021bi tastatura virtual\u0103",
            "tooltip.undo": "Anula",
            "menu.insert matrix": "Introduce\u021bi Matrix",
            "menu.insert vector": "Insera\u021bi Vector",
            "submenu.array.matrix delimiters": "Delimitatori de matrice",
            "menu.array.add row above":
              "Ad\u0103uga\u021bi r\xe2ndul dup\u0103",
            "menu.array.add row below":
              "Ad\u0103uga\u021bi r\xe2ndul \xeenainte",
            "menu.array.add column after":
              "Ad\u0103uga\u021bi o coloan\u0103 dup\u0103",
            "menu.array.add column before":
              "Ad\u0103uga\u021bi o coloan\u0103 \xeenainte",
            "menu.array.delete row": "\u0218terge\u021bi r\xe2ndul",
            "menu.array.delete rows":
              "\u0218terge\u021bi r\xe2ndurile selectate",
            "menu.array.delete column": "\u0218terge\u021bi coloana",
            "menu.array.delete columns":
              "\u0218terge\u021bi coloanele selectate",
            "submenu.array.insert separator": "Introduce\u021bi separatorul",
            "menu.insert table": "Introduce\u021bi tabelul",
            "submenu.table style": "Table style",
          },
          ru: {
            "keyboard.tooltip.functions":
              "\u0424\u0443\u043d\u043a\u0446\u0438\u0438",
            "keyboard.tooltip.symbols":
              "\u0421\u0438\u043c\u0432\u043e\u043b\u044b",
            "keyboard.tooltip.greek":
              "\u0413\u0440\u0435\u0447\u0435\u0441\u043a\u0438\u0435 \u0431\u0443\u043a\u0432\u044b",
            "keyboard.tooltip.command":
              "\u0420\u0435\u0436\u0438\u043c \u043a\u043e\u043c\u0430\u043d\u0434\u043d\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0438 \u041b\u0430\u0442\u0435\u043a\u0441",
            "keyboard.tooltip.numeric":
              "\u0447\u0438\u0441\u043b\u043e\u0432\u043e\u0439",
            "keyboard.tooltip.alphabetic":
              "\u041b\u0430\u0442\u0438\u043d\u0441\u043a\u0438\u0435 \u0431\u0443\u043a\u0432\u044b",
            "tooltip.copy to clipboard":
              "\u0421\u043a\u043e\u043f\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0432 \u0431\u0443\u0444\u0435\u0440 \u043e\u0431\u043c\u0435\u043d\u0430",
            "tooltip.redo":
              "\u043f\u0435\u0440\u0435\u0434\u0435\u043b\u044b\u0432\u0430\u0442\u044c",
            "tooltip.toggle virtual keyboard":
              "\u041f\u0435\u0440\u0435\u043a\u043b\u044e\u0447\u0438\u0442\u044c \u0432\u0438\u0440\u0442\u0443\u0430\u043b\u044c\u043d\u0443\u044e \u043a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440\u0443",
            "tooltip.undo":
              "\u0440\u0430\u0441\u0441\u0442\u0435\u0433\u0438\u0432\u0430\u0442\u044c",
            "menu.insert matrix":
              "\u0412\u0441\u0442\u0430\u0432\u0438\u0442\u044c \u043c\u0430\u0442\u0440\u0438\u0446\u0443",
            "menu.insert vector":
              "\u0412\u0441\u0442\u0430\u0432\u0438\u0442\u044c \u0432\u0435\u043a\u0442\u043e\u0440",
            "submenu.array.matrix delimiters":
              "\u041c\u0430\u0442\u0440\u0438\u0447\u043d\u044b\u0435 \u0440\u0430\u0437\u0434\u0435\u043b\u0438\u0442\u0435\u043b\u0438",
            "menu.array.add row above":
              "\u0414\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0441\u0442\u0440\u043e\u043a\u0443 \u043f\u043e\u0441\u043b\u0435",
            "menu.array.add row below":
              "\u0414\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0441\u0442\u0440\u043e\u043a\u0443 \u043f\u0435\u0440\u0435\u0434",
            "menu.array.add column after":
              "\u0414\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0441\u0442\u043e\u043b\u0431\u0435\u0446 \u043f\u043e\u0441\u043b\u0435",
            "menu.array.add column before":
              "\u0414\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0441\u0442\u043e\u043b\u0431\u0435\u0446 \u043f\u0435\u0440\u0435\u0434",
            "menu.array.delete row":
              "\u0423\u0434\u0430\u043b\u0438\u0442\u044c \u0441\u0442\u0440\u043e\u043a\u0443",
            "menu.array.delete rows":
              "\u0423\u0434\u0430\u043b\u0438\u0442\u044c \u0432\u044b\u0431\u0440\u0430\u043d\u043d\u044b\u0435 \u0441\u0442\u0440\u043e\u043a\u0438",
            "menu.array.delete column":
              "\u0423\u0434\u0430\u043b\u0438\u0442\u044c \u0441\u0442\u043e\u043b\u0431\u0435\u0446",
            "menu.array.delete columns":
              "\u0423\u0434\u0430\u043b\u0438\u0442\u044c \u0432\u044b\u0431\u0440\u0430\u043d\u043d\u044b\u0435 \u0441\u0442\u043e\u043b\u0431\u0446\u044b",
            "submenu.array.insert separator":
              "\u0412\u0441\u0442\u0430\u0432\u0438\u0442\u044c \u0440\u0430\u0437\u0434\u0435\u043b\u0438\u0442\u0435\u043b\u044c",
            "menu.insert table":
              "\u0412\u0441\u0442\u0430\u0432\u0438\u0442\u044c \u0442\u0430\u0431\u043b\u0438\u0446\u0443",
            "submenu.table style":
              "\u0422\u0430\u0431\u043b\u0438\u0447\u043d\u044b\u0439 \u0441\u0442\u0438\u043b\u044c",
          },
          sk: {
            "keyboard.tooltip.functions": "Functions",
            "keyboard.tooltip.symbols": "Symboly",
            "keyboard.tooltip.greek": "Gr\xe9cke listy",
            "keyboard.tooltip.command": "Pr\xedkazov\xfd re\u017eim LaTeX",
            "keyboard.tooltip.numeric": "Numerick\xe9",
            "keyboard.tooltip.alphabetic": "R\xedmske listy",
            "tooltip.copy to clipboard": "Skop\xedrova\u0165 do schr\xe1nky",
            "tooltip.redo": "Znova",
            "tooltip.toggle virtual keyboard":
              "Prepn\xfa\u0165 virtu\xe1lnu kl\xe1vesnicu",
            "tooltip.undo": "Vr\xe1tenie sp\xe4\u0165",
            "menu.insert matrix": "Vlo\u017ete maticu",
            "menu.insert vector": "Vlo\u017ete vektor",
            "submenu.array.matrix delimiters": "Odde\u013eova\u010de mat\xedc",
            "menu.array.add row above": "Pridajte riadok za",
            "menu.array.add row below": "Pridajte riadok pred",
            "menu.array.add column after": "Prida\u0165 st\u013apec za",
            "menu.array.add column before": "Pridajte st\u013apec predt\xfdm",
            "menu.array.delete row": "Odstr\xe1ni\u0165 riadok",
            "menu.array.delete rows": "Odstr\xe1ni\u0165 vybrat\xe9 riadky",
            "menu.array.delete column": "Odstr\xe1ni\u0165 st\u013apec",
            "menu.array.delete columns":
              "Odstr\xe1ni\u0165 vybrat\xe9 st\u013apce",
            "submenu.array.insert separator": "Vlo\u017ete odde\u013eova\u010d",
            "menu.insert table": "Vlo\u017ete tabu\u013eku",
            "submenu.table style": "\u0160t\xfdl tabu\u013eky",
          },
          sl: {
            "keyboard.tooltip.functions": "Funkcije",
            "keyboard.tooltip.symbols": "Simboli",
            "keyboard.tooltip.greek": "Gr\u0161ka pisma",
            "keyboard.tooltip.command": "Ukazni na\u010din LaTeX",
            "keyboard.tooltip.numeric": "\u0160tevilsko",
            "keyboard.tooltip.alphabetic": "Rimska pisma",
            "tooltip.copy to clipboard": "Kopirati v odlo\u017ei\u0161\u010de",
            "tooltip.redo": "Ponovi",
            "tooltip.toggle virtual keyboard": "Preklop navidezne tipkovnice",
            "tooltip.undo": "Razveljavi",
            "menu.insert matrix": "Vstavi matrico",
            "menu.insert vector": "Vstavi vektor",
            "submenu.array.matrix delimiters": "Matri\u010dni lo\u010devalniki",
            "menu.array.add row above": "Dodaj vrstico po",
            "menu.array.add row below": "Dodaj vrstico prej",
            "menu.array.add column after": "Dodaj stolpec po",
            "menu.array.add column before": "Dodaj stolpec prej",
            "menu.array.delete row": "Izbri\u0161i vrstico",
            "menu.array.delete rows": "Izbri\u0161i izbrane vrstice",
            "menu.array.delete column": "Izbri\u0161i stolpec",
            "menu.array.delete columns": "Izbri\u0161i izbrane stolpce",
            "submenu.array.insert separator": "Vstavi lo\u010dilo",
            "menu.insert table": "Vstavi tabelo",
            "submenu.table style": "Tabela slog",
          },
          sq: {
            "keyboard.tooltip.functions": "Funksione",
            "keyboard.tooltip.symbols": "Simbolet",
            "keyboard.tooltip.greek": "Letrat Greke",
            "keyboard.tooltip.command": "Modaliteti i komand\xebs latex",
            "keyboard.tooltip.numeric": "Numerike",
            "keyboard.tooltip.alphabetic": "Letrat romake",
            "tooltip.copy to clipboard": "Kopjoni n\xeb Clipboard",
            "tooltip.redo": "Riparo",
            "tooltip.toggle virtual keyboard": "Aktivizo tastier\xebn virtuale",
            "tooltip.undo": "Zhb\xebj",
            "menu.insert matrix": "Vendosni Matric\xebn",
            "menu.insert vector": "Vendos vektorin",
            "submenu.array.matrix delimiters": "P\xebrcaktuesit e matric\xebs",
            "menu.array.add row above": "Shto Rreshtin Pas",
            "menu.array.add row below": "Shto Rreshtin Para",
            "menu.array.add column after": "Shto kolon\xebn pas",
            "menu.array.add column before": "Shto kolon\xebn para",
            "menu.array.delete row": "Fshi Rreshtin",
            "menu.array.delete rows": "Fshi rreshtat e zgjedhur",
            "menu.array.delete column": "Fshi kolon\xebn",
            "menu.array.delete columns": "Fshi kolonat e zgjedhura",
            "submenu.array.insert separator": "Vendos Ndar\xebsin",
            "menu.insert table": "Vendos tabel\xebn",
            "submenu.table style": "Stili tabel\xebn",
          },
          sr: {
            "keyboard.tooltip.functions":
              "\u0424\u0443\u043d\u043a\u0446\u0438\u0458\u0435",
            "keyboard.tooltip.symbols":
              "\u0421\u0438\u043c\u0431\u043e\u043b\u0438",
            "keyboard.tooltip.greek":
              "\u0413\u0440\u0435\u0435\u043a \u041b\u0435\u0442\u0442\u0435\u0440\u0441",
            "keyboard.tooltip.command":
              "\u041b\u0430\u0422\u0435\u041a\u0441 \u043a\u043e\u043c\u0430\u043d\u0434\u043d\u0438 \u0440\u0435\u0436\u0438\u043c",
            "keyboard.tooltip.numeric":
              "\u041d\u0443\u043c\u0435\u0440\u0438\u0447\u043a\u0438",
            "keyboard.tooltip.alphabetic":
              "\u0420\u0438\u043c\u0441\u043a\u0430 \u043f\u0438\u0441\u043c\u0430",
            "tooltip.copy to clipboard":
              "\u041a\u043e\u043f\u0438\u0440\u0430\u0458\u0442\u0435 \u0443 \u043c\u0435\u0452\u0443\u0441\u043f\u0440\u0435\u043c\u043d\u0438\u043a",
            "tooltip.redo": "\u041f\u043e\u043d\u043e\u0432\u0438",
            "tooltip.toggle virtual keyboard":
              "\u0423\u043a\u0459\u0443\u0447\u0438 / \u0438\u0441\u043a\u0459\u0443\u0447\u0438 \u0432\u0438\u0440\u0442\u0443\u0435\u043b\u043d\u0443 \u0442\u0430\u0441\u0442\u0430\u0442\u0443\u0440\u0443",
            "tooltip.undo": "\u041e\u043f\u043e\u0437\u043e\u0432\u0438",
            "menu.insert matrix":
              "\u0423\u043c\u0435\u0442\u043d\u0438 \u043c\u0430\u0442\u0440\u0438\u0446\u0443",
            "menu.insert vector":
              "\u0423\u043c\u0435\u0442\u043d\u0438 \u0432\u0435\u043a\u0442\u043e\u0440",
            "submenu.array.matrix delimiters":
              "\u041c\u0430\u0442\u0440\u0438\u043a \u0414\u0435\u043b\u0438\u043c\u0438\u0442\u0435\u0440\u0441",
            "menu.array.add row above":
              "\u0414\u043e\u0434\u0430\u0458 \u0440\u0435\u0434 \u043f\u043e\u0441\u043b\u0435",
            "menu.array.add row below":
              "\u0414\u043e\u0434\u0430\u0458 \u0440\u0435\u0434 \u043f\u0440\u0435",
            "menu.array.add column after":
              "\u0414\u043e\u0434\u0430\u0458 \u043a\u043e\u043b\u043e\u043d\u0443 \u043f\u043e\u0441\u043b\u0435",
            "menu.array.add column before":
              "\u0414\u043e\u0434\u0430\u0458 \u043a\u043e\u043b\u043e\u043d\u0443 \u043f\u0440\u0435",
            "menu.array.delete row":
              "\u0418\u0437\u0431\u0440\u0438\u0448\u0438 \u0440\u0435\u0434",
            "menu.array.delete rows":
              "\u0418\u0437\u0431\u0440\u0438\u0448\u0438 \u0438\u0437\u0430\u0431\u0440\u0430\u043d\u0435 \u0440\u0435\u0434\u043e\u0432\u0435",
            "menu.array.delete column":
              "\u0418\u0437\u0431\u0440\u0438\u0448\u0438 \u043a\u043e\u043b\u043e\u043d\u0443",
            "menu.array.delete columns":
              "\u0418\u0437\u0431\u0440\u0438\u0448\u0438 \u0438\u0437\u0430\u0431\u0440\u0430\u043d\u0435 \u043a\u043e\u043b\u043e\u043d\u0435",
            "submenu.array.insert separator":
              "\u0423\u043c\u0435\u0442\u043d\u0438 \u0441\u0435\u043f\u0430\u0440\u0430\u0442\u043e\u0440",
            "menu.insert table":
              "\u0423\u0431\u0430\u0446\u0438 \u0442\u0430\u0431\u0435\u043b\u0443",
            "submenu.table style":
              "\u0422\u0430\u0431\u0435\u043b\u0430\u0440\u043d\u0438 \u0441\u0442\u0438\u043b",
          },
          sv: {
            "keyboard.tooltip.functions": "Funktioner",
            "keyboard.tooltip.symbols": "Symboler",
            "keyboard.tooltip.greek": "Grekiska bokst\xe4ver",
            "keyboard.tooltip.command": "LaTeX kommandol\xe4ge",
            "keyboard.tooltip.numeric": "Numerisk",
            "keyboard.tooltip.alphabetic": "Romerska bokst\xe4ver",
            "tooltip.copy to clipboard": "Kopiera till Urklipp",
            "tooltip.redo": "G\xf6ra om",
            "tooltip.toggle virtual keyboard": "V\xe4xla virtuellt tangentbord",
            "tooltip.undo": "\xc5ngra",
            "menu.insert matrix": "S\xe4tt in matris",
            "menu.insert vector": "Infoga vektor",
            "submenu.array.matrix delimiters": "Matrisavgr\xe4nsare",
            "menu.array.add row above": "L\xe4gg till rad efter",
            "menu.array.add row below": "L\xe4gg till rad f\xf6re",
            "menu.array.add column after": "L\xe4gg till kolumn efter",
            "menu.array.add column before": "L\xe4gg till kolumn f\xf6re",
            "menu.array.delete row": "Radera rad",
            "menu.array.delete rows": "Ta bort valda rader",
            "menu.array.delete column": "Ta bort kolumn",
            "menu.array.delete columns": "Ta bort valda kolumner",
            "submenu.array.insert separator": "S\xe4tt i separator",
            "menu.insert table": "Infoga tabell",
            "submenu.table style": "Tabellstil",
          },
          th: {
            "keyboard.tooltip.functions":
              "\u0e1f\u0e31\u0e07\u0e01\u0e4c\u0e0a\u0e31\u0e48\u0e19",
            "keyboard.tooltip.symbols":
              "\u0e2a\u0e31\u0e0d\u0e25\u0e31\u0e01\u0e29\u0e13\u0e4c",
            "keyboard.tooltip.greek":
              "\u0e2d\u0e31\u0e01\u0e29\u0e23\u0e01\u0e23\u0e35\u0e01",
            "keyboard.tooltip.command":
              "\u0e42\u0e2b\u0e21\u0e14\u0e04\u0e33\u0e2a\u0e31\u0e48\u0e07 \u0e19\u0e49\u0e33\u0e22\u0e32\u0e07",
            "keyboard.tooltip.numeric": "\u0e15\u0e31\u0e27\u0e40\u0e25\u0e02",
            "keyboard.tooltip.alphabetic":
              "\u0e2d\u0e31\u0e01\u0e29\u0e23\u0e42\u0e23\u0e21\u0e31\u0e19",
            "tooltip.copy to clipboard":
              "\u0e04\u0e31\u0e14\u0e25\u0e2d\u0e01\u0e44\u0e1b\u0e17\u0e35\u0e48\u0e04\u0e25\u0e34\u0e1b\u0e1a\u0e2d\u0e23\u0e4c\u0e14",
            "tooltip.redo": "\u0e17\u0e33\u0e0b\u0e49\u0e33",
            "tooltip.toggle virtual keyboard":
              "\u0e2a\u0e25\u0e31\u0e1a\u0e41\u0e1b\u0e49\u0e19\u0e1e\u0e34\u0e21\u0e1e\u0e4c\u0e40\u0e2a\u0e21\u0e37\u0e2d\u0e19",
            "tooltip.undo": "\u0e40\u0e25\u0e34\u0e01\u0e17\u0e33",
            "menu.insert matrix":
              "\u0e41\u0e17\u0e23\u0e01\u0e40\u0e21\u0e17\u0e23\u0e34\u0e01\u0e0b\u0e4c",
            "menu.insert vector":
              "\u0e41\u0e17\u0e23\u0e01\u0e40\u0e27\u0e01\u0e40\u0e15\u0e2d\u0e23\u0e4c",
            "submenu.array.matrix delimiters":
              "\u0e15\u0e31\u0e27\u0e04\u0e31\u0e48\u0e19\u0e40\u0e21\u0e17\u0e23\u0e34\u0e01\u0e0b\u0e4c",
            "menu.array.add row above":
              "\u0e40\u0e1e\u0e34\u0e48\u0e21\u0e41\u0e16\u0e27\u0e2b\u0e25\u0e31\u0e07",
            "menu.array.add row below":
              "\u0e40\u0e1e\u0e34\u0e48\u0e21\u0e41\u0e16\u0e27\u0e01\u0e48\u0e2d\u0e19",
            "menu.array.add column after":
              "\u0e40\u0e1e\u0e34\u0e48\u0e21\u0e04\u0e2d\u0e25\u0e31\u0e21\u0e19\u0e4c\u0e2b\u0e25\u0e31\u0e07",
            "menu.array.add column before":
              "\u0e40\u0e1e\u0e34\u0e48\u0e21\u0e04\u0e2d\u0e25\u0e31\u0e21\u0e19\u0e4c\u0e01\u0e48\u0e2d\u0e19",
            "menu.array.delete row": "\u0e25\u0e1a\u0e41\u0e16\u0e27",
            "menu.array.delete rows":
              "\u0e25\u0e1a\u0e41\u0e16\u0e27\u0e17\u0e35\u0e48\u0e40\u0e25\u0e37\u0e2d\u0e01",
            "menu.array.delete column":
              "\u0e25\u0e1a\u0e04\u0e2d\u0e25\u0e31\u0e21\u0e19\u0e4c",
            "menu.array.delete columns":
              "\u0e25\u0e1a\u0e04\u0e2d\u0e25\u0e31\u0e21\u0e19\u0e4c\u0e17\u0e35\u0e48\u0e40\u0e25\u0e37\u0e2d\u0e01",
            "submenu.array.insert separator":
              "\u0e15\u0e31\u0e27\u0e04\u0e31\u0e48\u0e19\u0e41\u0e17\u0e23\u0e01",
            "menu.insert table":
              "\u0e41\u0e17\u0e23\u0e01\u0e15\u0e32\u0e23\u0e32\u0e07",
            "submenu.table style":
              "\u0e2a\u0e44\u0e15\u0e25\u0e4c\u0e15\u0e32\u0e23\u0e32\u0e07",
          },
          tr: {
            "keyboard.tooltip.functions": "Fonksiyonlar",
            "keyboard.tooltip.symbols": "Semboller",
            "keyboard.tooltip.greek": "Yunan harfleri",
            "keyboard.tooltip.command": "LaTeX Komut Modu",
            "keyboard.tooltip.numeric": "Say\u0131sal",
            "keyboard.tooltip.alphabetic": "Roma Harfleri",
            "tooltip.copy to clipboard": "Panoya kopyala",
            "tooltip.redo": "Yeniden yap",
            "tooltip.toggle virtual keyboard": "Sanal Klavyeyi A\xe7/Kapat",
            "tooltip.undo": "Geri alma",
            "menu.insert matrix": "Matris Ekle",
            "menu.insert vector": "Vekt\xf6r Ekle",
            "submenu.array.matrix delimiters":
              "Matris S\u0131n\u0131rlay\u0131c\u0131lar",
            "menu.array.add row above": "Sat\u0131rdan Sonra Ekle",
            "menu.array.add row below": "\xd6nce Sat\u0131r Ekle",
            "menu.array.add column after": "Sonra S\xfctun Ekle",
            "menu.array.add column before": "\xd6nce S\xfctun Ekle",
            "menu.array.delete row": "S\u0131ray\u0131 sil",
            "menu.array.delete rows": "Se\xe7ili Sat\u0131rlar\u0131 Sil",
            "menu.array.delete column": "S\xfctunu Sil",
            "menu.array.delete columns": "Se\xe7ili S\xfctunlar\u0131 Sil",
            "submenu.array.insert separator": "Ay\u0131r\u0131c\u0131 Ekle",
            "menu.insert table": "Tablo Ekle",
            "submenu.table style": "Tablo Stili",
          },
          uk: {
            "keyboard.tooltip.functions":
              "\u0424\u0443\u043d\u043a\u0446\u0456\u0457",
            "keyboard.tooltip.symbols":
              "\u0421\u0438\u043c\u0432\u043e\u043b\u0438",
            "keyboard.tooltip.greek":
              "\u0413\u0440\u0435\u0446\u044c\u043a\u0456 \u043b\u0456\u0442\u0435\u0440\u0438",
            "keyboard.tooltip.command":
              "\u041a\u043e\u043c\u0430\u043d\u0434\u043d\u0438\u0439 \u0440\u0435\u0436\u0438\u043c \u043b\u0430\u0442\u0435\u043a\u0441\u0443",
            "keyboard.tooltip.numeric":
              "\u0427\u0438\u0441\u043b\u043e\u0432\u0438\u0439",
            "keyboard.tooltip.alphabetic":
              "\u0420\u0438\u043c\u0441\u044c\u043a\u0456 \u043b\u0456\u0442\u0435\u0440\u0438",
            "tooltip.copy to clipboard":
              "\u041a\u043e\u043f\u0456\u044e\u0432\u0430\u0442\u0438 \u0432 \u0431\u0443\u0444\u0435\u0440 \u043e\u0431\u043c\u0456\u043d\u0443",
            "tooltip.redo":
              "\u041f\u043e\u0432\u0442\u043e\u0440\u0438\u0442\u0438",
            "tooltip.toggle virtual keyboard":
              "\u041f\u0435\u0440\u0435\u043a\u043b\u044e\u0447\u0438\u0442\u0438 \u0432\u0456\u0440\u0442\u0443\u0430\u043b\u044c\u043d\u0443 \u043a\u043b\u0430\u0432\u0456\u0430\u0442\u0443\u0440\u0443",
            "tooltip.undo":
              "\u0421\u043a\u0430\u0441\u0443\u0432\u0430\u0442\u0438",
            "menu.insert matrix":
              "\u0412\u0441\u0442\u0430\u0432\u0438\u0442\u0438 \u043c\u0430\u0442\u0440\u0438\u0446\u044e",
            "menu.insert vector":
              "\u0412\u0441\u0442\u0430\u0432\u0438\u0442\u0438 \u0432\u0435\u043a\u0442\u043e\u0440",
            "submenu.array.matrix delimiters":
              "\u041c\u0430\u0442\u0440\u0438\u0447\u043d\u0456 \u0440\u043e\u0437\u0434\u0456\u043b\u044c\u043d\u0438\u043a\u0438",
            "menu.array.add row above":
              "\u0414\u043e\u0434\u0430\u0442\u0438 \u0440\u044f\u0434\u043e\u043a \u043f\u0456\u0441\u043b\u044f",
            "menu.array.add row below":
              "\u0414\u043e\u0434\u0430\u0442\u0438 \u0440\u044f\u0434\u043e\u043a \u0434\u043e",
            "menu.array.add column after":
              "\u0414\u043e\u0434\u0430\u0442\u0438 \u0441\u0442\u043e\u0432\u043f\u0435\u0446\u044c \u043f\u0456\u0441\u043b\u044f",
            "menu.array.add column before":
              "\u0414\u043e\u0434\u0430\u0442\u0438 \u0441\u0442\u043e\u0432\u043f\u0435\u0446\u044c \u043f\u0435\u0440\u0435\u0434",
            "menu.array.delete row":
              "\u0412\u0438\u0434\u0430\u043b\u0438\u0442\u0438 \u0440\u044f\u0434\u043e\u043a",
            "menu.array.delete rows":
              "\u0412\u0438\u0434\u0430\u043b\u0438\u0442\u0438 \u0432\u0438\u0431\u0440\u0430\u043d\u0456 \u0440\u044f\u0434\u043a\u0438",
            "menu.array.delete column":
              "\u0412\u0438\u0434\u0430\u043b\u0438\u0442\u0438 \u0441\u0442\u043e\u0432\u043f\u0435\u0446\u044c",
            "menu.array.delete columns":
              "\u0412\u0438\u0434\u0430\u043b\u0438\u0442\u0438 \u0432\u0438\u0431\u0440\u0430\u043d\u0456 \u0441\u0442\u043e\u0432\u043f\u0446\u0456",
            "submenu.array.insert separator":
              "\u0412\u0441\u0442\u0430\u0432\u0442\u0435 \u0440\u043e\u0437\u0434\u0456\u043b\u044c\u043d\u0438\u043a",
            "menu.insert table":
              "\u0412\u0441\u0442\u0430\u0432\u0438\u0442\u0438 \u0442\u0430\u0431\u043b\u0438\u0446\u044e",
            "submenu.table style":
              "\u0421\u0442\u0438\u043b\u044c \u0442\u0430\u0431\u043b\u0438\u0446\u0456",
          },
          vi: {
            "keyboard.tooltip.functions": "Ch\u1ee9c n\u0103ng",
            "keyboard.tooltip.symbols": "K\xfd hi\u1ec7u",
            "keyboard.tooltip.greek": "Ch\u1eef Hy L\u1ea1p",
            "keyboard.tooltip.command": "Ch\u1ebf \u0111\u1ed9 l\u1ec7nh LaTeX",
            "keyboard.tooltip.numeric": "S\u1ed1",
            "keyboard.tooltip.alphabetic": "Ch\u1eef c\xe1i La m\xe3",
            "tooltip.copy to clipboard": "Sao ch\xe9p v\xe0o clipboard",
            "tooltip.redo": "L\xe0m l\u1ea1i",
            "tooltip.toggle virtual keyboard":
              "Chuy\u1ec3n \u0111\u1ed5i b\xe0n ph\xedm \u1ea3o",
            "tooltip.undo": "Ho\xe0n t\xe1c",
            "menu.insert matrix": "Ch\xe8n ma tr\u1eadn",
            "menu.insert vector": "Insert Vector",
            "submenu.array.matrix delimiters":
              "D\u1ea5u ph\xe2n c\xe1ch ma tr\u1eadn",
            "menu.array.add row above": "Th\xeam h\xe0ng sau",
            "menu.array.add row below": "Th\xeam h\xe0ng tr\u01b0\u1edbc",
            "menu.array.add column after": "Th\xeam c\u1ed9t sau",
            "menu.array.add column before": "Th\xeam c\u1ed9t tr\u01b0\u1edbc",
            "menu.array.delete row": "X\xf3a h\xe0ng",
            "menu.array.delete rows": "X\xf3a h\xe0ng \u0111\xe3 ch\u1ecdn",
            "menu.array.delete column": "X\xf3a c\u1ed9t",
            "menu.array.delete columns":
              "X\xf3a c\xe1c c\u1ed9t \u0111\xe3 ch\u1ecdn",
            "submenu.array.insert separator":
              "Ch\xe8n d\u1ea5u ph\xe2n c\xe1ch",
            "menu.insert table": "Ch\xe8n b\u1ea3ng",
            "submenu.table style": "Ki\u1ec3u b\u1ea3ng",
          },
          zh_cn: {
            "keyboard.tooltip.functions": "\u804c\u80fd",
            "keyboard.tooltip.symbols": "\u7b26\u53f7",
            "keyboard.tooltip.greek": "\u5e0c\u814a\u5b57\u6bcd",
            "keyboard.tooltip.command": "\u4e73\u80f6 \u547d\u4ee4\u6a21\u5f0f",
            "keyboard.tooltip.numeric": "\u6570\u5b57",
            "keyboard.tooltip.alphabetic": "\u7f57\u9a6c\u5b57\u6bcd",
            "tooltip.copy to clipboard": "\u590d\u5236\u5230\u526a\u8d34\u677f",
            "tooltip.redo": "\u91cd\u505a",
            "tooltip.toggle virtual keyboard":
              "\u5207\u6362\u865a\u62df\u952e\u76d8",
            "tooltip.undo": "\u64a4\u6d88",
            "menu.insert matrix": "\u63d2\u5165\u77e9\u9635",
            "menu.insert vector": "\u63d2\u5165\u5411\u91cf",
            "submenu.array.matrix delimiters": "\u77e9\u9635\u5206\u9694\u7b26",
            "menu.array.add row above": "\u5728\u540e\u9762\u6dfb\u52a0\u884c",
            "menu.array.add row below": "\u5728\u524d\u9762\u6dfb\u52a0\u884c",
            "menu.array.add column after":
              "\u5728\u540e\u9762\u6dfb\u52a0\u5217r",
            "menu.array.add column before":
              "\u5728\u524d\u9762\u6dfb\u52a0\u5217",
            "menu.array.delete row": "\u5220\u9664\u884c",
            "menu.array.delete rows": "\u5220\u9664\u9009\u5b9a\u884c",
            "menu.array.delete column": "\u5220\u9664\u5217",
            "menu.array.delete columns": "\u5220\u9664\u9009\u5b9a\u7684\u5217",
            "submenu.array.insert separator": "\u63d2\u5165\u5206\u9694\u7b26",
            "menu.insert table": "\u63d2\u5165\u8868\u683c",
            "submenu.table style": "\u8868\u683c\u6837\u5f0f",
          },
          zh_tw: {
            "keyboard.tooltip.functions": "\u8077\u80fd",
            "keyboard.tooltip.symbols": "\u7b26\u865f",
            "keyboard.tooltip.greek": "\u5e0c\u81d8\u5b57\u6bcd",
            "keyboard.tooltip.command": "\u4e73\u81a0\u547d\u4ee4\u6a21\u5f0f",
            "keyboard.tooltip.numeric": "\u6578\u5b57",
            "keyboard.tooltip.alphabetic": "\u7f85\u99ac\u5b57\u6bcd",
            "tooltip.copy to clipboard": "\u8907\u88fd\u5230\u526a\u8cbc\u677f",
            "tooltip.redo": "\u91cd\u505a",
            "tooltip.toggle virtual keyboard":
              "\u5207\u63db\u865b\u64ec\u9375\u76e4",
            "tooltip.undo": "\u64a4\u6d88",
            "menu.insert matrix": "\u63d2\u5165\u77e9\u9663",
            "menu.insert vector": "\u63d2\u5165\u5411\u91cf",
            "submenu.array.matrix delimiters": "\u77e9\u9663\u5206\u9694\u7b26",
            "menu.array.add row above": "\u5728\u5f8c\u9762\u6dfb\u52a0\u884c",
            "menu.array.add row below": "\u5728\u524d\u9762\u6dfb\u52a0\u884c",
            "menu.array.add column after":
              "\u5728\u5f8c\u9762\u6dfb\u52a0\u5217",
            "menu.array.add column before":
              "\u5728\u524d\u9762\u6dfb\u52a0\u5217",
            "menu.array.delete row": "\u522a\u9664\u884c",
            "menu.array.delete rows": "\u522a\u9664\u9078\u5b9a\u884c",
            "menu.array.delete column": "\u522a\u9664\u5217",
            "menu.array.delete columns": "\u522a\u9664\u9078\u5b9a\u7684\u5217",
            "submenu.array.insert separator": "\u63d2\u5165\u5206\u9694\u7b26",
            "menu.insert table": "\u63d2\u5165\u8868\u683c",
            "submenu.table style": "\u8868\u683c\u6a23\u5f0f",
          },
        },
        _locale: "",
        get locale() {
          return (
            b._locale ||
              (b._locale = f() ? navigator.language.slice(0, 5) : "en"),
            b._locale
          );
        },
        set locale(e) {
          b._locale = e;
        },
        merge(e, t) {
          if (e && t) {
            let n = b._locale;
            (b.locale = e),
              (b.strings[e] = d(d({}, b.strings[e]), t)),
              (b.locale = n);
          } else if (e && !t) for (let n of Object.keys(e)) b.merge(n, e[n]);
        },
      };
      function v(e) {
        if (void 0 === e) return;
        let t = b.locale.slice(0, 2),
          n = "";
        return (
          b.strings[b.locale] && (n = b.strings[b.locale][e]),
          !n && b.strings[t] && (n = b.strings[t][e]),
          n || (n = b.strings.en[e]),
          n || void 0
        );
      }
      var x = {
          m0: "#3F3D99",
          m1: "#993D71",
          m2: "#998B3D",
          m3: "#3D9956",
          m4: "#3D5A99",
          m5: "#993D90",
          m6: "#996D3D",
          m7: "#43993D",
          m8: "#3D7999",
          m9: "#843D99",
        },
        w = {
          blue: "#0072BD",
          orange: "#D95319",
          yellow: "#EDB120",
          purple: "#7E2F8E",
          green: "#77AC30",
          cyan: "#4DBEEE",
          red: "#A2142F",
        },
        k = {
          red: "#fbbbb6",
          orange: "#ffe0c2",
          yellow: "#fff1c2",
          lime: "#d0e8b9",
          green: "#bceac4",
          teal: "#b9f1f1",
          blue: "#b6d9fb",
          indigo: "#d1c2f0",
          purple: "#e3baf8",
          magenta: "#f9c8e0",
          black: "#353535",
          "dark-grey": "#8C8C8C",
          grey: "#D0D0D0",
          "light-grey": "#F0F0F0",
          white: "#ffffff",
        },
        _ = {
          red: "#d7170b",
          orange: "#fe8a2b",
          yellow: "#ffc02b",
          lime: "#63b215",
          green: "#21ba3a",
          teal: "#17cfcf",
          blue: "#0d80f2",
          indigo: "#63c",
          purple: "#a219e6",
          magenta: "#eb4799",
          black: "#000",
          "dark-grey": "#666",
          grey: "#A6A6A6",
          "light-grey": "#d4d5d2",
          white: "#ffffff",
        },
        S = {
          Red: "red",
          Orange: "orange",
          Yellow: "yellow",
          LimeGreen: "lime",
          Green: "green",
          TealBlue: "teal",
          Blue: "blue",
          Violet: "indigo",
          Purple: "purple",
          Magenta: "magenta",
          Black: "black",
          Gray: "grey",
          White: "white",
        },
        M = {
          Apricot: "#FBB982",
          Aquamarine: "#00B5BE",
          Bittersweet: "#C04F17",
          Black: "#221E1F",
          Blue: "#2D2F92",
          BlueGreen: "#00B3B8",
          BlueViolet: "#473992",
          BrickRed: "#B6321C",
          Brown: "#792500",
          BurntOrange: "#F7921D",
          CadetBlue: "#74729A",
          CarnationPink: "#F282B4",
          Cerulean: "#00A2E3",
          CornflowerBlue: "#41B0E4",
          Cyan: "#00AEEF",
          Dandelion: "#FDBC42",
          DarkOrchid: "#A4538A",
          Emerald: "#00A99D",
          ForestGreen: "#009B55",
          Fuchsia: "#8C368C",
          Goldenrod: "#FFDF42",
          Gray: "#949698",
          Green: "#00A64F",
          GreenYellow: "#DFE674",
          JungleGreen: "#00A99A",
          Lavender: "#F49EC4",
          Limegreen: "#8DC73E",
          Magenta: "#EC008C",
          Mahogany: "#A9341F",
          Maroon: "#AF3235",
          Melon: "#F89E7B",
          MidnightBlue: "#006795",
          Mulberry: "#A93C93",
          NavyBlue: "#006EB8",
          OliveGreen: "#3C8031",
          Orange: "#F58137",
          OrangeRed: "#ED135A",
          Orchid: "#AF72B0",
          Peach: "#F7965A",
          Periwinkle: "#7977B8",
          PineGreen: "#008B72",
          Plum: "#92268F",
          ProcessBlue: "#00B0F0",
          Purple: "#99479B",
          RawSienna: "#974006",
          Red: "#ED1B23",
          RedOrange: "#F26035",
          RedViolet: "#A1246B",
          Rhodamine: "#EF559F",
          RoyalBlue: "#0071BC",
          RoyalPurple: "#613F99",
          RubineRed: "#ED017D",
          Salmon: "#F69289",
          SeaGreen: "#3FBC9D",
          Sepia: "#671800",
          SkyBlue: "#46C5DD",
          SpringGreen: "#C6DC67",
          Tan: "#DA9D76",
          TealBlue: "#00AEB3",
          Thistle: "#D883B7",
          Turquoise: "#00B4CE",
          Violet: "#58429B",
          VioletRed: "#EF58A0",
          White: "#FFFFFF",
          WildStrawberry: "#EE2967",
          Yellow: "#FFF200",
          YellowGreen: "#98CC70",
          YellowOrange: "#FAA21A",
        };
      function L(e) {
        var t, n, i, r, a, o;
        let s,
          l,
          c,
          d = e.split("!"),
          u = 255,
          h = 255,
          p = 255,
          m = -1,
          f = d.length > 0 && d[0].startsWith("-");
        f && (d[0] = d[0].slice(1));
        for (let y = 0; y < d.length; y++) {
          (s = u), (l = h), (c = p);
          let e =
              null == (t = d[y].trim().match(/^([A-Za-z\d]+)/)) ? void 0 : t[1],
            f = null == e ? void 0 : e.toLowerCase(),
            g =
              e &&
              null !=
                (o =
                  null !=
                  (a =
                    null !=
                    (r =
                      null != (i = null != (n = _[f]) ? n : _[S[e]]) ? i : w[e])
                      ? r
                      : M[e])
                    ? a
                    : x[e])
                ? o
                : d[y].trim(),
            b = g.match(/^#([\da-f]{2})([\da-f]{2})([\da-f]{2})$/i);
          if (null != b && b[1] && b[2] && b[3])
            (u = Math.max(0, Math.min(255, Number.parseInt(b[1], 16)))),
              (h = Math.max(0, Math.min(255, Number.parseInt(b[2], 16)))),
              (p = Math.max(0, Math.min(255, Number.parseInt(b[3], 16))));
          else if (((b = g.match(/^#([\da-f]{3})$/i)), null != b && b[1])) {
            let e = Number.parseInt(b[1][0], 16),
              t = Number.parseInt(b[1][1], 16),
              n = Number.parseInt(b[1][2], 16);
            (u = Math.max(0, Math.min(255, 16 * e + e))),
              (h = Math.max(0, Math.min(255, 16 * t + t))),
              (p = Math.max(0, Math.min(255, 16 * n + n)));
          } else {
            if (
              ((b = g.match(
                /^rgb\s*\(\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*\)$/i
              )),
              !(null != b && b[1] && b[2] && b[3]))
            )
              return;
            (u = Math.max(0, Math.min(255, Number.parseInt(b[1])))),
              (h = Math.max(0, Math.min(255, Number.parseInt(b[2])))),
              (p = Math.max(0, Math.min(255, Number.parseInt(b[3]))));
          }
          m >= 0 &&
            ((u = (1 - m) * u + m * s),
            (h = (1 - m) * h + m * l),
            (p = (1 - m) * p + m * c),
            (m = -1)),
            y + 1 < d.length &&
              (m = Math.max(0, Math.min(100, Number.parseInt(d[++y]))) / 100);
        }
        return (
          m >= 0 &&
            ((u = m * u + (1 - m) * s),
            (h = m * h + (1 - m) * l),
            (p = m * p + (1 - m) * c)),
          f && ((u = 255 - u), (h = 255 - h), (p = 255 - p)),
          "#" +
            ("00" + Math.round(u).toString(16)).slice(-2) +
            ("00" + Math.round(h).toString(16)).slice(-2) +
            ("00" + Math.round(p).toString(16)).slice(-2)
        );
      }
      function C(e) {
        var t, n;
        return (
          (e = e.trim()),
          null != (n = null != (t = k[e.toLowerCase()]) ? t : k[S[e]])
            ? n
            : L(e)
        );
      }
      function z(e, t, n) {
        return (
          n < 0 && (n += 6),
          n >= 6 && (n -= 6),
          n < 1
            ? (t - e) * n + e
            : n < 3
            ? t
            : n < 4
            ? (t - e) * (4 - n) + e
            : e
        );
      }
      function A(e) {
        return e < 0 ? 0 : e > 255 ? 255 : Math.round(e);
      }
      function E(e) {
        let t = (function (e) {
          if (!e || "#" !== e[0]) return;
          let t;
          return (
            (e = e.slice(1)).length <= 4
              ? ((t = {
                  r: parseInt(e[0] + e[0], 16),
                  g: parseInt(e[1] + e[1], 16),
                  b: parseInt(e[2] + e[2], 16),
                }),
                4 === e.length && (t.a = parseInt(e[3] + e[3], 16) / 255))
              : ((t = {
                  r: parseInt(e[0] + e[1], 16),
                  g: parseInt(e[2] + e[3], 16),
                  b: parseInt(e[4] + e[5], 16),
                }),
                8 === e.length && (t.a = parseInt(e[6] + e[7], 16) / 255)),
            t && void 0 === t.a && (t.a = 1),
            t
          );
        })(e);
        if (!t) return e;
        let {
          h: n,
          s: i,
          l: r,
        } = (function (e) {
          let { r: t, g: n, b: i } = e;
          (t /= 255), (n /= 255), (i /= 255);
          let r,
            a,
            o = Math.min(t, n, i),
            s = Math.max(t, n, i),
            l = s - o;
          s === o
            ? (r = 0)
            : t === s
            ? (r = (n - i) / l)
            : n === s
            ? (r = 2 + (i - t) / l)
            : i === s && (r = 4 + (t - n) / l),
            (r = Math.min(60 * r, 360)),
            r < 0 && (r += 360);
          let c = (o + s) / 2;
          return (
            (a = s === o ? 0 : c <= 0.5 ? l / (s + o) : l / (2 - s - o)),
            { h: r, s: a, l: c }
          );
        })(t);
        return (
          (i += 0.1),
          (r -= 0.1),
          (function (e) {
            let { r: t, g: n, b: i } = e,
              r = ((1 << 24) + (A(t) << 16) + (A(n) << 8) + A(i))
                .toString(16)
                .slice(1);
            return (
              r[0] === r[1] &&
                r[2] === r[3] &&
                r[4] === r[5] &&
                r[6] === r[7] &&
                (r = r[0] + r[2] + r[4]),
              "#" + r
            );
          })(
            (function (e) {
              let [t, n, i] = [e.h, e.s, e.l];
              (t = ((t + 360) % 360) / 60),
                (i = Math.max(0, Math.min(i, 1))),
                (n = Math.max(0, Math.min(n, 1)));
              let r = i <= 0.5 ? i * (n + 1) : i + n - i * n,
                a = 2 * i - r;
              return {
                r: Math.round(255 * z(a, r, t + 2)),
                g: Math.round(255 * z(a, r, t)),
                b: Math.round(255 * z(a, r, t - 2)),
              };
            })({ h: n, s: i, l: r })
          )
        );
      }
      var K = {
          119893: 8462,
          119965: 8492,
          119968: 8496,
          119969: 8497,
          119971: 8459,
          119972: 8464,
          119975: 8466,
          119976: 8499,
          119981: 8475,
          119994: 8495,
          119996: 8458,
          120004: 8500,
          120070: 8493,
          120075: 8460,
          120076: 8465,
          120085: 8476,
          120093: 8488,
          120122: 8450,
          120127: 8461,
          120133: 8469,
          120135: 8473,
          120136: 8474,
          120137: 8477,
          120145: 8484,
        },
        D = [
          { start: 119808, len: 26, offset: 65, style: "bold" },
          { start: 119834, len: 26, offset: 97, style: "bold" },
          { start: 119860, len: 26, offset: 65, style: "italic" },
          { start: 119886, len: 26, offset: 97, style: "italic" },
          { start: 119912, len: 26, offset: 65, style: "bolditalic" },
          { start: 119938, len: 26, offset: 97, style: "bolditalic" },
          { start: 119964, len: 26, offset: 65, variant: "script" },
          { start: 119990, len: 26, offset: 97, variant: "script" },
          {
            start: 120016,
            len: 26,
            offset: 65,
            variant: "script",
            style: "bold",
          },
          {
            start: 120042,
            len: 26,
            offset: 97,
            variant: "script",
            style: "bold",
          },
          { start: 120068, len: 26, offset: 65, variant: "fraktur" },
          { start: 120094, len: 26, offset: 97, variant: "fraktur" },
          {
            start: 120172,
            len: 26,
            offset: 65,
            variant: "fraktur",
            style: "bold",
          },
          {
            start: 120198,
            len: 26,
            offset: 97,
            variant: "fraktur",
            style: "bold",
          },
          { start: 120120, len: 26, offset: 65, variant: "double-struck" },
          { start: 120146, len: 26, offset: 97, variant: "double-struck" },
          { start: 120224, len: 26, offset: 65, variant: "sans-serif" },
          { start: 120250, len: 26, offset: 97, variant: "sans-serif" },
          {
            start: 120276,
            len: 26,
            offset: 65,
            variant: "sans-serif",
            style: "bold",
          },
          {
            start: 120302,
            len: 26,
            offset: 97,
            variant: "sans-serif",
            style: "bold",
          },
          {
            start: 120328,
            len: 26,
            offset: 65,
            variant: "sans-serif",
            style: "italic",
          },
          {
            start: 120354,
            len: 26,
            offset: 97,
            variant: "sans-serif",
            style: "italic",
          },
          {
            start: 120380,
            len: 26,
            offset: 65,
            variant: "sans-serif",
            style: "bolditalic",
          },
          {
            start: 120406,
            len: 26,
            offset: 97,
            variant: "sans-serif",
            style: "bolditalic",
          },
          { start: 120432, len: 26, offset: 65, variant: "monospace" },
          { start: 120458, len: 26, offset: 97, variant: "monospace" },
          { start: 120488, len: 25, offset: 913, style: "bold" },
          { start: 120514, len: 25, offset: 945, style: "bold" },
          { start: 120546, len: 25, offset: 913, style: "italic" },
          { start: 120572, len: 25, offset: 945, style: "italic" },
          { start: 120604, len: 25, offset: 913, style: "bolditalic" },
          { start: 120630, len: 25, offset: 945, style: "bolditalic" },
          {
            start: 120662,
            len: 25,
            offset: 913,
            variant: "sans-serif",
            style: "bold",
          },
          {
            start: 120688,
            len: 25,
            offset: 945,
            variant: "sans-serif",
            style: "bold",
          },
          {
            start: 120720,
            len: 25,
            offset: 913,
            variant: "sans-serif",
            style: "bolditalic",
          },
          {
            start: 120746,
            len: 25,
            offset: 945,
            variant: "sans-serif",
            style: "bolditalic",
          },
          {
            start: 120782,
            len: 10,
            offset: 48,
            variant: "main",
            style: "bold",
          },
          { start: 120792, len: 10, offset: 48, variant: "double-struck" },
          { start: 120803, len: 10, offset: 48, variant: "sans-serif" },
          {
            start: 120812,
            len: 10,
            offset: 48,
            variant: "sans-serif",
            style: "bold",
          },
          { start: 120822, len: 10, offset: 48, variant: "monospace" },
        ];
      function T(e) {
        return e
          ? Array.isArray(e)
            ? e
            : "object" == typeof e && "group" in e
            ? e.group
            : []
          : [];
      }
      var B,
        $,
        P,
        O = {},
        F = {
          60: "\\lt",
          62: "\\gt",
          111: "o",
          38: "\\&",
          123: "\\lbrace",
          125: "\\rbrace",
          91: "\\lbrack",
          93: "\\rbrack",
          58: "\\colon",
          160: "~",
          172: "\\neg",
          183: "\\cdot",
          188: "\\frac{1}{4}",
          189: "\\frac{1}{2}",
          190: "\\frac{3}{4}",
          8304: "^{0}",
          8305: "^{i}",
          185: "^{1}",
          178: "^{2}",
          179: "^{3}",
          8224: "\\dagger",
          8225: "\\ddagger",
          8230: "\\ldots",
          8308: "^{4}",
          8309: "^{5}",
          8310: "^{6}",
          8311: "^{7}",
          8312: "^{8}",
          8313: "^{9}",
          8314: "^{+}",
          8315: "^{-}",
          8316: "^{=}",
          8319: "^{n}",
          8320: "_{0}",
          8321: "_{1}",
          8322: "_{2}",
          8323: "_{3}",
          8324: "_{4}",
          8325: "_{5}",
          8326: "_{6}",
          8327: "_{7}",
          8328: "_{8}",
          8329: "_{9}",
          8330: "_{+}",
          8331: "_{-}",
          8332: "_{=}",
          8336: "_{a}",
          8337: "_{e}",
          8338: "_{o}",
          8339: "_{x}",
          8242: "\\prime",
          39: "\\prime",
          8592: "\\gets",
          8594: "\\to",
          9651: "\\triangle",
          9661: "\\triangledown",
          8715: "\\owns",
          8727: "\\ast",
          8739: "\\vert",
          8741: "\\Vert",
          8743: "\\land",
          8744: "\\lor",
          8901: "\\cdot",
          8904: "\\bowtie",
          8800: "\\ne",
          8804: "\\le",
          8805: "\\ge",
          8869: "\\bot",
          10231: "\\biconditional",
          10232: "\\impliedby",
          10233: "\\implies",
          10234: "\\iff",
          8450: "\\mathbb{C}",
          8469: "\\mathbb{N}",
          8473: "\\mathbb{P}",
          8474: "\\mathbb{Q}",
          8477: "\\mathbb{R}",
          8484: "\\mathbb{Z}",
          8461: "\\mathbb{H}",
          8476: "\\Re",
          8465: "\\Im",
          42: "\\ast",
          11036: "\\square",
          9633: "\\square",
          8720: "\\coprod",
          8716: "\\not\\ni",
          9671: "\\diamond",
          8846: "\\uplus",
          8851: "\\sqcap",
          8852: "\\sqcup",
          8768: "\\wr",
          8750: "\\oint",
          8226: "\\textbullet",
          8722: "-",
          978: "\\Upsilon",
        },
        N = {},
        q = {},
        R = {
          iff: "\\;\u27fa\\;",
          nicefrac: "^{#1}\\!\\!/\\!_{#2}",
          rd: "\\mathrm{d}",
          rD: "\\mathrm{D}",
          doubleStruckCapitalN: "\\mathbb{N}",
          doubleStruckCapitalR: "\\mathbb{R}",
          doubleStruckCapitalQ: "\\mathbb{Q}",
          doubleStruckCapitalZ: "\\mathbb{Z}",
          doubleStruckCapitalP: "\\mathbb{P}",
          scriptCapitalE: "\\mathscr{E}",
          scriptCapitalH: "\\mathscr{H}",
          scriptCapitalL: "\\mathscr{L}",
          gothicCapitalC: "\\mathfrak{C}",
          gothicCapitalH: "\\mathfrak{H}",
          gothicCapitalI: "\\mathfrak{I}",
          gothicCapitalR: "\\mathfrak{R}",
          imaginaryI: "\\mathrm{i}",
          imaginaryJ: "\\mathrm{j}",
          exponentialE: "\\mathrm{e}",
          differentialD: "\\mathrm{d}",
          capitalDifferentialD: "\\mathrm{D}",
          mathstrut: { def: "\\vphantom{(}", primitive: !0 },
          tripledash: {
            def: "\\vphantom{-}\\raise{4mu}{\\mkern1.5mu\\rule{2mu}{1.5mu}\\mkern{2.25mu}\\rule{2mu}{1.5mu}\\mkern{2.25mu}\\rule{2mu}{1.5mu}\\mkern{2mu}}",
            expand: !0,
          },
          "braket.sty": {
            package: {
              bra: "\\mathinner{\\langle{#1}|}",
              ket: "\\mathinner{|{#1}\\rangle}",
              braket: "\\mathinner{\\langle{#1}\\rangle}",
              set: "\\mathinner{\\lbrace #1 \\rbrace}",
              Bra: "\\left\\langle #1\\right|",
              Ket: "\\left|#1\\right\\rangle",
              Braket: "\\left\\langle{#1}\\right\\rangle",
              Set: "\\left\\lbrace #1 \\right\\rbrace",
            },
          },
          "amsmath.sty": {
            package: {
              varGamma: "\\mathit{\\Gamma}",
              varDelta: "\\mathit{\\Delta}",
              varTheta: "\\mathit{\\Theta}",
              varLambda: "\\mathit{\\Lambda}",
              varXi: "\\mathit{\\Xi}",
              varPi: "\\mathit{\\Pi}",
              varSigma: "\\mathit{\\Sigma}",
              varUpsilon: "\\mathit{\\Upsilon}",
              varPhi: "\\mathit{\\Phi}",
              varPsi: "\\mathit{\\Psi}",
              varOmega: "\\mathit{\\Omega}",
              pmod: {
                def: "\\quad(\\operatorname{mod}\\ #1)",
                args: 1,
                expand: !1,
              },
              mod: {
                def: "\\quad\\operatorname{mod}\\,\\,#1",
                args: 1,
                expand: !1,
              },
              bmod: { def: "\\;\\mathbin{\\operatorname{mod }}", expand: !1 },
            },
            primitive: !0,
          },
          "texvc.sty": {
            package: {
              darr: "\\downarrow",
              dArr: "\\Downarrow",
              Darr: "\\Downarrow",
              lang: "\\langle",
              rang: "\\rangle",
              uarr: "\\uparrow",
              uArr: "\\Uparrow",
              Uarr: "\\Uparrow",
              N: "\\mathbb{N}",
              R: "\\mathbb{R}",
              Z: "\\mathbb{Z}",
              alef: "\\aleph",
              alefsym: "\\aleph",
              Alpha: "\\mathrm{A}",
              Beta: "\\mathrm{B}",
              bull: "\\bullet",
              Chi: "\\mathrm{X}",
              clubs: "\\clubsuit",
              cnums: "\\mathbb{C}",
              Complex: "\\mathbb{C}",
              Dagger: "\\ddagger",
              diamonds: "\\diamondsuit",
              empty: "\\emptyset",
              Epsilon: "\\mathrm{E}",
              Eta: "\\mathrm{H}",
              exist: "\\exists",
              harr: "\\leftrightarrow",
              hArr: "\\Leftrightarrow",
              Harr: "\\Leftrightarrow",
              hearts: "\\heartsuit",
              image: "\\Im",
              infin: "\\infty",
              Iota: "\\mathrm{I}",
              isin: "\\in",
              Kappa: "\\mathrm{K}",
              larr: "\\leftarrow",
              lArr: "\\Leftarrow",
              Larr: "\\Leftarrow",
              lrarr: "\\leftrightarrow",
              lrArr: "\\Leftrightarrow",
              Lrarr: "\\Leftrightarrow",
              Mu: "\\mathrm{M}",
              natnums: "\\mathbb{N}",
              Nu: "\\mathrm{N}",
              Omicron: "\\mathrm{O}",
              plusmn: "\\pm",
              rarr: "\\rightarrow",
              rArr: "\\Rightarrow",
              Rarr: "\\Rightarrow",
              real: "\\Re",
              reals: "\\mathbb{R}",
              Reals: "\\mathbb{R}",
              Rho: "\\mathrm{P}",
              sdot: "\\cdot",
              sect: "\\S",
              spades: "\\spadesuit",
              sub: "\\subset",
              sube: "\\subseteq",
              supe: "\\supseteq",
              Tau: "\\mathrm{T}",
              thetasym: "\\vartheta",
              weierp: "\\wp",
              Zeta: "\\mathrm{Z}",
            },
            primitive: !1,
          },
        },
        I = {
          " ": 32,
          "\\#": 35,
          "\\&": 38,
          "\\$": 36,
          "\\%": 37,
          "-": 45,
          "\\_": 95,
          "\\euro": 8364,
          "\\maltese": 10016,
          "\\{": 123,
          "\\}": 125,
          "\\nobreakspace": 160,
          "\\ldots": 8230,
          "\\textellipsis": 8230,
          "\\backslash": 92,
          "`": 8216,
          "'": 8217,
          "``": 8220,
          "''": 8221,
          "\\degree": 176,
          "\\textasciicircum": 94,
          "\\textasciitilde": 126,
          "\\textasteriskcentered": 42,
          "\\textbackslash": 92,
          "\\textbraceleft": 123,
          "\\textbraceright": 125,
          "\\textbullet": 8226,
          "\\textdollar": 36,
          "\\textsterling": 163,
          "\\textdagger": 8224,
          "\\textdaggerdbl": 8225,
          "\u2013": 8211,
          "\u2014": 8212,
          "\u2018": 8216,
          "\u2019": 8217,
          "\u201c": 8220,
          "\u201d": 8221,
          '"': 8221,
          "\\ss": 223,
          "\\ae": 230,
          "\\oe": 339,
          "\\AE": 198,
          "\\OE": 338,
          "\\O": 216,
          "\\i": 305,
          "\\j": 567,
          "\\aa": 229,
          "\\AA": 197,
        },
        V = /[\w!@*()-=+{}[\]\\';:?/.,~<>`|$%#&^" ]/;
      function j(e, t, n = "mord", i) {
        void 0 !== t &&
          ((O[e] = {
            definitionType: "symbol",
            type: n,
            variant: i,
            codepoint: t,
          }),
          F[t] || (F[t] = e),
          I[e] || (I[e] = t));
      }
      function H(e, t, n) {
        if ("string" != typeof e)
          for (let [i, r, a, o] of e)
            j(i, r, null != a ? a : t, null != o ? o : n);
        else
          for (let i = 0; i < e.length; i++) {
            let t = e.charAt(i);
            j(t, t.codePointAt(0));
          }
      }
      function W(e, t) {
        for (let n = e; n <= t; n++) j(String.fromCodePoint(n), n);
      }
      function U(e) {
        let t = "auto",
          n = e.match(/:([^=]+)/);
        return n && (t = n[1].trim()), t;
      }
      function J(e) {
        if (!e) return [];
        let t = [],
          n = e.split("]");
        if (n[0].startsWith("[")) {
          t.push({ isOptional: !0, type: U(n[0].slice(1)) });
          for (let e = 1; e <= n.length; e++) t.push(...J(n[e]));
        } else if (((n = e.split("}")), n[0].startsWith("{"))) {
          t.push({ isOptional: !1, type: U(n[0].slice(1)) });
          for (let e = 1; e <= n.length; e++) t.push(...J(n[e]));
        }
        return t;
      }
      function X(e) {
        if (!e) return "";
        let t = "",
          n = !0;
        for (let i of e) "string" == typeof i.value ? (t += i.value) : (n = !1);
        return n ? t : "";
      }
      function G(e, t) {
        "string" == typeof e && (e = [e]);
        let n = { tabular: !1, params: [], createAtom: t };
        for (let i of e) q[i] = n;
      }
      function Z(e, t, n) {
        "string" == typeof e && (e = [e]);
        let i = { tabular: !0, params: J(t), createAtom: n };
        for (let r of e) q[r] = i;
      }
      function Y(e, t, n) {
        var i, r;
        n || (n = {});
        let a = {
          definitionType: "function",
          params: J(t),
          ifMode: n.ifMode,
          isFunction: null != (i = n.isFunction) && i,
          applyMode: n.applyMode,
          infix: null != (r = n.infix) && r,
          createAtom: n.createAtom,
          applyStyle: n.applyStyle,
          serialize: n.serialize,
          render: n.render,
        };
        if ("string" == typeof e) N["\\" + e] = a;
        else for (let o of e) N["\\" + o] = a;
      }
      function Q(e) {
        return P || (P = te(R)), e ? te(d(d({}, P), e)) : P;
      }
      function ee(e, t) {
        var n, i, r, a;
        if ("string" == typeof e) {
          let r = 0,
            a = e;
          return (
            /(^|[^\\])#1/.test(a) && (r = 1),
            /(^|[^\\])#2/.test(a) && (r = 2),
            /(^|[^\\])#3/.test(a) && (r = 3),
            /(^|[^\\])#4/.test(a) && (r = 4),
            /(^|[^\\])#5/.test(a) && (r = 5),
            /(^|[^\\])#6/.test(a) && (r = 6),
            /(^|[^\\])#7/.test(a) && (r = 7),
            /(^|[^\\])#8/.test(a) && (r = 8),
            /(^|[^\\])#9/.test(a) && (r = 9),
            {
              expand: null == (n = null == t ? void 0 : t.expand) || n,
              captureSelection:
                null == (i = null == t ? void 0 : t.captureSelection) || i,
              args: r,
              def: a,
            }
          );
        }
        return d(
          {
            expand: null == (r = null == t ? void 0 : t.expand) || r,
            captureSelection:
              null == (a = null == t ? void 0 : t.captureSelection) || a,
            args: 0,
          },
          e
        );
      }
      function te(e) {
        if (!e) return {};
        let t = {};
        for (let n of Object.keys(e)) {
          let i = e[n];
          if (null == i) delete t[n];
          else if ("object" == typeof i && "package" in i)
            for (let e of Object.keys(i.package))
              t[e] = ee(i.package[e], {
                expand: !i.primitive,
                captureSelection: i.captureSelection,
              });
          else t[n] = ee(i);
        }
        return t;
      }
      function ne(e, t = "math") {
        if (!e || 0 === e.length) return null;
        let n = null;
        if (e.startsWith("\\")) {
          if (((n = N[e]), n)) return n.ifMode && n.ifMode !== t ? null : n;
          "math" === t
            ? (n = O[e])
            : I[e] &&
              (n = { definitionType: "symbol", type: "mord", codepoint: I[e] });
        } else if ("math" === t) {
          if (((n = O[e]), !n && 1 === e.length)) {
            let t = ae("math", e.codePointAt(0));
            return t.startsWith("\\")
              ? u(d({}, ne(t, "math")), { command: t })
              : null;
          }
        } else
          I[e]
            ? (n = { definitionType: "symbol", type: "mord", codepoint: I[e] })
            : "text" === t &&
              (n = {
                definitionType: "symbol",
                type: "mord",
                codepoint: e.codePointAt(0),
              });
        return (
          n &&
            "symbol" === n.definitionType &&
            "mord" === n.type &&
            (102 === n.codepoint ||
              103 === n.codepoint ||
              104 === n.codepoint) &&
            (n.isFunction = !0),
          null != n ? n : null
        );
      }
      function ie(e, t) {
        if (!e.startsWith("\\")) return null;
        return t[e.slice(1)];
      }
      function re(e, t) {
        var n;
        if ("text" === e) return null != (n = ae(e, t.codePointAt(0))) ? n : t;
        let i;
        if (((i = ae(e, t.codePointAt(0))), i)) return i;
        let r = (function (e) {
          var t;
          if ((e < 119808 || e > 120831) && (e < 8448 || e > 8527))
            return { char: String.fromCodePoint(e) };
          for (let n in K)
            if (K[n] === e) {
              e = null != (t = n.codePointAt(0)) ? t : 0;
              break;
            }
          for (let n of D)
            if (e >= n.start && e < n.start + n.len)
              return {
                char: String.fromCodePoint(e - n.start + n.offset),
                variant: n.variant,
                style: n.style,
              };
          return { char: String.fromCodePoint(e) };
        })(t.codePointAt(0));
        return r.style || r.variant
          ? ((i = r.char),
            r.variant && (i = "\\" + r.variant + "{" + i + "}"),
            "bold" === r.style
              ? (i = "\\mathbf{" + i + "}")
              : "italic" === r.style
              ? (i = "\\mathit{" + i + "}")
              : "bolditalic" === r.style && (i = "\\mathbfit{" + i + "}"),
            "\\mathord{" + i + "}")
          : "";
      }
      function ae(e, t) {
        if (void 0 === t) return "";
        if ("math" === e && F[t]) return F[t];
        if ("text" === e) {
          let e = Object.keys(I).find((e) => I[e] === t);
          if (!e) {
            let n = t.toString(16);
            e = "^".repeat(n.length) + n;
          }
          return e;
        }
        return String.fromCodePoint(t);
      }
      !(function () {
        if (!f()) return !0;
        if (/firefox/i.test(navigator.userAgent)) {
          let e = navigator.userAgent.match(/firefox\/(\d+)/i);
          return !!e && parseInt(e[1]) >= 78;
        }
        if (/trident/i.test(navigator.userAgent)) return !1;
        if (/edge/i.test(navigator.userAgent)) {
          let e = navigator.userAgent.match(/edg\/(\d+)/i);
          return !!e && parseInt(e[1]) >= 79;
        }
        return !0;
      })()
        ? ((B =
            /[a-zA-Z\u0430\u0410\u0431\u0411\u0432\u0412\u0433\u0413\u0434\u0414\u0435\u0415\u0451\u0401\u0436\u0416\u0437\u0417\u0438\u0418\u0439\u0419\u043a\u041a\u043b\u041b\u043c\u041c\u043d\u041d\u043e\u041e\u043f\u041f\u0440\u0420\u0441\u0421\u0442\u0422\u0443\u0423\u0444\u0424\u0445\u0425\u0446\u0426\u0447\u0427\u0448\u0428\u0449\u0429\u044a\u042a\u044b\u042b\u044c\u042c\u044d\u042d\u044e\u042e\u044f\u0104\u0105\u0106\u0107\u0118\u0119\u0141\u0142\u0143\u0144\xd3\xf3\u015a\u015b\u0179\u017a\u017b\u017c\xe0\xe2\xe4\xf4\xe9\xe8\xeb\xea\xef\xee\xe7\xf9\xfb\xfc\xff\xe6\u0153\xc0\xc2\xc4\xd4\xc9\xc8\xcb\xca\xcf\xce\u0178\xc7\xd9\xdb\xdc\xc6\u0152\xf6\xdf\xd6\u1e9e\xec\xed\xf2\xfa\xcc\xcd\xd2\xda\xe1\xf1\xc1\xd1]/),
          ($ =
            /[\da-zA-Z\u0430\u0410\u0431\u0411\u0432\u0412\u0433\u0413\u0434\u0414\u0435\u0415\u0451\u0401\u0436\u0416\u0437\u0417\u0438\u0418\u0439\u0419\u043a\u041a\u043b\u041b\u043c\u041c\u043d\u041d\u043e\u041e\u043f\u041f\u0440\u0420\u0441\u0421\u0442\u0422\u0443\u0423\u0444\u0424\u0445\u0425\u0446\u0426\u0447\u0427\u0448\u0428\u0449\u0429\u044a\u042a\u044b\u042b\u044c\u042c\u044d\u042d\u044e\u042e\u044f\u0104\u0105\u0106\u0107\u0118\u0119\u0141\u0142\u0143\u0144\xd3\xf3\u015a\u015b\u0179\u017a\u017b\u017c\xe0\xe2\xe4\xf4\xe9\xe8\xeb\xea\xef\xee\xe7\xf9\xfb\xfc\xff\xe6\u0153\xc0\xc2\xc4\xd4\xc9\xc8\xcb\xca\xcf\xce\u0178\xc7\xd9\xdb\xdc\xc6\u0152\xf6\xdf\xd6\u1e9e\xec\xed\xf2\xfa\xcc\xcd\xd2\xda\xe1\xf1\xc1\xd1]/))
        : ((B = new RegExp("\\p{Letter}", "u")),
          ($ = new RegExp("[0-9\\p{Letter}]", "u")));
      var oe = [0, 0.68889, 0, 0, 0.72222],
        se = [0, 0.68889, 0, 0, 0.66667],
        le = [0, 0.68889, 0, 0, 0.77778],
        ce = [0, 0.68889, 0, 0, 0.61111],
        de = [0.16667, 0.68889, 0, 0, 0.77778],
        ue = [0, 0.68889, 0, 0, 0.55556],
        he = [0, 0, 0, 0, 0.25],
        pe = [0, 0.825, 0, 0, 2.33334],
        me = [0, 0.9, 0, 0, 2.33334],
        fe = [0, 0.68889, 0, 0, 0.54028],
        ye = [-0.03598, 0.46402, 0, 0, 0.5],
        ge = [-0.13313, 0.36687, 0, 0, 1],
        be = [0.01354, 0.52239, 0, 0, 1],
        ve = [0.01354, 0.52239, 0, 0, 1.11111],
        xe = [0, 0.54986, 0, 0, 1],
        we = [0, 0.69224, 0, 0, 0.5],
        ke = [0, 0.43056, 0, 0, 1],
        _e = [0.08198, 0.58198, 0, 0, 0.77778],
        Se = [0.19444, 0.69224, 0, 0, 0.41667],
        Me = [0.1808, 0.675, 0, 0, 1],
        Le = [0.19444, 0.69224, 0, 0, 0.83334],
        Ce = [0.13667, 0.63667, 0, 0, 1],
        ze = [-0.064, 0.437, 0, 0, 1.334],
        Ae = [0.08167, 0.58167, 0, 0, 0.77778],
        Ee = [0, 0.69224, 0, 0, 0.72222],
        Ke = [0, 0.69224, 0, 0, 0.66667],
        De = [-0.13313, 0.36687, 0, 0, 0.77778],
        Te = [0.06062, 0.54986, 0, 0, 0.77778],
        Be = [0, 0.69224, 0, 0, 0.77778],
        $e = [0.25583, 0.75583, 0, 0, 0.77778],
        Pe = [0.25142, 0.75726, 0, 0, 0.77778],
        Oe = [0.20576, 0.70576, 0, 0, 0.77778],
        Fe = [0.30274, 0.79383, 0, 0, 0.77778],
        Ne = [0.22958, 0.72958, 0, 0, 0.77778],
        qe = [0.1808, 0.675, 0, 0, 0.77778],
        Re = [0.13667, 0.63667, 0, 0, 0.77778],
        Ie = [0.13597, 0.63597, 0, 0, 0.77778],
        Ve = [0.03517, 0.54986, 0, 0, 0.77778],
        je = [0, 0.675, 0, 0, 0.77778],
        He = [0.19444, 0.69224, 0, 0, 0.61111],
        We = [0, 0.54986, 0, 0, 0.76042],
        Ue = [0, 0.54986, 0, 0, 0.66667],
        Je = [0.0391, 0.5391, 0, 0, 0.77778],
        Xe = [0.03517, 0.54986, 0, 0, 1.33334],
        Ge = [0.38569, 0.88569, 0, 0, 0.77778],
        Ze = [0.23222, 0.74111, 0, 0, 0.77778],
        Ye = [0.19444, 0.69224, 0, 0, 0.77778],
        Qe = [0, 0.37788, 0, 0, 0.5],
        et = [0, 0.54986, 0, 0, 0.72222],
        tt = [0, 0.69224, 0, 0, 0.83334],
        nt = [0.11111, 0.69224, 0, 0, 0.66667],
        it = [0.26167, 0.75726, 0, 0, 0.77778],
        rt = [0.48256, 0.98256, 0, 0, 0.77778],
        at = [0.28481, 0.79383, 0, 0, 0.77778],
        ot = [0.08167, 0.58167, 0, 0, 0.22222],
        st = [0.08167, 0.58167, 0, 0, 0.38889],
        lt = [0, 0.43056, 0.04028, 0, 0.66667],
        ct = [0.41951, 0.91951, 0, 0, 0.77778],
        dt = [0.24982, 0.74947, 0, 0, 0.38865],
        ut = [0.08319, 0.58283, 0, 0, 0.75623],
        ht = [0, 0.10803, 0, 0, 0.27764],
        pt = [0, 0.47534, 0, 0, 0.50181],
        mt = [0.18906, 0.47534, 0, 0, 0.50181],
        ft = [0, 0.69141, 0, 0, 0.50181],
        yt = [0.24982, 0.74947, 0, 0, 0.27764],
        gt = [0, 0.69141, 0, 0, 0.21471],
        bt = [0.25, 0.75, 0, 0, 0.44722],
        vt = [0, 0.64444, 0, 0, 0.575],
        xt = [0.08556, 0.58556, 0, 0, 0.89444],
        wt = [0, 0.69444, 0, 0, 0.89444],
        kt = [0, 0.68611, 0, 0, 0.9],
        _t = [0, 0.68611, 0, 0, 0.86944],
        St = [0.25, 0.75, 0, 0, 0.575],
        Mt = [0.25, 0.75, 0, 0, 0.31944],
        Lt = [0, 0.69444, 0, 0, 0.63889],
        Ct = [0, 0.69444, 0, 0, 0.31944],
        zt = [0, 0.44444, 0, 0, 0.63889],
        At = [0, 0.44444, 0, 0, 0.51111],
        Et = [0, 0.69444, 0, 0, 0.575],
        Kt = [0.13333, 0.63333, 0, 0, 0.89444],
        Dt = [0, 0.44444, 0, 0, 0.31944],
        Tt = [0, 0.69444, 0, 0, 0.86944],
        Bt = [0, 0.68611, 0, 0, 0.69166],
        $t = [0, 0.68611, 0, 0, 0.83055],
        Pt = [0, 0.68611, 0, 0, 0.89444],
        Ot = [0, 0.69444, 0, 0, 0.60278],
        Ft = [0.19444, 0.69444, 0, 0, 0.51111],
        Nt = [0, 0.69444, 0, 0, 0.83055],
        qt = [-0.10889, 0.39111, 0, 0, 1.14999],
        Rt = [0.19444, 0.69444, 0, 0, 0.575],
        It = [0.19444, 0.69444, 0, 0, 1.14999],
        Vt = [0.19444, 0.69444, 0, 0, 0.70277],
        jt = [0.05556, 0.75, 0, 0, 0.575],
        Ht = [0, 0.68611, 0, 0, 0.95833],
        Wt = [0.08556, 0.58556, 0, 0, 0.76666],
        Ut = [-0.02639, 0.47361, 0, 0, 0.575],
        Jt = [0, 0.44444, 0, 0, 0.89444],
        Xt = [0, 0.55556, 0, 0, 0.76666],
        Gt = [-0.10889, 0.39111, 0, 0, 0.89444],
        Zt = [0.00222, 0.50222, 0, 0, 0.89444],
        Yt = [0.19667, 0.69667, 0, 0, 0.89444],
        Qt = [0.08556, 0.58556, 0, 0, 1.14999],
        en = [0, 0.69444, 0, 0, 0.70277],
        tn = [-0.02778, 0.47222, 0, 0, 0.575],
        nn = [0.25, 0.75, 0, 0, 0.51111],
        rn = [-0.13889, 0.36111, 0, 0, 1.14999],
        an = [0.19444, 0.69444, 0, 0, 1.02222],
        on = [0.12963, 0.69444, 0, 0, 0.89444],
        sn = [0.19444, 0.69444, 0, 0, 0.44722],
        ln = [0, 0.64444, 0.13167, 0, 0.59111],
        cn = [0.19444, 0.64444, 0.13167, 0, 0.59111],
        dn = [0, 0.68611, 0.17208, 0, 0.8961],
        un = [0.19444, 0.44444, 0.105, 0, 0.53222],
        hn = [0, 0.44444, 0.085, 0, 0.82666],
        pn = [0, 0.69444, 0.06709, 0, 0.59111],
        mn = [0, 0.69444, 0.12945, 0, 0.35555],
        fn = [0, 0.69444, 0, 0, 0.94888],
        yn = [0, 0.69444, 0.11472, 0, 0.59111],
        gn = [0, 0.68611, 0.10778, 0, 0.88555],
        bn = [0, 0.69444, 0.07939, 0, 0.62055],
        vn = [0, 0.69444, 0.12417, 0, 0.30667],
        xn = [0, 0.64444, 0.13556, 0, 0.51111],
        wn = [0.19444, 0.64444, 0.13556, 0, 0.51111],
        kn = [0, 0.68333, 0.16389, 0, 0.74333],
        _n = [0.19444, 0.43056, 0.08847, 0, 0.46],
        Sn = [0, 0.43056, 0.07514, 0, 0.71555],
        Mn = [0, 0.69444, 0.06646, 0, 0.51111],
        Ln = [0, 0.69444, 0, 0, 0.83129],
        Cn = [0, 0.69444, 0.1225, 0, 0.51111],
        zn = [0, 0.68333, 0.09403, 0, 0.76666],
        An = [0, 0.68333, 0.11111, 0, 0.76666],
        En = [0, 0.69444, 0.06961, 0, 0.51444],
        Kn = [0, 0.69444, 0, 0, 0.27778],
        Dn = [0.25, 0.75, 0, 0, 0.38889],
        Tn = [0, 0.64444, 0, 0, 0.5],
        Bn = [0, 0.69444, 0, 0, 0.77778],
        $n = [0, 0.68333, 0, 0, 0.75],
        Pn = [0, 0.68333, 0, 0, 0.77778],
        On = [0, 0.68333, 0, 0, 0.68056],
        Fn = [0, 0.68333, 0, 0, 0.72222],
        Nn = [0.25, 0.75, 0, 0, 0.5],
        qn = [0.25, 0.75, 0, 0, 0.27778],
        Rn = [0, 0.69444, 0, 0, 0.5],
        In = [0, 0.69444, 0, 0, 0.55556],
        Vn = [0, 0.43056, 0, 0, 0.44445],
        jn = [0, 0.43056, 0, 0, 0.5],
        Hn = [0.19444, 0.43056, 0, 0, 0.55556],
        Wn = [0, 0.43056, 0, 0, 0.55556],
        Un = [0.08333, 0.58333, 0, 0, 0.77778],
        Jn = [0, 0.43056, 0, 0, 0.27778],
        Xn = [0, 0.66786, 0, 0, 0.27778],
        Gn = [0, 0.69444, 0, 0, 0.75],
        Zn = [0, 0.66786, 0, 0, 0.5],
        Yn = [0, 0.68333, 0, 0, 0.625],
        Qn = [0.19444, 0.69444, 0, 0, 0.44445],
        ei = [0, 0.69444, 0, 0, 0.72222],
        ti = [0.19444, 0.69444, 0, 0, 0.5],
        ni = [0.19444, 0.69444, 0, 0, 1],
        ii = [0.011, 0.511, 0, 0, 1.126],
        ri = [0.19444, 0.69444, 0, 0, 0.61111],
        ai = [0.05556, 0.75, 0, 0, 0.5],
        oi = [0, 0.68333, 0, 0, 0.83334],
        si = [0.0391, 0.5391, 0, 0, 0.66667],
        li = [-0.05555, 0.44445, 0, 0, 0.5],
        ci = [0, 0.43056, 0, 0, 0.77778],
        di = [0, 0.55556, 0, 0, 0.66667],
        ui = [-0.03625, 0.46375, 0, 0, 0.77778],
        hi = [-0.01688, 0.48312, 0, 0, 0.77778],
        pi = [0.0391, 0.5391, 0, 0, 1],
        mi = [0, 0.69444, 0, 0, 0.61111],
        fi = [-0.03472, 0.46528, 0, 0, 0.5],
        yi = [0.25, 0.75, 0, 0, 0.44445],
        gi = [-0.14236, 0.35764, 0, 0, 1],
        bi = [0.244, 0.744, 0, 0, 0.412],
        vi = [0.19444, 0.69444, 0, 0, 0.88889],
        xi = [0.12963, 0.69444, 0, 0, 0.77778],
        wi = [0.19444, 0.69444, 0, 0, 0.38889],
        ki = [0.011, 0.511, 0, 0, 1.638],
        _i = [0.19444, 0.69444, 0, 0, 0],
        Si = [0, 0.44444, 0, 0, 0.575],
        Mi = [0.19444, 0.44444, 0, 0, 0.575],
        Li = [0, 0.68611, 0, 0, 0.75555],
        Ci = [0, 0.69444, 0, 0, 0.66759],
        zi = [0, 0.68611, 0, 0, 0.80555],
        Ai = [0, 0.68611, 0.08229, 0, 0.98229],
        Ei = [0, 0.68611, 0, 0, 0.76666],
        Ki = [0, 0.44444, 0, 0, 0.58472],
        Di = [0.19444, 0.44444, 0, 0, 0.6118],
        Ti = [0.19444, 0.43056, 0, 0, 0.5],
        Bi = [0, 0.68333, 0.02778, 0.08334, 0.76278],
        $i = [0, 0.68333, 0.08125, 0.05556, 0.83125],
        Pi = [0, 0.43056, 0, 0.05556, 0.48472],
        Oi = [0.19444, 0.43056, 0, 0.08334, 0.51702],
        Fi = [0.25, 0.75, 0, 0, 0.42778],
        Ni = [0, 0.69444, 0, 0, 0.55],
        qi = [0, 0.69444, 0, 0, 0.73334],
        Ri = [0, 0.69444, 0, 0, 0.79445],
        Ii = [0, 0.69444, 0, 0, 0.51945],
        Vi = [0, 0.69444, 0, 0, 0.70278],
        ji = [0, 0.69444, 0, 0, 0.76389],
        Hi = [0.25, 0.75, 0, 0, 0.34306],
        Wi = [0, 0.69444, 0, 0, 0.56111],
        Ui = [0, 0.69444, 0, 0, 0.25556],
        Ji = [0.19444, 0.45833, 0, 0, 0.56111],
        Xi = [0, 0.45833, 0, 0, 0.56111],
        Gi = [0, 0.69444, 0, 0, 0.30556],
        Zi = [0, 0.69444, 0, 0, 0.58056],
        Yi = [0, 0.69444, 0, 0, 0.67223],
        Qi = [0, 0.69444, 0, 0, 0.85556],
        er = [0, 0.69444, 0, 0, 0.55834],
        tr = [0, 0.65556, 0.11156, 0, 0.5],
        nr = [0, 0.69444, 0.08094, 0, 0.70834],
        ir = [0.17014, 0, 0, 0, 0.44445],
        rr = [0, 0.69444, 0.0799, 0, 0.5],
        ar = [0, 0.69444, 0, 0, 0.73752],
        or = [0, 0.69444, 0.09205, 0, 0.5],
        sr = [0, 0.69444, 0.09031, 0, 0.77778],
        lr = [0, 0.69444, 0.07816, 0, 0.27778],
        cr = [0, 0.69444, 0.00316, 0, 0.5],
        dr = [0.19444, 0.69444, 0, 0, 0.83334],
        ur = [0.05556, 0.75, 0, 0, 0.83334],
        hr = [0, 0.75, 0, 0, 0.5],
        pr = [0.125, 0.08333, 0, 0, 0.27778],
        mr = [0, 0.08333, 0, 0, 0.27778],
        fr = [0, 0.65556, 0, 0, 0.5],
        yr = [0, 0.69444, 0, 0, 0.47222],
        gr = [0, 0.69444, 0, 0, 0.66667],
        br = [0, 0.69444, 0, 0, 0.59722],
        vr = [0, 0.69444, 0, 0, 0.54167],
        xr = [0, 0.69444, 0, 0, 0.70834],
        wr = [0.25, 0.75, 0, 0, 0.28889],
        kr = [0, 0.69444, 0, 0, 0.51667],
        _r = [0, 0.44444, 0, 0, 0.44445],
        Sr = [0.19444, 0.44444, 0, 0, 0.51667],
        Mr = [0, 0.44444, 0, 0, 0.38333],
        Lr = [0, 0.44444, 0, 0, 0.51667],
        Cr = [0, 0.69444, 0, 0, 0.83334],
        zr = [0.35001, 0.85, 0, 0, 0.45834],
        Ar = [0.35001, 0.85, 0, 0, 0.57778],
        Er = [0.35001, 0.85, 0, 0, 0.41667],
        Kr = [0.35001, 0.85, 0, 0, 0.58334],
        Dr = [0, 0.72222, 0, 0, 0.55556],
        Tr = [1e-5, 0.6, 0, 0, 0.66667],
        Br = [1e-5, 0.6, 0, 0, 0.77778],
        $r = [0.25001, 0.75, 0, 0, 0.94445],
        Pr = [0.306, 0.805, 0.19445, 0, 0.47222],
        Or = [0.30612, 0.805, 0.19445, 0, 0.47222],
        Fr = [0.25001, 0.75, 0, 0, 0.83334],
        Nr = [0.35001, 0.85, 0, 0, 0.47222],
        qr = [0.25001, 0.75, 0, 0, 1.11111],
        Rr = [0.65002, 1.15, 0, 0, 0.59722],
        Ir = [0.65002, 1.15, 0, 0, 0.81111],
        Vr = [0.65002, 1.15, 0, 0, 0.47222],
        jr = [0.65002, 1.15, 0, 0, 0.66667],
        Hr = [0, 0.75, 0, 0, 1],
        Wr = [0.55001, 1.05, 0, 0, 1.27778],
        Ur = [0.862, 1.36, 0.44445, 0, 0.55556],
        Jr = [0.86225, 1.36, 0.44445, 0, 0.55556],
        Xr = [0.55001, 1.05, 0, 0, 1.11111],
        Gr = [0.65002, 1.15, 0, 0, 0.52778],
        Zr = [0.65002, 1.15, 0, 0, 0.61111],
        Yr = [0.55001, 1.05, 0, 0, 1.51112],
        Qr = [0.95003, 1.45, 0, 0, 0.73611],
        ea = [0.95003, 1.45, 0, 0, 1.04445],
        ta = [0.95003, 1.45, 0, 0, 0.52778],
        na = [0.95003, 1.45, 0, 0, 0.75],
        ia = [0, 0.75, 0, 0, 1.44445],
        ra = [0.95003, 1.45, 0, 0, 0.58334],
        aa = [1.25003, 1.75, 0, 0, 0.79167],
        oa = [1.25003, 1.75, 0, 0, 1.27778],
        sa = [1.25003, 1.75, 0, 0, 0.58334],
        la = [1.25003, 1.75, 0, 0, 0.80556],
        ca = [0, 0.825, 0, 0, 1.8889],
        da = [1.25003, 1.75, 0, 0, 0.63889],
        ua = [0.64502, 1.155, 0, 0, 0.875],
        ha = [1e-5, 0.6, 0, 0, 0.875],
        pa = [-99e-5, 0.601, 0, 0, 0.66667],
        ma = [0.64502, 1.155, 0, 0, 0.66667],
        fa = [1e-5, 0.9, 0, 0, 0.88889],
        ya = [0.65002, 1.15, 0, 0, 0.88889],
        ga = [0.90001, 0, 0, 0, 0.88889],
        ba = [-0.00499, 0.605, 0, 0, 1.05556],
        va = [0, 0.12, 0, 0, 0.45],
        xa = [0, 0.61111, 0, 0, 0.525],
        wa = [0.08333, 0.69444, 0, 0, 0.525],
        ka = [-0.08056, 0.53055, 0, 0, 0.525],
        _a = [-0.05556, 0.55556, 0, 0, 0.525],
        Sa = [0, 0.43056, 0, 0, 0.525],
        Ma = [0.22222, 0.43056, 0, 0, 0.525],
        La = [0, 0, 0, 0, 0.525],
        Ca = {
          "AMS-Regular": {
            32: he,
            65: oe,
            66: se,
            67: oe,
            68: oe,
            69: se,
            70: ce,
            71: le,
            72: le,
            73: [0, 0.68889, 0, 0, 0.38889],
            74: [0.16667, 0.68889, 0, 0, 0.5],
            75: le,
            76: se,
            77: [0, 0.68889, 0, 0, 0.94445],
            78: oe,
            79: de,
            80: ce,
            81: de,
            82: oe,
            83: ue,
            84: se,
            85: oe,
            86: oe,
            87: [0, 0.68889, 0, 0, 1],
            88: oe,
            89: oe,
            90: se,
            107: ue,
            160: he,
            165: [0, 0.675, 0.025, 0, 0.75],
            174: [0.15559, 0.69224, 0, 0, 0.94666],
            240: ue,
            295: fe,
            710: pe,
            732: me,
            770: pe,
            771: me,
            989: Ae,
            1008: lt,
            8245: [0, 0.54986, 0, 0, 0.275],
            8463: fe,
            8487: oe,
            8498: ue,
            8502: se,
            8503: [0, 0.68889, 0, 0, 0.44445],
            8504: se,
            8513: [0, 0.68889, 0, 0, 0.63889],
            8592: ye,
            8594: ye,
            8602: ge,
            8603: ge,
            8606: be,
            8608: be,
            8610: ve,
            8611: ve,
            8619: xe,
            8620: xe,
            8621: [-0.13313, 0.37788, 0, 0, 1.38889],
            8622: ge,
            8624: we,
            8625: we,
            8630: ke,
            8631: ke,
            8634: _e,
            8635: _e,
            8638: Se,
            8639: Se,
            8642: Se,
            8643: Se,
            8644: Me,
            8646: Me,
            8647: Me,
            8648: Le,
            8649: Me,
            8650: Le,
            8651: be,
            8652: be,
            8653: ge,
            8654: ge,
            8655: ge,
            8666: Ce,
            8667: Ce,
            8669: [-0.13313, 0.37788, 0, 0, 1],
            8672: ze,
            8674: ze,
            8705: [0, 0.825, 0, 0, 0.5],
            8708: ue,
            8709: Ae,
            8717: [0, 0.43056, 0, 0, 0.42917],
            8722: ye,
            8724: [0.08198, 0.69224, 0, 0, 0.77778],
            8726: Ae,
            8733: Be,
            8736: Ee,
            8737: Ee,
            8738: [0.03517, 0.52239, 0, 0, 0.72222],
            8739: ot,
            8740: [0.25142, 0.74111, 0, 0, 0.27778],
            8741: st,
            8742: [0.25142, 0.74111, 0, 0, 0.5],
            8756: Ke,
            8757: Ke,
            8764: De,
            8765: [-0.13313, 0.37788, 0, 0, 0.77778],
            8769: De,
            8770: ui,
            8774: Fe,
            8776: hi,
            8778: Ae,
            8782: Te,
            8783: Te,
            8785: _e,
            8786: _e,
            8787: _e,
            8790: Be,
            8791: Ne,
            8796: [0.08198, 0.91667, 0, 0, 0.77778],
            8806: $e,
            8807: $e,
            8808: Pe,
            8809: Pe,
            8812: [0.25583, 0.75583, 0, 0, 0.5],
            8814: Oe,
            8815: Oe,
            8816: Fe,
            8817: Fe,
            8818: Ne,
            8819: Ne,
            8822: qe,
            8823: qe,
            8828: Re,
            8829: Re,
            8830: Ne,
            8831: Ne,
            8832: Oe,
            8833: Oe,
            8840: Fe,
            8841: Fe,
            8842: Ie,
            8843: Ie,
            8847: Ve,
            8848: Ve,
            8858: _e,
            8859: _e,
            8861: _e,
            8862: je,
            8863: je,
            8864: je,
            8865: je,
            8872: [0, 0.69224, 0, 0, 0.61111],
            8873: Ee,
            8874: [0, 0.69224, 0, 0, 0.88889],
            8876: ce,
            8877: ce,
            8878: oe,
            8879: oe,
            8882: Ve,
            8883: Ve,
            8884: Re,
            8885: Re,
            8888: [0, 0.54986, 0, 0, 1.11111],
            8890: Hn,
            8891: He,
            8892: He,
            8901: [0, 0.54986, 0, 0, 0.27778],
            8903: Ae,
            8905: Ae,
            8906: Ae,
            8907: Be,
            8908: Be,
            8909: [-0.03598, 0.46402, 0, 0, 0.77778],
            8910: We,
            8911: We,
            8912: Ve,
            8913: Ve,
            8914: Ue,
            8915: Ue,
            8916: Ke,
            8918: Je,
            8919: Je,
            8920: Xe,
            8921: Xe,
            8922: Ge,
            8923: Ge,
            8926: Re,
            8927: Re,
            8928: Fe,
            8929: Fe,
            8934: Ze,
            8935: Ze,
            8936: Ze,
            8937: Ze,
            8938: Oe,
            8939: Oe,
            8940: Fe,
            8941: Fe,
            8994: Ye,
            8995: Ye,
            9416: [0.15559, 0.69224, 0, 0, 0.90222],
            9484: we,
            9488: we,
            9492: Qe,
            9496: Qe,
            9585: [0.19444, 0.68889, 0, 0, 0.88889],
            9586: [0.19444, 0.74111, 0, 0, 0.88889],
            9632: je,
            9633: je,
            9650: et,
            9651: et,
            9654: Ve,
            9660: et,
            9661: et,
            9664: Ve,
            9674: nt,
            9733: [0.19444, 0.69224, 0, 0, 0.94445],
            10003: tt,
            10016: tt,
            10731: nt,
            10846: [0.19444, 0.75583, 0, 0, 0.61111],
            10877: Re,
            10878: Re,
            10885: $e,
            10886: $e,
            10887: Ie,
            10888: Ie,
            10889: it,
            10890: it,
            10891: rt,
            10892: rt,
            10901: Re,
            10902: Re,
            10933: Pe,
            10934: Pe,
            10935: it,
            10936: it,
            10937: it,
            10938: it,
            10949: $e,
            10950: $e,
            10955: at,
            10956: at,
            57350: ot,
            57351: st,
            57352: Ae,
            57353: lt,
            57356: Pe,
            57357: Pe,
            57358: ct,
            57359: Fe,
            57360: Fe,
            57361: ct,
            57366: Pe,
            57367: Pe,
            57368: Pe,
            57369: Pe,
            57370: Ie,
            57371: Ie,
          },
          "Caligraphic-Regular": {
            32: he,
            65: [0, 0.68333, 0, 0.19445, 0.79847],
            66: [0, 0.68333, 0.03041, 0.13889, 0.65681],
            67: [0, 0.68333, 0.05834, 0.13889, 0.52653],
            68: [0, 0.68333, 0.02778, 0.08334, 0.77139],
            69: [0, 0.68333, 0.08944, 0.11111, 0.52778],
            70: [0, 0.68333, 0.09931, 0.11111, 0.71875],
            71: [0.09722, 0.68333, 0.0593, 0.11111, 0.59487],
            72: [0, 0.68333, 0.00965, 0.11111, 0.84452],
            73: [0, 0.68333, 0.07382, 0, 0.54452],
            74: [0.09722, 0.68333, 0.18472, 0.16667, 0.67778],
            75: [0, 0.68333, 0.01445, 0.05556, 0.76195],
            76: [0, 0.68333, 0, 0.13889, 0.68972],
            77: [0, 0.68333, 0, 0.13889, 1.2009],
            78: [0, 0.68333, 0.14736, 0.08334, 0.82049],
            79: [0, 0.68333, 0.02778, 0.11111, 0.79611],
            80: [0, 0.68333, 0.08222, 0.08334, 0.69556],
            81: [0.09722, 0.68333, 0, 0.11111, 0.81667],
            82: [0, 0.68333, 0, 0.08334, 0.8475],
            83: [0, 0.68333, 0.075, 0.13889, 0.60556],
            84: [0, 0.68333, 0.25417, 0, 0.54464],
            85: [0, 0.68333, 0.09931, 0.08334, 0.62583],
            86: [0, 0.68333, 0.08222, 0, 0.61278],
            87: [0, 0.68333, 0.08222, 0.08334, 0.98778],
            88: [0, 0.68333, 0.14643, 0.13889, 0.7133],
            89: [0.09722, 0.68333, 0.08222, 0.08334, 0.66834],
            90: [0, 0.68333, 0.07944, 0.13889, 0.72473],
            160: he,
          },
          "Fraktur-Regular": {
            32: he,
            33: [0, 0.69141, 0, 0, 0.29574],
            34: gt,
            38: [0, 0.69141, 0, 0, 0.73786],
            39: [0, 0.69141, 0, 0, 0.21201],
            40: dt,
            41: dt,
            42: [0, 0.62119, 0, 0, 0.27764],
            43: ut,
            44: ht,
            45: ut,
            46: ht,
            47: [0.24982, 0.74947, 0, 0, 0.50181],
            48: pt,
            49: pt,
            50: pt,
            51: mt,
            52: mt,
            53: mt,
            54: ft,
            55: mt,
            56: ft,
            57: mt,
            58: [0, 0.47534, 0, 0, 0.21606],
            59: [0.12604, 0.47534, 0, 0, 0.21606],
            61: [-0.13099, 0.36866, 0, 0, 0.75623],
            63: [0, 0.69141, 0, 0, 0.36245],
            65: [0, 0.69141, 0, 0, 0.7176],
            66: [0, 0.69141, 0, 0, 0.88397],
            67: [0, 0.69141, 0, 0, 0.61254],
            68: [0, 0.69141, 0, 0, 0.83158],
            69: [0, 0.69141, 0, 0, 0.66278],
            70: [0.12604, 0.69141, 0, 0, 0.61119],
            71: [0, 0.69141, 0, 0, 0.78539],
            72: [0.06302, 0.69141, 0, 0, 0.7203],
            73: [0, 0.69141, 0, 0, 0.55448],
            74: [0.12604, 0.69141, 0, 0, 0.55231],
            75: [0, 0.69141, 0, 0, 0.66845],
            76: [0, 0.69141, 0, 0, 0.66602],
            77: [0, 0.69141, 0, 0, 1.04953],
            78: [0, 0.69141, 0, 0, 0.83212],
            79: [0, 0.69141, 0, 0, 0.82699],
            80: [0.18906, 0.69141, 0, 0, 0.82753],
            81: [0.03781, 0.69141, 0, 0, 0.82699],
            82: [0, 0.69141, 0, 0, 0.82807],
            83: [0, 0.69141, 0, 0, 0.82861],
            84: [0, 0.69141, 0, 0, 0.66899],
            85: [0, 0.69141, 0, 0, 0.64576],
            86: [0, 0.69141, 0, 0, 0.83131],
            87: [0, 0.69141, 0, 0, 1.04602],
            88: [0, 0.69141, 0, 0, 0.71922],
            89: [0.18906, 0.69141, 0, 0, 0.83293],
            90: [0.12604, 0.69141, 0, 0, 0.60201],
            91: yt,
            93: yt,
            94: [0, 0.69141, 0, 0, 0.49965],
            97: [0, 0.47534, 0, 0, 0.50046],
            98: [0, 0.69141, 0, 0, 0.51315],
            99: [0, 0.47534, 0, 0, 0.38946],
            100: [0, 0.62119, 0, 0, 0.49857],
            101: [0, 0.47534, 0, 0, 0.40053],
            102: [0.18906, 0.69141, 0, 0, 0.32626],
            103: [0.18906, 0.47534, 0, 0, 0.5037],
            104: [0.18906, 0.69141, 0, 0, 0.52126],
            105: [0, 0.69141, 0, 0, 0.27899],
            106: [0, 0.69141, 0, 0, 0.28088],
            107: [0, 0.69141, 0, 0, 0.38946],
            108: [0, 0.69141, 0, 0, 0.27953],
            109: [0, 0.47534, 0, 0, 0.76676],
            110: [0, 0.47534, 0, 0, 0.52666],
            111: [0, 0.47534, 0, 0, 0.48885],
            112: [0.18906, 0.52396, 0, 0, 0.50046],
            113: [0.18906, 0.47534, 0, 0, 0.48912],
            114: [0, 0.47534, 0, 0, 0.38919],
            115: [0, 0.47534, 0, 0, 0.44266],
            116: [0, 0.62119, 0, 0, 0.33301],
            117: [0, 0.47534, 0, 0, 0.5172],
            118: [0, 0.52396, 0, 0, 0.5118],
            119: [0, 0.52396, 0, 0, 0.77351],
            120: [0.18906, 0.47534, 0, 0, 0.38865],
            121: [0.18906, 0.47534, 0, 0, 0.49884],
            122: [0.18906, 0.47534, 0, 0, 0.39054],
            160: he,
            8216: gt,
            8217: gt,
            58112: [0, 0.62119, 0, 0, 0.49749],
            58113: [0, 0.62119, 0, 0, 0.4983],
            58114: [0.18906, 0.69141, 0, 0, 0.33328],
            58115: [0.18906, 0.69141, 0, 0, 0.32923],
            58116: [0.18906, 0.47534, 0, 0, 0.50343],
            58117: [0, 0.69141, 0, 0, 0.33301],
            58118: [0, 0.62119, 0, 0, 0.33409],
            58119: [0, 0.47534, 0, 0, 0.50073],
          },
          "Main-Bold": {
            32: he,
            33: [0, 0.69444, 0, 0, 0.35],
            34: Ot,
            35: [0.19444, 0.69444, 0, 0, 0.95833],
            36: jt,
            37: [0.05556, 0.75, 0, 0, 0.95833],
            38: wt,
            39: Ct,
            40: bt,
            41: bt,
            42: [0, 0.75, 0, 0, 0.575],
            43: Kt,
            44: [0.19444, 0.15556, 0, 0, 0.31944],
            45: Mr,
            46: [0, 0.15556, 0, 0, 0.31944],
            47: St,
            48: vt,
            49: vt,
            50: vt,
            51: vt,
            52: vt,
            53: vt,
            54: vt,
            55: vt,
            56: vt,
            57: vt,
            58: Dt,
            59: [0.19444, 0.44444, 0, 0, 0.31944],
            60: xt,
            61: Gt,
            62: xt,
            63: [0, 0.69444, 0, 0, 0.54305],
            64: wt,
            65: _t,
            66: [0, 0.68611, 0, 0, 0.81805],
            67: $t,
            68: [0, 0.68611, 0, 0, 0.88194],
            69: Li,
            70: [0, 0.68611, 0, 0, 0.72361],
            71: [0, 0.68611, 0, 0, 0.90416],
            72: kt,
            73: [0, 0.68611, 0, 0, 0.43611],
            74: [0, 0.68611, 0, 0, 0.59444],
            75: [0, 0.68611, 0, 0, 0.90138],
            76: Bt,
            77: [0, 0.68611, 0, 0, 1.09166],
            78: kt,
            79: [0, 0.68611, 0, 0, 0.86388],
            80: [0, 0.68611, 0, 0, 0.78611],
            81: [0.19444, 0.68611, 0, 0, 0.86388],
            82: [0, 0.68611, 0, 0, 0.8625],
            83: [0, 0.68611, 0, 0, 0.63889],
            84: [0, 0.68611, 0, 0, 0.8],
            85: [0, 0.68611, 0, 0, 0.88472],
            86: [0, 0.68611, 0.01597, 0, 0.86944],
            87: [0, 0.68611, 0.01597, 0, 1.18888],
            88: _t,
            89: [0, 0.68611, 0.02875, 0, 0.86944],
            90: [0, 0.68611, 0, 0, 0.70277],
            91: Mt,
            92: St,
            93: Mt,
            94: Et,
            95: [0.31, 0.13444, 0.03194, 0, 0.575],
            97: [0, 0.44444, 0, 0, 0.55902],
            98: Lt,
            99: At,
            100: Lt,
            101: [0, 0.44444, 0, 0, 0.52708],
            102: [0, 0.69444, 0.10903, 0, 0.35139],
            103: [0.19444, 0.44444, 0.01597, 0, 0.575],
            104: Lt,
            105: Ct,
            106: [0.19444, 0.69444, 0, 0, 0.35139],
            107: [0, 0.69444, 0, 0, 0.60694],
            108: Ct,
            109: [0, 0.44444, 0, 0, 0.95833],
            110: zt,
            111: Si,
            112: [0.19444, 0.44444, 0, 0, 0.63889],
            113: [0.19444, 0.44444, 0, 0, 0.60694],
            114: [0, 0.44444, 0, 0, 0.47361],
            115: [0, 0.44444, 0, 0, 0.45361],
            116: [0, 0.63492, 0, 0, 0.44722],
            117: zt,
            118: [0, 0.44444, 0.01597, 0, 0.60694],
            119: [0, 0.44444, 0.01597, 0, 0.83055],
            120: [0, 0.44444, 0, 0, 0.60694],
            121: [0.19444, 0.44444, 0.01597, 0, 0.60694],
            122: At,
            123: St,
            124: Mt,
            125: St,
            126: [0.35, 0.34444, 0, 0, 0.575],
            160: he,
            163: [0, 0.69444, 0, 0, 0.86853],
            168: Et,
            172: [0, 0.44444, 0, 0, 0.76666],
            176: Tt,
            177: Kt,
            184: [0.17014, 0, 0, 0, 0.51111],
            198: [0, 0.68611, 0, 0, 1.04166],
            215: Kt,
            216: [0.04861, 0.73472, 0, 0, 0.89444],
            223: br,
            230: [0, 0.44444, 0, 0, 0.83055],
            247: Kt,
            248: [0.09722, 0.54167, 0, 0, 0.575],
            305: Dt,
            338: [0, 0.68611, 0, 0, 1.16944],
            339: Jt,
            567: [0.19444, 0.44444, 0, 0, 0.35139],
            710: Et,
            711: [0, 0.63194, 0, 0, 0.575],
            713: [0, 0.59611, 0, 0, 0.575],
            714: Et,
            715: Et,
            728: Et,
            729: Ct,
            730: Tt,
            732: Et,
            733: Et,
            915: Bt,
            916: Ht,
            920: Pt,
            923: zi,
            926: Ei,
            928: kt,
            931: $t,
            933: Pt,
            934: $t,
            936: Pt,
            937: $t,
            8211: [0, 0.44444, 0.03194, 0, 0.575],
            8212: [0, 0.44444, 0.03194, 0, 1.14999],
            8216: Ct,
            8217: Ct,
            8220: Ot,
            8221: Ot,
            8224: Ft,
            8225: Ft,
            8242: [0, 0.55556, 0, 0, 0.34444],
            8407: [0, 0.72444, 0.15486, 0, 0.575],
            8463: Ci,
            8465: Nt,
            8467: [0, 0.69444, 0, 0, 0.47361],
            8472: [0.19444, 0.44444, 0, 0, 0.74027],
            8476: Nt,
            8501: en,
            8592: qt,
            8593: Rt,
            8594: qt,
            8595: Rt,
            8596: qt,
            8597: St,
            8598: It,
            8599: It,
            8600: It,
            8601: It,
            8636: qt,
            8637: qt,
            8640: qt,
            8641: qt,
            8656: qt,
            8657: Vt,
            8658: qt,
            8659: Vt,
            8660: qt,
            8661: [0.25, 0.75, 0, 0, 0.70277],
            8704: Lt,
            8706: [0, 0.69444, 0.06389, 0, 0.62847],
            8707: Lt,
            8709: jt,
            8711: Ht,
            8712: Wt,
            8715: Wt,
            8722: Kt,
            8723: Kt,
            8725: St,
            8726: St,
            8727: tn,
            8728: Ut,
            8729: Ut,
            8730: [0.18, 0.82, 0, 0, 0.95833],
            8733: Jt,
            8734: [0, 0.44444, 0, 0, 1.14999],
            8736: Ee,
            8739: Mt,
            8741: St,
            8743: Xt,
            8744: Xt,
            8745: Xt,
            8746: Xt,
            8747: [0.19444, 0.69444, 0.12778, 0, 0.56875],
            8764: Gt,
            8768: [0.19444, 0.69444, 0, 0, 0.31944],
            8771: Zt,
            8776: [0.02444, 0.52444, 0, 0, 0.89444],
            8781: Zt,
            8801: Zt,
            8804: Yt,
            8805: Yt,
            8810: Qt,
            8811: Qt,
            8826: xt,
            8827: xt,
            8834: xt,
            8835: xt,
            8838: Yt,
            8839: Yt,
            8846: Xt,
            8849: Yt,
            8850: Yt,
            8851: Xt,
            8852: Xt,
            8853: Kt,
            8854: Kt,
            8855: Kt,
            8856: Kt,
            8857: Kt,
            8866: en,
            8867: en,
            8868: wt,
            8869: wt,
            8900: Ut,
            8901: [-0.02639, 0.47361, 0, 0, 0.31944],
            8902: tn,
            8968: nn,
            8969: nn,
            8970: nn,
            8971: nn,
            8994: rn,
            8995: rn,
            9651: an,
            9657: tn,
            9661: an,
            9667: tn,
            9711: It,
            9824: on,
            9825: on,
            9826: on,
            9827: on,
            9837: [0, 0.75, 0, 0, 0.44722],
            9838: sn,
            9839: sn,
            10216: bt,
            10217: bt,
            10815: kt,
            10927: Yt,
            10928: Yt,
            57376: _i,
          },
          "Main-BoldItalic": {
            32: he,
            33: [0, 0.69444, 0.11417, 0, 0.38611],
            34: bn,
            35: [0.19444, 0.69444, 0.06833, 0, 0.94444],
            37: [0.05556, 0.75, 0.12861, 0, 0.94444],
            38: [0, 0.69444, 0.08528, 0, 0.88555],
            39: mn,
            40: [0.25, 0.75, 0.15806, 0, 0.47333],
            41: [0.25, 0.75, 0.03306, 0, 0.47333],
            42: [0, 0.75, 0.14333, 0, 0.59111],
            43: [0.10333, 0.60333, 0.03306, 0, 0.88555],
            44: [0.19444, 0.14722, 0, 0, 0.35555],
            45: [0, 0.44444, 0.02611, 0, 0.41444],
            46: [0, 0.14722, 0, 0, 0.35555],
            47: [0.25, 0.75, 0.15806, 0, 0.59111],
            48: ln,
            49: ln,
            50: ln,
            51: ln,
            52: cn,
            53: ln,
            54: ln,
            55: cn,
            56: ln,
            57: ln,
            58: [0, 0.44444, 0.06695, 0, 0.35555],
            59: [0.19444, 0.44444, 0.06695, 0, 0.35555],
            61: [-0.10889, 0.39111, 0.06833, 0, 0.88555],
            63: yn,
            64: [0, 0.69444, 0.09208, 0, 0.88555],
            65: [0, 0.68611, 0, 0, 0.86555],
            66: [0, 0.68611, 0.0992, 0, 0.81666],
            67: [0, 0.68611, 0.14208, 0, 0.82666],
            68: [0, 0.68611, 0.09062, 0, 0.87555],
            69: [0, 0.68611, 0.11431, 0, 0.75666],
            70: [0, 0.68611, 0.12903, 0, 0.72722],
            71: [0, 0.68611, 0.07347, 0, 0.89527],
            72: dn,
            73: [0, 0.68611, 0.15681, 0, 0.47166],
            74: [0, 0.68611, 0.145, 0, 0.61055],
            75: [0, 0.68611, 0.14208, 0, 0.89499],
            76: [0, 0.68611, 0, 0, 0.69777],
            77: [0, 0.68611, 0.17208, 0, 1.07277],
            78: dn,
            79: [0, 0.68611, 0.09062, 0, 0.85499],
            80: [0, 0.68611, 0.0992, 0, 0.78721],
            81: [0.19444, 0.68611, 0.09062, 0, 0.85499],
            82: [0, 0.68611, 0.02559, 0, 0.85944],
            83: [0, 0.68611, 0.11264, 0, 0.64999],
            84: [0, 0.68611, 0.12903, 0, 0.7961],
            85: [0, 0.68611, 0.17208, 0, 0.88083],
            86: [0, 0.68611, 0.18625, 0, 0.86555],
            87: [0, 0.68611, 0.18625, 0, 1.15999],
            88: [0, 0.68611, 0.15681, 0, 0.86555],
            89: [0, 0.68611, 0.19803, 0, 0.86555],
            90: [0, 0.68611, 0.14208, 0, 0.70888],
            91: [0.25, 0.75, 0.1875, 0, 0.35611],
            93: [0.25, 0.75, 0.09972, 0, 0.35611],
            94: pn,
            95: [0.31, 0.13444, 0.09811, 0, 0.59111],
            97: [0, 0.44444, 0.09426, 0, 0.59111],
            98: [0, 0.69444, 0.07861, 0, 0.53222],
            99: [0, 0.44444, 0.05222, 0, 0.53222],
            100: [0, 0.69444, 0.10861, 0, 0.59111],
            101: [0, 0.44444, 0.085, 0, 0.53222],
            102: [0.19444, 0.69444, 0.21778, 0, 0.4],
            103: un,
            104: [0, 0.69444, 0.09426, 0, 0.59111],
            105: [0, 0.69326, 0.11387, 0, 0.35555],
            106: [0.19444, 0.69326, 0.1672, 0, 0.35555],
            107: [0, 0.69444, 0.11111, 0, 0.53222],
            108: [0, 0.69444, 0.10861, 0, 0.29666],
            109: [0, 0.44444, 0.09426, 0, 0.94444],
            110: [0, 0.44444, 0.09426, 0, 0.64999],
            111: [0, 0.44444, 0.07861, 0, 0.59111],
            112: [0.19444, 0.44444, 0.07861, 0, 0.59111],
            113: un,
            114: [0, 0.44444, 0.11111, 0, 0.50167],
            115: [0, 0.44444, 0.08167, 0, 0.48694],
            116: [0, 0.63492, 0.09639, 0, 0.385],
            117: [0, 0.44444, 0.09426, 0, 0.62055],
            118: [0, 0.44444, 0.11111, 0, 0.53222],
            119: [0, 0.44444, 0.11111, 0, 0.76777],
            120: [0, 0.44444, 0.12583, 0, 0.56055],
            121: [0.19444, 0.44444, 0.105, 0, 0.56166],
            122: [0, 0.44444, 0.13889, 0, 0.49055],
            126: [0.35, 0.34444, 0.11472, 0, 0.59111],
            160: he,
            168: [0, 0.69444, 0.11473, 0, 0.59111],
            176: fn,
            184: [0.17014, 0, 0, 0, 0.53222],
            198: [0, 0.68611, 0.11431, 0, 1.02277],
            216: [0.04861, 0.73472, 0.09062, 0, 0.88555],
            223: [0.19444, 0.69444, 0.09736, 0, 0.665],
            230: hn,
            248: [0.09722, 0.54167, 0.09458, 0, 0.59111],
            305: [0, 0.44444, 0.09426, 0, 0.35555],
            338: [0, 0.68611, 0.11431, 0, 1.14054],
            339: hn,
            567: [0.19444, 0.44444, 0.04611, 0, 0.385],
            710: pn,
            711: [0, 0.63194, 0.08271, 0, 0.59111],
            713: [0, 0.59444, 0.10444, 0, 0.59111],
            714: [0, 0.69444, 0.08528, 0, 0.59111],
            715: [0, 0.69444, 0, 0, 0.59111],
            728: [0, 0.69444, 0.10333, 0, 0.59111],
            729: mn,
            730: fn,
            732: yn,
            733: yn,
            915: [0, 0.68611, 0.12903, 0, 0.69777],
            916: [0, 0.68611, 0, 0, 0.94444],
            920: [0, 0.68611, 0.09062, 0, 0.88555],
            923: [0, 0.68611, 0, 0, 0.80666],
            926: [0, 0.68611, 0.15092, 0, 0.76777],
            928: dn,
            931: [0, 0.68611, 0.11431, 0, 0.82666],
            933: gn,
            934: [0, 0.68611, 0.05632, 0, 0.82666],
            936: gn,
            937: [0, 0.68611, 0.0992, 0, 0.82666],
            8211: [0, 0.44444, 0.09811, 0, 0.59111],
            8212: [0, 0.44444, 0.09811, 0, 1.18221],
            8216: mn,
            8217: mn,
            8220: [0, 0.69444, 0.16772, 0, 0.62055],
            8221: bn,
          },
          "Main-Italic": {
            32: he,
            33: vn,
            34: En,
            35: [0.19444, 0.69444, 0.06616, 0, 0.81777],
            37: [0.05556, 0.75, 0.13639, 0, 0.81777],
            38: [0, 0.69444, 0.09694, 0, 0.76666],
            39: vn,
            40: [0.25, 0.75, 0.16194, 0, 0.40889],
            41: [0.25, 0.75, 0.03694, 0, 0.40889],
            42: [0, 0.75, 0.14917, 0, 0.51111],
            43: [0.05667, 0.56167, 0.03694, 0, 0.76666],
            44: [0.19444, 0.10556, 0, 0, 0.30667],
            45: [0, 0.43056, 0.02826, 0, 0.35778],
            46: [0, 0.10556, 0, 0, 0.30667],
            47: [0.25, 0.75, 0.16194, 0, 0.51111],
            48: xn,
            49: xn,
            50: xn,
            51: xn,
            52: wn,
            53: xn,
            54: xn,
            55: wn,
            56: xn,
            57: xn,
            58: [0, 0.43056, 0.0582, 0, 0.30667],
            59: [0.19444, 0.43056, 0.0582, 0, 0.30667],
            61: [-0.13313, 0.36687, 0.06616, 0, 0.76666],
            63: Cn,
            64: [0, 0.69444, 0.09597, 0, 0.76666],
            65: [0, 0.68333, 0, 0, 0.74333],
            66: [0, 0.68333, 0.10257, 0, 0.70389],
            67: [0, 0.68333, 0.14528, 0, 0.71555],
            68: [0, 0.68333, 0.09403, 0, 0.755],
            69: [0, 0.68333, 0.12028, 0, 0.67833],
            70: [0, 0.68333, 0.13305, 0, 0.65277],
            71: [0, 0.68333, 0.08722, 0, 0.77361],
            72: kn,
            73: [0, 0.68333, 0.15806, 0, 0.38555],
            74: [0, 0.68333, 0.14028, 0, 0.525],
            75: [0, 0.68333, 0.14528, 0, 0.76888],
            76: [0, 0.68333, 0, 0, 0.62722],
            77: [0, 0.68333, 0.16389, 0, 0.89666],
            78: kn,
            79: zn,
            80: [0, 0.68333, 0.10257, 0, 0.67833],
            81: [0.19444, 0.68333, 0.09403, 0, 0.76666],
            82: [0, 0.68333, 0.03868, 0, 0.72944],
            83: [0, 0.68333, 0.11972, 0, 0.56222],
            84: [0, 0.68333, 0.13305, 0, 0.71555],
            85: kn,
            86: [0, 0.68333, 0.18361, 0, 0.74333],
            87: [0, 0.68333, 0.18361, 0, 0.99888],
            88: [0, 0.68333, 0.15806, 0, 0.74333],
            89: [0, 0.68333, 0.19383, 0, 0.74333],
            90: [0, 0.68333, 0.14528, 0, 0.61333],
            91: [0.25, 0.75, 0.1875, 0, 0.30667],
            93: [0.25, 0.75, 0.10528, 0, 0.30667],
            94: Mn,
            95: [0.31, 0.12056, 0.09208, 0, 0.51111],
            97: [0, 0.43056, 0.07671, 0, 0.51111],
            98: [0, 0.69444, 0.06312, 0, 0.46],
            99: [0, 0.43056, 0.05653, 0, 0.46],
            100: [0, 0.69444, 0.10333, 0, 0.51111],
            101: [0, 0.43056, 0.07514, 0, 0.46],
            102: [0.19444, 0.69444, 0.21194, 0, 0.30667],
            103: _n,
            104: [0, 0.69444, 0.07671, 0, 0.51111],
            105: [0, 0.65536, 0.1019, 0, 0.30667],
            106: [0.19444, 0.65536, 0.14467, 0, 0.30667],
            107: [0, 0.69444, 0.10764, 0, 0.46],
            108: [0, 0.69444, 0.10333, 0, 0.25555],
            109: [0, 0.43056, 0.07671, 0, 0.81777],
            110: [0, 0.43056, 0.07671, 0, 0.56222],
            111: [0, 0.43056, 0.06312, 0, 0.51111],
            112: [0.19444, 0.43056, 0.06312, 0, 0.51111],
            113: _n,
            114: [0, 0.43056, 0.10764, 0, 0.42166],
            115: [0, 0.43056, 0.08208, 0, 0.40889],
            116: [0, 0.61508, 0.09486, 0, 0.33222],
            117: [0, 0.43056, 0.07671, 0, 0.53666],
            118: [0, 0.43056, 0.10764, 0, 0.46],
            119: [0, 0.43056, 0.10764, 0, 0.66444],
            120: [0, 0.43056, 0.12042, 0, 0.46389],
            121: [0.19444, 0.43056, 0.08847, 0, 0.48555],
            122: [0, 0.43056, 0.12292, 0, 0.40889],
            126: [0.35, 0.31786, 0.11585, 0, 0.51111],
            160: he,
            168: [0, 0.66786, 0.10474, 0, 0.51111],
            176: Ln,
            184: [0.17014, 0, 0, 0, 0.46],
            198: [0, 0.68333, 0.12028, 0, 0.88277],
            216: [0.04861, 0.73194, 0.09403, 0, 0.76666],
            223: [0.19444, 0.69444, 0.10514, 0, 0.53666],
            230: Sn,
            248: [0.09722, 0.52778, 0.09194, 0, 0.51111],
            338: [0, 0.68333, 0.12028, 0, 0.98499],
            339: Sn,
            710: Mn,
            711: [0, 0.62847, 0.08295, 0, 0.51111],
            713: [0, 0.56167, 0.10333, 0, 0.51111],
            714: [0, 0.69444, 0.09694, 0, 0.51111],
            715: [0, 0.69444, 0, 0, 0.51111],
            728: [0, 0.69444, 0.10806, 0, 0.51111],
            729: [0, 0.66786, 0.11752, 0, 0.30667],
            730: Ln,
            732: [0, 0.66786, 0.11585, 0, 0.51111],
            733: Cn,
            915: [0, 0.68333, 0.13305, 0, 0.62722],
            916: [0, 0.68333, 0, 0, 0.81777],
            920: zn,
            923: [0, 0.68333, 0, 0, 0.69222],
            926: [0, 0.68333, 0.15294, 0, 0.66444],
            928: kn,
            931: [0, 0.68333, 0.12028, 0, 0.71555],
            933: An,
            934: [0, 0.68333, 0.05986, 0, 0.71555],
            936: An,
            937: [0, 0.68333, 0.10257, 0, 0.71555],
            8211: [0, 0.43056, 0.09208, 0, 0.51111],
            8212: [0, 0.43056, 0.09208, 0, 1.02222],
            8216: vn,
            8217: vn,
            8220: [0, 0.69444, 0.1685, 0, 0.51444],
            8221: En,
            8463: fe,
          },
          "Main-Regular": {
            32: he,
            33: Kn,
            34: Rn,
            35: dr,
            36: ai,
            37: ur,
            38: Bn,
            39: Kn,
            40: Dn,
            41: Dn,
            42: hr,
            43: Un,
            44: [0.19444, 0.10556, 0, 0, 0.27778],
            45: [0, 0.43056, 0, 0, 0.33333],
            46: [0, 0.10556, 0, 0, 0.27778],
            47: Nn,
            48: Tn,
            49: Tn,
            50: Tn,
            51: Tn,
            52: Tn,
            53: Tn,
            54: Tn,
            55: Tn,
            56: Tn,
            57: Tn,
            58: Jn,
            59: [0.19444, 0.43056, 0, 0, 0.27778],
            60: Je,
            61: De,
            62: Je,
            63: yr,
            64: Bn,
            65: $n,
            66: [0, 0.68333, 0, 0, 0.70834],
            67: Fn,
            68: [0, 0.68333, 0, 0, 0.76389],
            69: On,
            70: [0, 0.68333, 0, 0, 0.65278],
            71: [0, 0.68333, 0, 0, 0.78472],
            72: $n,
            73: [0, 0.68333, 0, 0, 0.36111],
            74: [0, 0.68333, 0, 0, 0.51389],
            75: Pn,
            76: Yn,
            77: [0, 0.68333, 0, 0, 0.91667],
            78: $n,
            79: Pn,
            80: On,
            81: [0.19444, 0.68333, 0, 0, 0.77778],
            82: [0, 0.68333, 0, 0, 0.73611],
            83: [0, 0.68333, 0, 0, 0.55556],
            84: Fn,
            85: $n,
            86: [0, 0.68333, 0.01389, 0, 0.75],
            87: [0, 0.68333, 0.01389, 0, 1.02778],
            88: $n,
            89: [0, 0.68333, 0.025, 0, 0.75],
            90: [0, 0.68333, 0, 0, 0.61111],
            91: qn,
            92: Nn,
            93: qn,
            94: Rn,
            95: [0.31, 0.12056, 0.02778, 0, 0.5],
            97: jn,
            98: In,
            99: Vn,
            100: In,
            101: Vn,
            102: [0, 0.69444, 0.07778, 0, 0.30556],
            103: [0.19444, 0.43056, 0.01389, 0, 0.5],
            104: In,
            105: Xn,
            106: [0.19444, 0.66786, 0, 0, 0.30556],
            107: [0, 0.69444, 0, 0, 0.52778],
            108: Kn,
            109: [0, 0.43056, 0, 0, 0.83334],
            110: Wn,
            111: jn,
            112: Hn,
            113: [0.19444, 0.43056, 0, 0, 0.52778],
            114: [0, 0.43056, 0, 0, 0.39167],
            115: [0, 0.43056, 0, 0, 0.39445],
            116: [0, 0.61508, 0, 0, 0.38889],
            117: Wn,
            118: [0, 0.43056, 0.01389, 0, 0.52778],
            119: [0, 0.43056, 0.01389, 0, 0.72222],
            120: [0, 0.43056, 0, 0, 0.52778],
            121: [0.19444, 0.43056, 0.01389, 0, 0.52778],
            122: Vn,
            123: Nn,
            124: qn,
            125: Nn,
            126: [0.35, 0.31786, 0, 0, 0.5],
            160: he,
            163: [0, 0.69444, 0, 0, 0.76909],
            167: Qn,
            168: Zn,
            172: [0, 0.43056, 0, 0, 0.66667],
            176: Gn,
            177: Un,
            182: ri,
            184: ir,
            198: [0, 0.68333, 0, 0, 0.90278],
            215: Un,
            216: [0.04861, 0.73194, 0, 0, 0.77778],
            223: Rn,
            230: [0, 0.43056, 0, 0, 0.72222],
            247: Un,
            248: [0.09722, 0.52778, 0, 0, 0.5],
            305: Jn,
            338: [0, 0.68333, 0, 0, 1.01389],
            339: ci,
            567: [0.19444, 0.43056, 0, 0, 0.30556],
            710: Rn,
            711: [0, 0.62847, 0, 0, 0.5],
            713: [0, 0.56778, 0, 0, 0.5],
            714: Rn,
            715: Rn,
            728: Rn,
            729: Xn,
            730: Gn,
            732: Zn,
            733: Rn,
            915: Yn,
            916: oi,
            920: Pn,
            923: [0, 0.68333, 0, 0, 0.69445],
            926: [0, 0.68333, 0, 0, 0.66667],
            928: $n,
            931: Fn,
            933: Pn,
            934: Fn,
            936: Pn,
            937: Fn,
            8211: [0, 0.43056, 0.02778, 0, 0.5],
            8212: [0, 0.43056, 0.02778, 0, 1],
            8216: Kn,
            8217: Kn,
            8220: Rn,
            8221: Rn,
            8224: Qn,
            8225: Qn,
            8230: [0, 0.12, 0, 0, 1.172],
            8242: [0, 0.55556, 0, 0, 0.275],
            8407: [0, 0.71444, 0.15382, 0, 0.5],
            8463: fe,
            8465: ei,
            8467: [0, 0.69444, 0, 0.11111, 0.41667],
            8472: [0.19444, 0.43056, 0, 0.11111, 0.63646],
            8476: ei,
            8501: mi,
            8592: ge,
            8593: ti,
            8594: ge,
            8595: ti,
            8596: ge,
            8597: Nn,
            8598: ni,
            8599: ni,
            8600: ni,
            8601: ni,
            8614: [0.011, 0.511, 0, 0, 1],
            8617: ii,
            8618: ii,
            8636: ge,
            8637: ge,
            8640: ge,
            8641: ge,
            8652: [0.011, 0.671, 0, 0, 1],
            8656: ge,
            8657: ri,
            8658: ge,
            8659: ri,
            8660: ge,
            8661: [0.25, 0.75, 0, 0, 0.61111],
            8704: In,
            8706: [0, 0.69444, 0.05556, 0.08334, 0.5309],
            8707: In,
            8709: ai,
            8711: oi,
            8712: si,
            8715: si,
            8722: Un,
            8723: Un,
            8725: Nn,
            8726: Nn,
            8727: fi,
            8728: li,
            8729: li,
            8730: [0.2, 0.8, 0, 0, 0.83334],
            8733: ci,
            8734: ke,
            8736: Ee,
            8739: qn,
            8741: Nn,
            8743: di,
            8744: di,
            8745: di,
            8746: di,
            8747: [0.19444, 0.69444, 0.11111, 0, 0.41667],
            8764: De,
            8768: [0.19444, 0.69444, 0, 0, 0.27778],
            8771: ui,
            8773: [-0.022, 0.589, 0, 0, 1],
            8776: hi,
            8781: ui,
            8784: [-0.133, 0.67, 0, 0, 0.778],
            8801: ui,
            8804: Ie,
            8805: Ie,
            8810: pi,
            8811: pi,
            8826: Je,
            8827: Je,
            8834: Je,
            8835: Je,
            8838: Ie,
            8839: Ie,
            8846: di,
            8849: Ie,
            8850: Ie,
            8851: di,
            8852: di,
            8853: Un,
            8854: Un,
            8855: Un,
            8856: Un,
            8857: Un,
            8866: mi,
            8867: mi,
            8868: Bn,
            8869: Bn,
            8872: [0.249, 0.75, 0, 0, 0.867],
            8900: li,
            8901: [-0.05555, 0.44445, 0, 0, 0.27778],
            8902: fi,
            8904: [0.005, 0.505, 0, 0, 0.9],
            8942: [0.03, 0.9, 0, 0, 0.278],
            8943: [-0.19, 0.31, 0, 0, 1.172],
            8945: [-0.1, 0.82, 0, 0, 1.282],
            8968: yi,
            8969: yi,
            8970: yi,
            8971: yi,
            8994: gi,
            8995: gi,
            9136: bi,
            9137: bi,
            9651: vi,
            9657: fi,
            9661: vi,
            9667: fi,
            9711: ni,
            9824: xi,
            9825: xi,
            9826: xi,
            9827: xi,
            9837: [0, 0.75, 0, 0, 0.38889],
            9838: wi,
            9839: wi,
            10216: Dn,
            10217: Dn,
            10222: bi,
            10223: bi,
            10229: [0.011, 0.511, 0, 0, 1.609],
            10230: ki,
            10231: [0.011, 0.511, 0, 0, 1.859],
            10232: [0.024, 0.525, 0, 0, 1.609],
            10233: [0.024, 0.525, 0, 0, 1.638],
            10234: [0.024, 0.525, 0, 0, 1.858],
            10236: ki,
            10815: $n,
            10927: Ie,
            10928: Ie,
            57376: _i,
          },
          "Math-BoldItalic": {
            32: he,
            48: Si,
            49: Si,
            50: Si,
            51: Mi,
            52: Mi,
            53: Mi,
            54: vt,
            55: Mi,
            56: vt,
            57: Mi,
            65: _t,
            66: [0, 0.68611, 0.04835, 0, 0.8664],
            67: [0, 0.68611, 0.06979, 0, 0.81694],
            68: [0, 0.68611, 0.03194, 0, 0.93812],
            69: [0, 0.68611, 0.05451, 0, 0.81007],
            70: [0, 0.68611, 0.15972, 0, 0.68889],
            71: [0, 0.68611, 0, 0, 0.88673],
            72: Ai,
            73: [0, 0.68611, 0.07778, 0, 0.51111],
            74: [0, 0.68611, 0.10069, 0, 0.63125],
            75: [0, 0.68611, 0.06979, 0, 0.97118],
            76: Li,
            77: [0, 0.68611, 0.11424, 0, 1.14201],
            78: [0, 0.68611, 0.11424, 0, 0.95034],
            79: [0, 0.68611, 0.03194, 0, 0.83666],
            80: [0, 0.68611, 0.15972, 0, 0.72309],
            81: [0.19444, 0.68611, 0, 0, 0.86861],
            82: [0, 0.68611, 0.00421, 0, 0.87235],
            83: [0, 0.68611, 0.05382, 0, 0.69271],
            84: [0, 0.68611, 0.15972, 0, 0.63663],
            85: [0, 0.68611, 0.11424, 0, 0.80027],
            86: [0, 0.68611, 0.25555, 0, 0.67778],
            87: [0, 0.68611, 0.15972, 0, 1.09305],
            88: [0, 0.68611, 0.07778, 0, 0.94722],
            89: [0, 0.68611, 0.25555, 0, 0.67458],
            90: [0, 0.68611, 0.06979, 0, 0.77257],
            97: [0, 0.44444, 0, 0, 0.63287],
            98: [0, 0.69444, 0, 0, 0.52083],
            99: [0, 0.44444, 0, 0, 0.51342],
            100: [0, 0.69444, 0, 0, 0.60972],
            101: [0, 0.44444, 0, 0, 0.55361],
            102: [0.19444, 0.69444, 0.11042, 0, 0.56806],
            103: [0.19444, 0.44444, 0.03704, 0, 0.5449],
            104: Ci,
            105: [0, 0.69326, 0, 0, 0.4048],
            106: [0.19444, 0.69326, 0.0622, 0, 0.47083],
            107: [0, 0.69444, 0.01852, 0, 0.6037],
            108: [0, 0.69444, 0.0088, 0, 0.34815],
            109: [0, 0.44444, 0, 0, 1.0324],
            110: [0, 0.44444, 0, 0, 0.71296],
            111: Ki,
            112: [0.19444, 0.44444, 0, 0, 0.60092],
            113: [0.19444, 0.44444, 0.03704, 0, 0.54213],
            114: [0, 0.44444, 0.03194, 0, 0.5287],
            115: [0, 0.44444, 0, 0, 0.53125],
            116: [0, 0.63492, 0, 0, 0.41528],
            117: [0, 0.44444, 0, 0, 0.68102],
            118: [0, 0.44444, 0.03704, 0, 0.56666],
            119: [0, 0.44444, 0.02778, 0, 0.83148],
            120: [0, 0.44444, 0, 0, 0.65903],
            121: [0.19444, 0.44444, 0.03704, 0, 0.59028],
            122: [0, 0.44444, 0.04213, 0, 0.55509],
            160: he,
            915: [0, 0.68611, 0.15972, 0, 0.65694],
            916: Ht,
            920: [0, 0.68611, 0.03194, 0, 0.86722],
            923: zi,
            926: [0, 0.68611, 0.07458, 0, 0.84125],
            928: Ai,
            931: [0, 0.68611, 0.05451, 0, 0.88507],
            933: [0, 0.68611, 0.15972, 0, 0.67083],
            934: Ei,
            936: [0, 0.68611, 0.11653, 0, 0.71402],
            937: [0, 0.68611, 0.04835, 0, 0.8789],
            945: [0, 0.44444, 0, 0, 0.76064],
            946: [0.19444, 0.69444, 0.03403, 0, 0.65972],
            947: [0.19444, 0.44444, 0.06389, 0, 0.59003],
            948: [0, 0.69444, 0.03819, 0, 0.52222],
            949: [0, 0.44444, 0, 0, 0.52882],
            950: [0.19444, 0.69444, 0.06215, 0, 0.50833],
            951: [0.19444, 0.44444, 0.03704, 0, 0.6],
            952: [0, 0.69444, 0.03194, 0, 0.5618],
            953: [0, 0.44444, 0, 0, 0.41204],
            954: [0, 0.44444, 0, 0, 0.66759],
            955: [0, 0.69444, 0, 0, 0.67083],
            956: [0.19444, 0.44444, 0, 0, 0.70787],
            957: [0, 0.44444, 0.06898, 0, 0.57685],
            958: [0.19444, 0.69444, 0.03021, 0, 0.50833],
            959: Ki,
            960: [0, 0.44444, 0.03704, 0, 0.68241],
            961: Di,
            962: [0.09722, 0.44444, 0.07917, 0, 0.42361],
            963: [0, 0.44444, 0.03704, 0, 0.68588],
            964: [0, 0.44444, 0.13472, 0, 0.52083],
            965: [0, 0.44444, 0.03704, 0, 0.63055],
            966: [0.19444, 0.44444, 0, 0, 0.74722],
            967: [0.19444, 0.44444, 0, 0, 0.71805],
            968: [0.19444, 0.69444, 0.03704, 0, 0.75833],
            969: [0, 0.44444, 0.03704, 0, 0.71782],
            977: [0, 0.69444, 0, 0, 0.69155],
            981: [0.19444, 0.69444, 0, 0, 0.7125],
            982: [0, 0.44444, 0.03194, 0, 0.975],
            1009: Di,
            1013: [0, 0.44444, 0, 0, 0.48333],
            57649: [0, 0.44444, 0, 0, 0.39352],
            57911: [0.19444, 0.44444, 0, 0, 0.43889],
          },
          "Math-Italic": {
            32: he,
            48: jn,
            49: jn,
            50: jn,
            51: Ti,
            52: Ti,
            53: Ti,
            54: Tn,
            55: Ti,
            56: Tn,
            57: Ti,
            65: [0, 0.68333, 0, 0.13889, 0.75],
            66: [0, 0.68333, 0.05017, 0.08334, 0.75851],
            67: [0, 0.68333, 0.07153, 0.08334, 0.71472],
            68: [0, 0.68333, 0.02778, 0.05556, 0.82792],
            69: [0, 0.68333, 0.05764, 0.08334, 0.7382],
            70: [0, 0.68333, 0.13889, 0.08334, 0.64306],
            71: [0, 0.68333, 0, 0.08334, 0.78625],
            72: $i,
            73: [0, 0.68333, 0.07847, 0.11111, 0.43958],
            74: [0, 0.68333, 0.09618, 0.16667, 0.55451],
            75: [0, 0.68333, 0.07153, 0.05556, 0.84931],
            76: [0, 0.68333, 0, 0.02778, 0.68056],
            77: [0, 0.68333, 0.10903, 0.08334, 0.97014],
            78: [0, 0.68333, 0.10903, 0.08334, 0.80347],
            79: Bi,
            80: [0, 0.68333, 0.13889, 0.08334, 0.64201],
            81: [0.19444, 0.68333, 0, 0.08334, 0.79056],
            82: [0, 0.68333, 0.00773, 0.08334, 0.75929],
            83: [0, 0.68333, 0.05764, 0.08334, 0.6132],
            84: [0, 0.68333, 0.13889, 0.08334, 0.58438],
            85: [0, 0.68333, 0.10903, 0.02778, 0.68278],
            86: [0, 0.68333, 0.22222, 0, 0.58333],
            87: [0, 0.68333, 0.13889, 0, 0.94445],
            88: [0, 0.68333, 0.07847, 0.08334, 0.82847],
            89: [0, 0.68333, 0.22222, 0, 0.58056],
            90: [0, 0.68333, 0.07153, 0.08334, 0.68264],
            97: [0, 0.43056, 0, 0, 0.52859],
            98: [0, 0.69444, 0, 0, 0.42917],
            99: [0, 0.43056, 0, 0.05556, 0.43276],
            100: [0, 0.69444, 0, 0.16667, 0.52049],
            101: [0, 0.43056, 0, 0.05556, 0.46563],
            102: [0.19444, 0.69444, 0.10764, 0.16667, 0.48959],
            103: [0.19444, 0.43056, 0.03588, 0.02778, 0.47697],
            104: [0, 0.69444, 0, 0, 0.57616],
            105: [0, 0.65952, 0, 0, 0.34451],
            106: [0.19444, 0.65952, 0.05724, 0, 0.41181],
            107: [0, 0.69444, 0.03148, 0, 0.5206],
            108: [0, 0.69444, 0.01968, 0.08334, 0.29838],
            109: [0, 0.43056, 0, 0, 0.87801],
            110: [0, 0.43056, 0, 0, 0.60023],
            111: Pi,
            112: [0.19444, 0.43056, 0, 0.08334, 0.50313],
            113: [0.19444, 0.43056, 0.03588, 0.08334, 0.44641],
            114: [0, 0.43056, 0.02778, 0.05556, 0.45116],
            115: [0, 0.43056, 0, 0.05556, 0.46875],
            116: [0, 0.61508, 0, 0.08334, 0.36111],
            117: [0, 0.43056, 0, 0.02778, 0.57246],
            118: [0, 0.43056, 0.03588, 0.02778, 0.48472],
            119: [0, 0.43056, 0.02691, 0.08334, 0.71592],
            120: [0, 0.43056, 0, 0.02778, 0.57153],
            121: [0.19444, 0.43056, 0.03588, 0.05556, 0.49028],
            122: [0, 0.43056, 0.04398, 0.05556, 0.46505],
            160: he,
            915: [0, 0.68333, 0.13889, 0.08334, 0.61528],
            916: [0, 0.68333, 0, 0.16667, 0.83334],
            920: Bi,
            923: [0, 0.68333, 0, 0.16667, 0.69445],
            926: [0, 0.68333, 0.07569, 0.08334, 0.74236],
            928: $i,
            931: [0, 0.68333, 0.05764, 0.08334, 0.77986],
            933: [0, 0.68333, 0.13889, 0.05556, 0.58333],
            934: [0, 0.68333, 0, 0.08334, 0.66667],
            936: [0, 0.68333, 0.11, 0.05556, 0.61222],
            937: [0, 0.68333, 0.05017, 0.08334, 0.7724],
            945: [0, 0.43056, 0.0037, 0.02778, 0.6397],
            946: [0.19444, 0.69444, 0.05278, 0.08334, 0.56563],
            947: [0.19444, 0.43056, 0.05556, 0, 0.51773],
            948: [0, 0.69444, 0.03785, 0.05556, 0.44444],
            949: [0, 0.43056, 0, 0.08334, 0.46632],
            950: [0.19444, 0.69444, 0.07378, 0.08334, 0.4375],
            951: [0.19444, 0.43056, 0.03588, 0.05556, 0.49653],
            952: [0, 0.69444, 0.02778, 0.08334, 0.46944],
            953: [0, 0.43056, 0, 0.05556, 0.35394],
            954: [0, 0.43056, 0, 0, 0.57616],
            955: [0, 0.69444, 0, 0, 0.58334],
            956: [0.19444, 0.43056, 0, 0.02778, 0.60255],
            957: [0, 0.43056, 0.06366, 0.02778, 0.49398],
            958: [0.19444, 0.69444, 0.04601, 0.11111, 0.4375],
            959: Pi,
            960: [0, 0.43056, 0.03588, 0, 0.57003],
            961: Oi,
            962: [0.09722, 0.43056, 0.07986, 0.08334, 0.36285],
            963: [0, 0.43056, 0.03588, 0, 0.57141],
            964: [0, 0.43056, 0.1132, 0.02778, 0.43715],
            965: [0, 0.43056, 0.03588, 0.02778, 0.54028],
            966: [0.19444, 0.43056, 0, 0.08334, 0.65417],
            967: [0.19444, 0.43056, 0, 0.05556, 0.62569],
            968: [0.19444, 0.69444, 0.03588, 0.11111, 0.65139],
            969: [0, 0.43056, 0.03588, 0, 0.62245],
            977: [0, 0.69444, 0, 0.08334, 0.59144],
            981: [0.19444, 0.69444, 0, 0.08334, 0.59583],
            982: [0, 0.43056, 0.02778, 0, 0.82813],
            1009: Oi,
            1013: [0, 0.43056, 0, 0.05556, 0.4059],
            57649: [0, 0.43056, 0, 0.02778, 0.32246],
            57911: [0.19444, 0.43056, 0, 0.08334, 0.38403],
          },
          "SansSerif-Bold": {
            32: he,
            33: [0, 0.69444, 0, 0, 0.36667],
            34: er,
            35: [0.19444, 0.69444, 0, 0, 0.91667],
            36: [0.05556, 0.75, 0, 0, 0.55],
            37: [0.05556, 0.75, 0, 0, 1.02912],
            38: [0, 0.69444, 0, 0, 0.83056],
            39: Gi,
            40: Fi,
            41: Fi,
            42: [0, 0.75, 0, 0, 0.55],
            43: [0.11667, 0.61667, 0, 0, 0.85556],
            44: [0.10556, 0.13056, 0, 0, 0.30556],
            45: [0, 0.45833, 0, 0, 0.36667],
            46: [0, 0.13056, 0, 0, 0.30556],
            47: [0.25, 0.75, 0, 0, 0.55],
            48: Ni,
            49: Ni,
            50: Ni,
            51: Ni,
            52: Ni,
            53: Ni,
            54: Ni,
            55: Ni,
            56: Ni,
            57: Ni,
            58: [0, 0.45833, 0, 0, 0.30556],
            59: [0.10556, 0.45833, 0, 0, 0.30556],
            61: [-0.09375, 0.40625, 0, 0, 0.85556],
            63: Ii,
            64: qi,
            65: qi,
            66: qi,
            67: Vi,
            68: Ri,
            69: [0, 0.69444, 0, 0, 0.64167],
            70: mi,
            71: qi,
            72: Ri,
            73: [0, 0.69444, 0, 0, 0.33056],
            74: Ii,
            75: ji,
            76: Zi,
            77: [0, 0.69444, 0, 0, 0.97778],
            78: Ri,
            79: Ri,
            80: Vi,
            81: [0.10556, 0.69444, 0, 0, 0.79445],
            82: Vi,
            83: mi,
            84: qi,
            85: ji,
            86: [0, 0.69444, 0.01528, 0, 0.73334],
            87: [0, 0.69444, 0.01528, 0, 1.03889],
            88: qi,
            89: [0, 0.69444, 0.0275, 0, 0.73334],
            90: Yi,
            91: Hi,
            93: Hi,
            94: Ni,
            95: [0.35, 0.10833, 0.03056, 0, 0.55],
            97: [0, 0.45833, 0, 0, 0.525],
            98: Wi,
            99: [0, 0.45833, 0, 0, 0.48889],
            100: Wi,
            101: [0, 0.45833, 0, 0, 0.51111],
            102: [0, 0.69444, 0.07639, 0, 0.33611],
            103: [0.19444, 0.45833, 0.01528, 0, 0.55],
            104: Wi,
            105: Ui,
            106: [0.19444, 0.69444, 0, 0, 0.28611],
            107: [0, 0.69444, 0, 0, 0.53056],
            108: Ui,
            109: [0, 0.45833, 0, 0, 0.86667],
            110: Xi,
            111: [0, 0.45833, 0, 0, 0.55],
            112: Ji,
            113: Ji,
            114: [0, 0.45833, 0.01528, 0, 0.37222],
            115: [0, 0.45833, 0, 0, 0.42167],
            116: [0, 0.58929, 0, 0, 0.40417],
            117: Xi,
            118: [0, 0.45833, 0.01528, 0, 0.5],
            119: [0, 0.45833, 0.01528, 0, 0.74445],
            120: [0, 0.45833, 0, 0, 0.5],
            121: [0.19444, 0.45833, 0.01528, 0, 0.5],
            122: [0, 0.45833, 0, 0, 0.47639],
            126: [0.35, 0.34444, 0, 0, 0.55],
            160: he,
            168: Ni,
            176: qi,
            180: Ni,
            184: [0.17014, 0, 0, 0, 0.48889],
            305: [0, 0.45833, 0, 0, 0.25556],
            567: [0.19444, 0.45833, 0, 0, 0.28611],
            710: Ni,
            711: [0, 0.63542, 0, 0, 0.55],
            713: [0, 0.63778, 0, 0, 0.55],
            728: Ni,
            729: Gi,
            730: qi,
            732: Ni,
            733: Ni,
            915: Zi,
            916: [0, 0.69444, 0, 0, 0.91667],
            920: Qi,
            923: Yi,
            926: qi,
            928: Ri,
            931: Ri,
            933: Qi,
            934: Ri,
            936: Qi,
            937: Ri,
            8211: [0, 0.45833, 0.03056, 0, 0.55],
            8212: [0, 0.45833, 0.03056, 0, 1.10001],
            8216: Gi,
            8217: Gi,
            8220: er,
            8221: er,
          },
          "SansSerif-Italic": {
            32: he,
            33: [0, 0.69444, 0.05733, 0, 0.31945],
            34: cr,
            35: [0.19444, 0.69444, 0.05087, 0, 0.83334],
            36: [0.05556, 0.75, 0.11156, 0, 0.5],
            37: [0.05556, 0.75, 0.03126, 0, 0.83334],
            38: [0, 0.69444, 0.03058, 0, 0.75834],
            39: lr,
            40: [0.25, 0.75, 0.13164, 0, 0.38889],
            41: [0.25, 0.75, 0.02536, 0, 0.38889],
            42: [0, 0.75, 0.11775, 0, 0.5],
            43: [0.08333, 0.58333, 0.02536, 0, 0.77778],
            44: pr,
            45: [0, 0.44444, 0.01946, 0, 0.33333],
            46: mr,
            47: [0.25, 0.75, 0.13164, 0, 0.5],
            48: tr,
            49: tr,
            50: tr,
            51: tr,
            52: tr,
            53: tr,
            54: tr,
            55: tr,
            56: tr,
            57: tr,
            58: [0, 0.44444, 0.02502, 0, 0.27778],
            59: [0.125, 0.44444, 0.02502, 0, 0.27778],
            61: [-0.13, 0.37, 0.05087, 0, 0.77778],
            63: [0, 0.69444, 0.11809, 0, 0.47222],
            64: [0, 0.69444, 0.07555, 0, 0.66667],
            65: gr,
            66: [0, 0.69444, 0.08293, 0, 0.66667],
            67: [0, 0.69444, 0.11983, 0, 0.63889],
            68: [0, 0.69444, 0.07555, 0, 0.72223],
            69: [0, 0.69444, 0.11983, 0, 0.59722],
            70: [0, 0.69444, 0.13372, 0, 0.56945],
            71: [0, 0.69444, 0.11983, 0, 0.66667],
            72: nr,
            73: [0, 0.69444, 0.13372, 0, 0.27778],
            74: [0, 0.69444, 0.08094, 0, 0.47222],
            75: [0, 0.69444, 0.11983, 0, 0.69445],
            76: vr,
            77: [0, 0.69444, 0.08094, 0, 0.875],
            78: nr,
            79: [0, 0.69444, 0.07555, 0, 0.73611],
            80: [0, 0.69444, 0.08293, 0, 0.63889],
            81: [0.125, 0.69444, 0.07555, 0, 0.73611],
            82: [0, 0.69444, 0.08293, 0, 0.64584],
            83: [0, 0.69444, 0.09205, 0, 0.55556],
            84: [0, 0.69444, 0.13372, 0, 0.68056],
            85: [0, 0.69444, 0.08094, 0, 0.6875],
            86: [0, 0.69444, 0.1615, 0, 0.66667],
            87: [0, 0.69444, 0.1615, 0, 0.94445],
            88: [0, 0.69444, 0.13372, 0, 0.66667],
            89: [0, 0.69444, 0.17261, 0, 0.66667],
            90: [0, 0.69444, 0.11983, 0, 0.61111],
            91: [0.25, 0.75, 0.15942, 0, 0.28889],
            93: [0.25, 0.75, 0.08719, 0, 0.28889],
            94: rr,
            95: [0.35, 0.09444, 0.08616, 0, 0.5],
            97: [0, 0.44444, 0.00981, 0, 0.48056],
            98: [0, 0.69444, 0.03057, 0, 0.51667],
            99: [0, 0.44444, 0.08336, 0, 0.44445],
            100: [0, 0.69444, 0.09483, 0, 0.51667],
            101: [0, 0.44444, 0.06778, 0, 0.44445],
            102: [0, 0.69444, 0.21705, 0, 0.30556],
            103: [0.19444, 0.44444, 0.10836, 0, 0.5],
            104: [0, 0.69444, 0.01778, 0, 0.51667],
            105: [0, 0.67937, 0.09718, 0, 0.23889],
            106: [0.19444, 0.67937, 0.09162, 0, 0.26667],
            107: [0, 0.69444, 0.08336, 0, 0.48889],
            108: [0, 0.69444, 0.09483, 0, 0.23889],
            109: [0, 0.44444, 0.01778, 0, 0.79445],
            110: [0, 0.44444, 0.01778, 0, 0.51667],
            111: [0, 0.44444, 0.06613, 0, 0.5],
            112: [0.19444, 0.44444, 0.0389, 0, 0.51667],
            113: [0.19444, 0.44444, 0.04169, 0, 0.51667],
            114: [0, 0.44444, 0.10836, 0, 0.34167],
            115: [0, 0.44444, 0.0778, 0, 0.38333],
            116: [0, 0.57143, 0.07225, 0, 0.36111],
            117: [0, 0.44444, 0.04169, 0, 0.51667],
            118: [0, 0.44444, 0.10836, 0, 0.46111],
            119: [0, 0.44444, 0.10836, 0, 0.68334],
            120: [0, 0.44444, 0.09169, 0, 0.46111],
            121: [0.19444, 0.44444, 0.10836, 0, 0.46111],
            122: [0, 0.44444, 0.08752, 0, 0.43472],
            126: [0.35, 0.32659, 0.08826, 0, 0.5],
            160: he,
            168: [0, 0.67937, 0.06385, 0, 0.5],
            176: ar,
            184: ir,
            305: [0, 0.44444, 0.04169, 0, 0.23889],
            567: [0.19444, 0.44444, 0.04169, 0, 0.26667],
            710: rr,
            711: [0, 0.63194, 0.08432, 0, 0.5],
            713: [0, 0.60889, 0.08776, 0, 0.5],
            714: or,
            715: Rn,
            728: [0, 0.69444, 0.09483, 0, 0.5],
            729: [0, 0.67937, 0.07774, 0, 0.27778],
            730: ar,
            732: [0, 0.67659, 0.08826, 0, 0.5],
            733: or,
            915: [0, 0.69444, 0.13372, 0, 0.54167],
            916: Cr,
            920: [0, 0.69444, 0.07555, 0, 0.77778],
            923: mi,
            926: [0, 0.69444, 0.12816, 0, 0.66667],
            928: nr,
            931: [0, 0.69444, 0.11983, 0, 0.72222],
            933: sr,
            934: [0, 0.69444, 0.04603, 0, 0.72222],
            936: sr,
            937: [0, 0.69444, 0.08293, 0, 0.72222],
            8211: [0, 0.44444, 0.08616, 0, 0.5],
            8212: [0, 0.44444, 0.08616, 0, 1],
            8216: lr,
            8217: lr,
            8220: [0, 0.69444, 0.14205, 0, 0.5],
            8221: cr,
          },
          "SansSerif-Regular": {
            32: he,
            33: [0, 0.69444, 0, 0, 0.31945],
            34: Rn,
            35: dr,
            36: ai,
            37: ur,
            38: [0, 0.69444, 0, 0, 0.75834],
            39: Kn,
            40: Dn,
            41: Dn,
            42: hr,
            43: Un,
            44: pr,
            45: [0, 0.44444, 0, 0, 0.33333],
            46: mr,
            47: Nn,
            48: fr,
            49: fr,
            50: fr,
            51: fr,
            52: fr,
            53: fr,
            54: fr,
            55: fr,
            56: fr,
            57: fr,
            58: [0, 0.44444, 0, 0, 0.27778],
            59: [0.125, 0.44444, 0, 0, 0.27778],
            61: [-0.13, 0.37, 0, 0, 0.77778],
            63: yr,
            64: gr,
            65: gr,
            66: gr,
            67: Lt,
            68: [0, 0.69444, 0, 0, 0.72223],
            69: br,
            70: [0, 0.69444, 0, 0, 0.56945],
            71: gr,
            72: xr,
            73: Kn,
            74: yr,
            75: [0, 0.69444, 0, 0, 0.69445],
            76: vr,
            77: [0, 0.69444, 0, 0, 0.875],
            78: xr,
            79: [0, 0.69444, 0, 0, 0.73611],
            80: Lt,
            81: [0.125, 0.69444, 0, 0, 0.73611],
            82: [0, 0.69444, 0, 0, 0.64584],
            83: In,
            84: [0, 0.69444, 0, 0, 0.68056],
            85: [0, 0.69444, 0, 0, 0.6875],
            86: [0, 0.69444, 0.01389, 0, 0.66667],
            87: [0, 0.69444, 0.01389, 0, 0.94445],
            88: gr,
            89: [0, 0.69444, 0.025, 0, 0.66667],
            90: mi,
            91: wr,
            93: wr,
            94: Rn,
            95: [0.35, 0.09444, 0.02778, 0, 0.5],
            97: [0, 0.44444, 0, 0, 0.48056],
            98: kr,
            99: _r,
            100: kr,
            101: _r,
            102: [0, 0.69444, 0.06944, 0, 0.30556],
            103: [0.19444, 0.44444, 0.01389, 0, 0.5],
            104: kr,
            105: [0, 0.67937, 0, 0, 0.23889],
            106: [0.19444, 0.67937, 0, 0, 0.26667],
            107: [0, 0.69444, 0, 0, 0.48889],
            108: [0, 0.69444, 0, 0, 0.23889],
            109: [0, 0.44444, 0, 0, 0.79445],
            110: Lr,
            111: [0, 0.44444, 0, 0, 0.5],
            112: Sr,
            113: Sr,
            114: [0, 0.44444, 0.01389, 0, 0.34167],
            115: Mr,
            116: [0, 0.57143, 0, 0, 0.36111],
            117: Lr,
            118: [0, 0.44444, 0.01389, 0, 0.46111],
            119: [0, 0.44444, 0.01389, 0, 0.68334],
            120: [0, 0.44444, 0, 0, 0.46111],
            121: [0.19444, 0.44444, 0.01389, 0, 0.46111],
            122: [0, 0.44444, 0, 0, 0.43472],
            126: [0.35, 0.32659, 0, 0, 0.5],
            160: he,
            168: [0, 0.67937, 0, 0, 0.5],
            176: gr,
            184: ir,
            305: [0, 0.44444, 0, 0, 0.23889],
            567: [0.19444, 0.44444, 0, 0, 0.26667],
            710: Rn,
            711: [0, 0.63194, 0, 0, 0.5],
            713: [0, 0.60889, 0, 0, 0.5],
            714: Rn,
            715: Rn,
            728: Rn,
            729: [0, 0.67937, 0, 0, 0.27778],
            730: gr,
            732: [0, 0.67659, 0, 0, 0.5],
            733: Rn,
            915: vr,
            916: Cr,
            920: Bn,
            923: mi,
            926: gr,
            928: xr,
            931: ei,
            933: Bn,
            934: ei,
            936: Bn,
            937: ei,
            8211: [0, 0.44444, 0.02778, 0, 0.5],
            8212: [0, 0.44444, 0.02778, 0, 1],
            8216: Kn,
            8217: Kn,
            8220: Rn,
            8221: Rn,
          },
          "Script-Regular": {
            32: he,
            65: [0, 0.7, 0.22925, 0, 0.80253],
            66: [0, 0.7, 0.04087, 0, 0.90757],
            67: [0, 0.7, 0.1689, 0, 0.66619],
            68: [0, 0.7, 0.09371, 0, 0.77443],
            69: [0, 0.7, 0.18583, 0, 0.56162],
            70: [0, 0.7, 0.13634, 0, 0.89544],
            71: [0, 0.7, 0.17322, 0, 0.60961],
            72: [0, 0.7, 0.29694, 0, 0.96919],
            73: [0, 0.7, 0.19189, 0, 0.80907],
            74: [0.27778, 0.7, 0.19189, 0, 1.05159],
            75: [0, 0.7, 0.31259, 0, 0.91364],
            76: [0, 0.7, 0.19189, 0, 0.87373],
            77: [0, 0.7, 0.15981, 0, 1.08031],
            78: [0, 0.7, 0.3525, 0, 0.9015],
            79: [0, 0.7, 0.08078, 0, 0.73787],
            80: [0, 0.7, 0.08078, 0, 1.01262],
            81: [0, 0.7, 0.03305, 0, 0.88282],
            82: [0, 0.7, 0.06259, 0, 0.85],
            83: [0, 0.7, 0.19189, 0, 0.86767],
            84: [0, 0.7, 0.29087, 0, 0.74697],
            85: [0, 0.7, 0.25815, 0, 0.79996],
            86: [0, 0.7, 0.27523, 0, 0.62204],
            87: [0, 0.7, 0.27523, 0, 0.80532],
            88: [0, 0.7, 0.26006, 0, 0.94445],
            89: [0, 0.7, 0.2939, 0, 0.70961],
            90: [0, 0.7, 0.24037, 0, 0.8212],
            160: he,
          },
          "Size1-Regular": {
            32: he,
            40: zr,
            41: zr,
            47: Ar,
            91: Er,
            92: Ar,
            93: Er,
            123: Kr,
            125: Kr,
            160: he,
            710: Dr,
            732: Dr,
            770: Dr,
            771: Dr,
            8214: [-99e-5, 0.601, 0, 0, 0.77778],
            8593: Tr,
            8595: Tr,
            8657: Br,
            8659: Br,
            8719: $r,
            8720: $r,
            8721: [0.25001, 0.75, 0, 0, 1.05556],
            8730: [0.35001, 0.85, 0, 0, 1],
            8739: [-0.00599, 0.606, 0, 0, 0.33333],
            8741: [-0.00599, 0.606, 0, 0, 0.55556],
            8747: Or,
            8748: Pr,
            8749: Pr,
            8750: Or,
            8896: Fr,
            8897: Fr,
            8898: Fr,
            8899: Fr,
            8968: Nr,
            8969: Nr,
            8970: Nr,
            8971: Nr,
            9168: pa,
            10216: Nr,
            10217: Nr,
            10752: qr,
            10753: qr,
            10754: qr,
            10756: Fr,
            10758: Fr,
          },
          "Size2-Regular": {
            32: he,
            40: Rr,
            41: Rr,
            47: Ir,
            91: Vr,
            92: Ir,
            93: Vr,
            123: jr,
            125: jr,
            160: he,
            710: Hr,
            732: Hr,
            770: Hr,
            771: Hr,
            8719: Wr,
            8720: Wr,
            8721: [0.55001, 1.05, 0, 0, 1.44445],
            8730: [0.65002, 1.15, 0, 0, 1],
            8747: Jr,
            8748: Ur,
            8749: Ur,
            8750: Jr,
            8896: Xr,
            8897: Xr,
            8898: Xr,
            8899: Xr,
            8968: Gr,
            8969: Gr,
            8970: Gr,
            8971: Gr,
            10216: Zr,
            10217: Zr,
            10752: Yr,
            10753: Yr,
            10754: Yr,
            10756: Xr,
            10758: Xr,
          },
          "Size3-Regular": {
            32: he,
            40: Qr,
            41: Qr,
            47: ea,
            91: ta,
            92: ea,
            93: ta,
            123: na,
            125: na,
            160: he,
            710: ia,
            732: ia,
            770: ia,
            771: ia,
            8730: [0.95003, 1.45, 0, 0, 1],
            8968: ra,
            8969: ra,
            8970: ra,
            8971: ra,
            10216: na,
            10217: na,
          },
          "Size4-Regular": {
            32: he,
            40: aa,
            41: aa,
            47: oa,
            91: sa,
            92: oa,
            93: sa,
            123: la,
            125: la,
            160: he,
            710: ca,
            732: ca,
            770: ca,
            771: ca,
            8730: [1.25003, 1.75, 0, 0, 1],
            8968: da,
            8969: da,
            8970: da,
            8971: da,
            9115: ua,
            9116: ha,
            9117: ua,
            9118: ua,
            9119: ha,
            9120: ua,
            9121: ma,
            9122: pa,
            9123: ma,
            9124: ma,
            9125: pa,
            9126: ma,
            9127: fa,
            9128: ya,
            9129: ga,
            9130: [0, 0.3, 0, 0, 0.88889],
            9131: fa,
            9132: ya,
            9133: ga,
            9143: [0.88502, 0.915, 0, 0, 1.05556],
            10216: la,
            10217: la,
            57344: ba,
            57345: ba,
            57680: va,
            57681: va,
            57682: va,
            57683: va,
          },
          "Typewriter-Regular": {
            32: La,
            33: xa,
            34: xa,
            35: xa,
            36: wa,
            37: wa,
            38: xa,
            39: xa,
            40: wa,
            41: wa,
            42: [0, 0.52083, 0, 0, 0.525],
            43: ka,
            44: [0.13889, 0.125, 0, 0, 0.525],
            45: ka,
            46: [0, 0.125, 0, 0, 0.525],
            47: wa,
            48: xa,
            49: xa,
            50: xa,
            51: xa,
            52: xa,
            53: xa,
            54: xa,
            55: xa,
            56: xa,
            57: xa,
            58: Sa,
            59: [0.13889, 0.43056, 0, 0, 0.525],
            60: _a,
            61: [-0.19549, 0.41562, 0, 0, 0.525],
            62: _a,
            63: xa,
            64: xa,
            65: xa,
            66: xa,
            67: xa,
            68: xa,
            69: xa,
            70: xa,
            71: xa,
            72: xa,
            73: xa,
            74: xa,
            75: xa,
            76: xa,
            77: xa,
            78: xa,
            79: xa,
            80: xa,
            81: [0.13889, 0.61111, 0, 0, 0.525],
            82: xa,
            83: xa,
            84: xa,
            85: xa,
            86: xa,
            87: xa,
            88: xa,
            89: xa,
            90: xa,
            91: wa,
            92: wa,
            93: wa,
            94: xa,
            95: [0.09514, 0, 0, 0, 0.525],
            96: xa,
            97: Sa,
            98: xa,
            99: Sa,
            100: xa,
            101: Sa,
            102: xa,
            103: Ma,
            104: xa,
            105: xa,
            106: [0.22222, 0.61111, 0, 0, 0.525],
            107: xa,
            108: xa,
            109: Sa,
            110: Sa,
            111: Sa,
            112: Ma,
            113: Ma,
            114: Sa,
            115: Sa,
            116: [0, 0.55358, 0, 0, 0.525],
            117: Sa,
            118: Sa,
            119: Sa,
            120: Sa,
            121: Ma,
            122: Sa,
            123: wa,
            124: wa,
            125: wa,
            126: xa,
            127: xa,
            160: La,
            176: xa,
            184: [0.19445, 0, 0, 0, 0.525],
            305: Sa,
            567: Ma,
            711: [0, 0.56597, 0, 0, 0.525],
            713: [0, 0.56555, 0, 0, 0.525],
            714: xa,
            715: xa,
            728: xa,
            730: xa,
            770: xa,
            771: xa,
            776: xa,
            915: xa,
            916: xa,
            920: xa,
            923: xa,
            926: xa,
            928: xa,
            931: xa,
            933: xa,
            934: xa,
            936: xa,
            937: xa,
            8216: xa,
            8217: xa,
            8242: xa,
            9251: [0.11111, 0.21944, 0, 0, 0.525],
          },
        },
        za = /[\u3040-\u309F]|[\u30A0-\u30FF]|[\u4E00-\u9FAF]|[\uAC00-\uD7AF]/,
        Aa = 10,
        Ea = 0.25,
        Ka = 0.431,
        Da = {
          slant: [0.25, 0.25, 0.25],
          space: [0, 0, 0],
          stretch: [0, 0, 0],
          shrink: [0, 0, 0],
          xHeight: [Ka, Ka, Ka],
          quad: [1, 1.171, 1.472],
          extraSpace: [0, 0, 0],
          num1: [0.5, 0.732, 0.925],
          num2: [0.394, 0.384, 0.5],
          num3: [0.444, 0.471, 0.504],
          denom1: [0.686, 0.752, 1.025],
          denom2: [0.345, 0.344, 0.532],
          sup1: [0.413, 0.503, 0.504],
          sup2: [0.363, 0.431, 0.404],
          sup3: [0.289, 0.286, 0.294],
          sub1: [0.15, 0.143, 0.2],
          sub2: [0.247, 0.286, 0.4],
          supDrop: [0.386, 0.353, 0.494],
          subDrop: [0.05, 0.071, 0.1],
          delim1: [2.39, 1.7, 1.98],
          delim2: [1.01, 1.157, 1.42],
          axisHeight: [Ea, Ea, Ea],
          defaultRuleThickness: [0.04, 0.049, 0.049],
          bigOpSpacing1: [0.111, 0.111, 0.111],
          bigOpSpacing2: [0.166, 0.166, 0.166],
          bigOpSpacing3: [0.2, 0.2, 0.2],
          bigOpSpacing4: [0.6, 0.611, 0.611],
          bigOpSpacing5: [0.1, 0.143, 0.143],
          sqrtRuleThickness: [0.04, 0.04, 0.04],
        },
        Ta = [0, 0.5, 0.7, 0.8, 0.9, 1, 1.2, 1.44, 1.728, 2.074, 2.488],
        Ba = {
          "\xa0": " ",
          "\u200b": " ",
          "\xc5": "A",
          "\xc7": "C",
          "\xd0": "D",
          "\xde": "o",
          "\xe5": "a",
          "\xe7": "c",
          "\xf0": "d",
          "\xfe": "o",
          "\u0410": "A",
          "\u0411": "B",
          "\u0412": "B",
          "\u0413": "F",
          "\u0414": "A",
          "\u0415": "E",
          "\u0416": "K",
          "\u0417": "3",
          "\u0418": "N",
          "\u0419": "N",
          "\u041a": "K",
          "\u041b": "N",
          "\u041c": "M",
          "\u041d": "H",
          "\u041e": "O",
          "\u041f": "N",
          "\u0420": "P",
          "\u0421": "C",
          "\u0422": "T",
          "\u0423": "y",
          "\u0424": "O",
          "\u0425": "X",
          "\u0426": "U",
          "\u0427": "h",
          "\u0428": "W",
          "\u0429": "W",
          "\u042a": "B",
          "\u042b": "X",
          "\u042c": "B",
          "\u042d": "3",
          "\u042e": "X",
          "\u042f": "R",
          "\u0430": "a",
          "\u0431": "b",
          "\u0432": "a",
          "\u0433": "r",
          "\u0434": "y",
          "\u0435": "e",
          "\u0436": "m",
          "\u0437": "e",
          "\u0438": "n",
          "\u0439": "n",
          "\u043a": "n",
          "\u043b": "n",
          "\u043c": "m",
          "\u043d": "n",
          "\u043e": "o",
          "\u043f": "n",
          "\u0440": "p",
          "\u0441": "c",
          "\u0442": "o",
          "\u0443": "y",
          "\u0444": "b",
          "\u0445": "x",
          "\u0446": "n",
          "\u0447": "n",
          "\u0448": "w",
          "\u0449": "w",
          "\u044a": "a",
          "\u044b": "m",
          "\u044c": "a",
          "\u044d": "e",
          "\u044e": "m",
          "\u044f": "r",
        };
      function $a(e, t) {
        void 0 === e && (e = 77);
        let n = Ca[t][e];
        if (n)
          return {
            defaultMetrics: !1,
            depth: n[0],
            height: n[1],
            italic: n[2],
            skew: n[3],
            width: n[4],
          };
        if (11034 === e)
          return {
            defaultMetrics: !0,
            depth: 0.2,
            height: 0.8,
            italic: 0,
            skew: 0,
            width: 0.8,
          };
        let i = String.fromCodePoint(e);
        if (i in Ba) e = Ba[i].codePointAt(0);
        else if (za.test(i))
          return (
            (e = 77),
            {
              defaultMetrics: !0,
              depth: 0.2,
              height: 0.9,
              italic: 0,
              skew: 0,
              width: 1,
            }
          );
        return {
          defaultMetrics: !0,
          depth: 0.2,
          height: 0.7,
          italic: 0,
          skew: 0,
          width: 0.8,
        };
      }
      var Pa = {
          overrightarrow: [["rightarrow"], 0.888, 522, "xMaxYMin"],
          overleftarrow: [["leftarrow"], 0.888, 522, "xMinYMin"],
          underrightarrow: [["rightarrow"], 0.888, 522, "xMaxYMin"],
          underleftarrow: [["leftarrow"], 0.888, 522, "xMinYMin"],
          xrightarrow: [["rightarrow"], 1.469, 522, "xMaxYMin"],
          longrightarrow: [["rightarrow"], 1.469, 522, "xMaxYMin"],
          xleftarrow: [["leftarrow"], 1.469, 522, "xMinYMin"],
          longleftarrow: [["leftarrow"], 1.469, 522, "xMinYMin"],
          Overrightarrow: [["doublerightarrow"], 0.888, 560, "xMaxYMin"],
          xRightarrow: [["doublerightarrow"], 1.526, 560, "xMaxYMin"],
          xLeftarrow: [["doubleleftarrow"], 1.526, 560, "xMinYMin"],
          overleftharpoon: [["leftharpoon"], 0.888, 522, "xMinYMin"],
          xleftharpoonup: [["leftharpoon"], 0.888, 522, "xMinYMin"],
          xleftharpoondown: [["leftharpoondown"], 0.888, 522, "xMinYMin"],
          overrightharpoon: [["rightharpoon"], 0.888, 522, "xMaxYMin"],
          xrightharpoonup: [["rightharpoon"], 0.888, 522, "xMaxYMin"],
          xrightharpoondown: [["rightharpoondown"], 0.888, 522, "xMaxYMin"],
          xlongequal: [["longequal"], 0.888, 334, "xMinYMin"],
          xtwoheadleftarrow: [["twoheadleftarrow"], 0.888, 334, "xMinYMin"],
          xtwoheadrightarrow: [["twoheadrightarrow"], 0.888, 334, "xMaxYMin"],
          overleftrightarrow: [["leftarrow", "rightarrow"], 0.888, 522],
          overbrace: [["leftbrace", "midbrace", "rightbrace"], 1.6, 548],
          underbrace: [
            ["leftbraceunder", "midbraceunder", "rightbraceunder"],
            1.6,
            548,
          ],
          underleftrightarrow: [["leftarrow", "rightarrow"], 0.888, 522],
          xleftrightarrow: [["leftarrow", "rightarrow"], 1.75, 522],
          longleftrightarrow: [["leftarrow", "rightarrow"], 1.75, 522],
          xLeftrightarrow: [["doubleleftarrow", "doublerightarrow"], 1.75, 560],
          xrightleftharpoons: [
            ["leftharpoondownplus", "rightharpoonplus"],
            1.75,
            716,
          ],
          longrightleftharpoons: [
            ["leftharpoondownplus", "rightharpoonplus"],
            1.75,
            716,
          ],
          xleftrightharpoons: [
            ["leftharpoonplus", "rightharpoondownplus"],
            1.75,
            716,
          ],
          longleftrightharpoons: [
            ["leftharpoonplus", "rightharpoondownplus"],
            1.75,
            716,
          ],
          xhookleftarrow: [["leftarrow", "righthook"], 1.08, 522],
          xhookrightarrow: [["lefthook", "rightarrow"], 1.08, 522],
          overlinesegment: [
            ["leftlinesegment", "rightlinesegment"],
            0.888,
            522,
          ],
          underlinesegment: [
            ["leftlinesegment", "rightlinesegment"],
            0.888,
            522,
          ],
          overgroup: [["leftgroup", "rightgroup"], 0.888, 342],
          undergroup: [["leftgroupunder", "rightgroupunder"], 0.888, 342],
          xmapsto: [["leftmapsto", "rightarrow"], 1.5, 522],
          xtofrom: [["leftToFrom", "rightToFrom"], 1.75, 528],
          xleftrightarrows: [
            ["baraboveleftarrow", "rightarrowabovebar"],
            1.75,
            901,
          ],
          longleftrightarrows: [
            ["baraboveleftarrow", "rightarrowabovebar"],
            1.75,
            901,
          ],
          xRightleftharpoons: [
            ["baraboveshortleftharpoon", "rightharpoonaboveshortbar"],
            1.75,
            716,
          ],
          longRightleftharpoons: [
            ["baraboveshortleftharpoon", "rightharpoonaboveshortbar"],
            1.75,
            716,
          ],
          xLeftrightharpoons: [
            ["shortbaraboveleftharpoon", "shortrightharpoonabovebar"],
            1.75,
            716,
          ],
          longLeftrightharpoons: [
            ["shortbaraboveleftharpoon", "shortrightharpoonabovebar"],
            1.75,
            716,
          ],
        },
        Oa = {
          widehat1: [1062, 239, 0.24],
          widehat2: [2364, 300, 0.3],
          widehat3: [2364, 360, 0.36],
          widehat4: [2364, 420, 0.42],
          widecheck1: [1062, 239, 0.24],
          widecheck2: [2364, 300, 0.3],
          widecheck3: [2364, 360, 0.36],
          widecheck4: [2364, 420, 0.42],
          widetilde1: [600, 260, 0.26],
          widetilde2: [1033, 286, 0.286],
          widetilde3: [2339, 306, 0.306],
          widetilde4: [2340, 312, 0.34],
          overarc: [1061, 159, 0.3],
          underarc: [1061, 159, 0.3],
        },
        Fa = {
          doubleleftarrow:
            "M262 157\nl10-10c34-36 62.7-77 86-123 3.3-8 5-13.3 5-16 0-5.3-6.7-8-20-8-7.3\n 0-12.2.5-14.5 1.5-2.3 1-4.8 4.5-7.5 10.5-49.3 97.3-121.7 169.3-217 216-28\n 14-57.3 25-88 33-6.7 2-11 3.8-13 5.5-2 1.7-3 4.2-3 7.5s1 5.8 3 7.5\nc2 1.7 6.3 3.5 13 5.5 68 17.3 128.2 47.8 180.5 91.5 52.3 43.7 93.8 96.2 124.5\n 157.5 9.3 8 15.3 12.3 18 13h6c12-.7 18-4 18-10 0-2-1.7-7-5-15-23.3-46-52-87\n-86-123l-10-10h399738v-40H218c328 0 0 0 0 0l-10-8c-26.7-20-65.7-43-117-69 2.7\n-2 6-3.7 10-5 36.7-16 72.3-37.3 107-64l10-8h399782v-40z\nm8 0v40h399730v-40zm0 194v40h399730v-40z",
          doublerightarrow:
            "M399738 392l\n-10 10c-34 36-62.7 77-86 123-3.3 8-5 13.3-5 16 0 5.3 6.7 8 20 8 7.3 0 12.2-.5\n 14.5-1.5 2.3-1 4.8-4.5 7.5-10.5 49.3-97.3 121.7-169.3 217-216 28-14 57.3-25 88\n-33 6.7-2 11-3.8 13-5.5 2-1.7 3-4.2 3-7.5s-1-5.8-3-7.5c-2-1.7-6.3-3.5-13-5.5-68\n-17.3-128.2-47.8-180.5-91.5-52.3-43.7-93.8-96.2-124.5-157.5-9.3-8-15.3-12.3-18\n-13h-6c-12 .7-18 4-18 10 0 2 1.7 7 5 15 23.3 46 52 87 86 123l10 10H0v40h399782\nc-328 0 0 0 0 0l10 8c26.7 20 65.7 43 117 69-2.7 2-6 3.7-10 5-36.7 16-72.3 37.3\n-107 64l-10 8H0v40zM0 157v40h399730v-40zm0 194v40h399730v-40z",
          leftarrow:
            "M400000 241H110l3-3c68.7-52.7 113.7-120\n 135-202 4-14.7 6-23 6-25 0-7.3-7-11-21-11-8 0-13.2.8-15.5 2.5-2.3 1.7-4.2 5.8\n-5.5 12.5-1.3 4.7-2.7 10.3-4 17-12 48.7-34.8 92-68.5 130S65.3 228.3 18 247\nc-10 4-16 7.7-18 11 0 8.7 6 14.3 18 17 47.3 18.7 87.8 47 121.5 85S196 441.3 208\n 490c.7 2 1.3 5 2 9s1.2 6.7 1.5 8c.3 1.3 1 3.3 2 6s2.2 4.5 3.5 5.5c1.3 1 3.3\n 1.8 6 2.5s6 1 10 1c14 0 21-3.7 21-11 0-2-2-10.3-6-25-20-79.3-65-146.7-135-202\n l-3-3h399890zM100 241v40h399900v-40z",
          leftbrace:
            "M6 548l-6-6v-35l6-11c56-104 135.3-181.3 238-232 57.3-28.7 117\n-45 179-50h399577v120H403c-43.3 7-81 15-113 26-100.7 33-179.7 91-237 174-2.7\n 5-6 9-10 13-.7 1-7.3 1-20 1H6z",
          leftbraceunder:
            "M0 6l6-6h17c12.688 0 19.313.3 20 1 4 4 7.313 8.3 10 13\n 35.313 51.3 80.813 93.8 136.5 127.5 55.688 33.7 117.188 55.8 184.5 66.5.688\n 0 2 .3 4 1 18.688 2.7 76 4.3 172 5h399450v120H429l-6-1c-124.688-8-235-61.7\n-331-161C60.687 138.7 32.312 99.3 7 54L0 41V6z",
          overarc:
            "M529 0c179 0 524 115 524 115 5 1 9 5 9 10 0 1-1 2-1 3l-4 22c-1 5-5 9-11 9h-2s-338-93-512-92c-174 0-513 92-513 92h-2c-5 0-9-4-11-9l-5-22c-1-6 2-12 8-13 0 0 342-115 520-115z",
          underarc:
            "m 529 160\n  c -179 0 -524 -115 -524 -115\n  c -5 -1 -9 -5 -9 -10\n  c 0 -1 1 -2 1 -3\n  l 4 -22\n  c 1 -5 5 -9 11 -9\n  h 2\n  s 338 93 512 92\n  c 174 0 513 -92 513 -92\n  h 2\n  c 5 0 9 4 11 9\n  l 5 22\n  c 1 6 -2 12 -8 13\n  c 0 0 -342 115 -520 115\n  z\n  ",
          leftgroup:
            "M400000 80\nH435C64 80 168.3 229.4 21 260c-5.9 1.2-18 0-18 0-2 0-3-1-3-3v-38C76 61 257 0\n 435 0h399565z",
          leftgroupunder:
            "M400000 262\nH435C64 262 168.3 112.6 21 82c-5.9-1.2-18 0-18 0-2 0-3 1-3 3v38c76 158 257 219\n 435 219h399565z",
          leftharpoon:
            "M0 267c.7 5.3 3 10 7 14h399993v-40H93c3.3\n-3.3 10.2-9.5 20.5-18.5s17.8-15.8 22.5-20.5c50.7-52 88-110.3 112-175 4-11.3 5\n-18.3 3-21-1.3-4-7.3-6-18-6-8 0-13 .7-15 2s-4.7 6.7-8 16c-42 98.7-107.3 174.7\n-196 228-6.7 4.7-10.7 8-12 10-1.3 2-2 5.7-2 11zm100-26v40h399900v-40z",
          leftharpoonplus:
            "M0 267c.7 5.3 3 10 7 14h399993v-40H93c3.3-3.3 10.2-9.5\n 20.5-18.5s17.8-15.8 22.5-20.5c50.7-52 88-110.3 112-175 4-11.3 5-18.3 3-21-1.3\n-4-7.3-6-18-6-8 0-13 .7-15 2s-4.7 6.7-8 16c-42 98.7-107.3 174.7-196 228-6.7 4.7\n-10.7 8-12 10-1.3 2-2 5.7-2 11zm100-26v40h399900v-40zM0 435v40h400000v-40z\nm0 0v40h400000v-40z",
          leftharpoondown:
            "M7 241c-4 4-6.333 8.667-7 14 0 5.333.667 9 2 11s5.333\n 5.333 12 10c90.667 54 156 130 196 228 3.333 10.667 6.333 16.333 9 17 2 .667 5\n 1 9 1h5c10.667 0 16.667-2 18-6 2-2.667 1-9.667-3-21-32-87.333-82.667-157.667\n-152-211l-3-3h399907v-40zM93 281 H400000 v-40L7 241z",
          leftharpoondownplus:
            "M7 435c-4 4-6.3 8.7-7 14 0 5.3.7 9 2 11s5.3 5.3 12\n 10c90.7 54 156 130 196 228 3.3 10.7 6.3 16.3 9 17 2 .7 5 1 9 1h5c10.7 0 16.7\n-2 18-6 2-2.7 1-9.7-3-21-32-87.3-82.7-157.7-152-211l-3-3h399907v-40H7zm93 0\nv40h399900v-40zM0 241v40h399900v-40zm0 0v40h399900v-40z",
          lefthook:
            "M400000 281 H103s-33-11.2-61-33.5S0 197.3 0 164s14.2-61.2 42.5\n-83.5C70.8 58.2 104 47 142 47 c16.7 0 25 6.7 25 20 0 12-8.7 18.7-26 20-40 3.3\n-68.7 15.7-86 37-10 12-15 25.3-15 40 0 22.7 9.8 40.7 29.5 54 19.7 13.3 43.5 21\n 71.5 23h399859zM103 281v-40h399897v40z",
          leftlinesegment:
            "M40 281 V428 H0 V94 H40 V241 H400000 v40z\nM40 281 V428 H0 V94 H40 V241 H400000 v40z",
          leftmapsto:
            "M40 281 V448H0V74H40V241H400000v40z\nM40 281 V448H0V74H40V241H400000v40z",
          leftToFrom:
            "M0 147h400000v40H0zm0 214c68 40 115.7 95.7 143 167h22c15.3 0 23\n-.3 23-1 0-1.3-5.3-13.7-16-37-18-35.3-41.3-69-70-101l-7-8h399905v-40H95l7-8\nc28.7-32 52-65.7 70-101 10.7-23.3 16-35.7 16-37 0-.7-7.7-1-23-1h-22C115.7 265.3\n 68 321 0 361zm0-174v-40h399900v40zm100 154v40h399900v-40z",
          longequal:
            "M0 50 h400000 v40H0z m0 194h40000v40H0z\nM0 50 h400000 v40H0z m0 194h40000v40H0z",
          midbrace:
            "M200428 334\nc-100.7-8.3-195.3-44-280-108-55.3-42-101.7-93-139-153l-9-14c-2.7 4-5.7 8.7-9 14\n-53.3 86.7-123.7 153-211 199-66.7 36-137.3 56.3-212 62H0V214h199568c178.3-11.7\n 311.7-78.3 403-201 6-8 9.7-12 11-12 .7-.7 6.7-1 18-1s17.3.3 18 1c1.3 0 5 4 11\n 12 44.7 59.3 101.3 106.3 170 141s145.3 54.3 229 60h199572v120z",
          midbraceunder:
            "M199572 214\nc100.7 8.3 195.3 44 280 108 55.3 42 101.7 93 139 153l9 14c2.7-4 5.7-8.7 9-14\n 53.3-86.7 123.7-153 211-199 66.7-36 137.3-56.3 212-62h199568v120H200432c-178.3\n 11.7-311.7 78.3-403 201-6 8-9.7 12-11 12-.7.7-6.7 1-18 1s-17.3-.3-18-1c-1.3 0\n-5-4-11-12-44.7-59.3-101.3-106.3-170-141s-145.3-54.3-229-60H0V214z",
          oiintSize1:
            "M512.6 71.6c272.6 0 320.3 106.8 320.3 178.2 0 70.8-47.7 177.6\n-320.3 177.6S193.1 320.6 193.1 249.8c0-71.4 46.9-178.2 319.5-178.2z\nm368.1 178.2c0-86.4-60.9-215.4-368.1-215.4-306.4 0-367.3 129-367.3 215.4 0 85.8\n60.9 214.8 367.3 214.8 307.2 0 368.1-129 368.1-214.8z",
          oiintSize2:
            "M757.8 100.1c384.7 0 451.1 137.6 451.1 230 0 91.3-66.4 228.8\n-451.1 228.8-386.3 0-452.7-137.5-452.7-228.8 0-92.4 66.4-230 452.7-230z\nm502.4 230c0-111.2-82.4-277.2-502.4-277.2s-504 166-504 277.2\nc0 110 84 276 504 276s502.4-166 502.4-276z",
          oiiintSize1:
            "M681.4 71.6c408.9 0 480.5 106.8 480.5 178.2 0 70.8-71.6 177.6\n-480.5 177.6S202.1 320.6 202.1 249.8c0-71.4 70.5-178.2 479.3-178.2z\nm525.8 178.2c0-86.4-86.8-215.4-525.7-215.4-437.9 0-524.7 129-524.7 215.4 0\n85.8 86.8 214.8 524.7 214.8 438.9 0 525.7-129 525.7-214.8z",
          oiiintSize2:
            "M1021.2 53c603.6 0 707.8 165.8 707.8 277.2 0 110-104.2 275.8\n-707.8 275.8-606 0-710.2-165.8-710.2-275.8C311 218.8 415.2 53 1021.2 53z\nm770.4 277.1c0-131.2-126.4-327.6-770.5-327.6S248.4 198.9 248.4 330.1\nc0 130 128.8 326.4 772.7 326.4s770.5-196.4 770.5-326.4z",
          rightarrow:
            "M0 241v40h399891c-47.3 35.3-84 78-110 128\n-16.7 32-27.7 63.7-33 95 0 1.3-.2 2.7-.5 4-.3 1.3-.5 2.3-.5 3 0 7.3 6.7 11 20\n 11 8 0 13.2-.8 15.5-2.5 2.3-1.7 4.2-5.5 5.5-11.5 2-13.3 5.7-27 11-41 14.7-44.7\n 39-84.5 73-119.5s73.7-60.2 119-75.5c6-2 9-5.7 9-11s-3-9-9-11c-45.3-15.3-85\n-40.5-119-75.5s-58.3-74.8-73-119.5c-4.7-14-8.3-27.3-11-40-1.3-6.7-3.2-10.8-5.5\n-12.5-2.3-1.7-7.5-2.5-15.5-2.5-14 0-21 3.7-21 11 0 2 2 10.3 6 25 20.7 83.3 67\n 151.7 139 205zm0 0v40h399900v-40z",
          rightbrace:
            "M400000 542l\n-6 6h-17c-12.7 0-19.3-.3-20-1-4-4-7.3-8.3-10-13-35.3-51.3-80.8-93.8-136.5-127.5\ns-117.2-55.8-184.5-66.5c-.7 0-2-.3-4-1-18.7-2.7-76-4.3-172-5H0V214h399571l6 1\nc124.7 8 235 61.7 331 161 31.3 33.3 59.7 72.7 85 118l7 13v35z",
          rightbraceunder:
            "M399994 0l6 6v35l-6 11c-56 104-135.3 181.3-238 232-57.3\n 28.7-117 45-179 50H-300V214h399897c43.3-7 81-15 113-26 100.7-33 179.7-91 237\n-174 2.7-5 6-9 10-13 .7-1 7.3-1 20-1h17z",
          rightgroup:
            "M0 80h399565c371 0 266.7 149.4 414 180 5.9 1.2 18 0 18 0 2 0\n 3-1 3-3v-38c-76-158-257-219-435-219H0z",
          rightgroupunder:
            "M0 262h399565c371 0 266.7-149.4 414-180 5.9-1.2 18 0 18\n 0 2 0 3 1 3 3v38c-76 158-257 219-435 219H0z",
          rightharpoon:
            "M0 241v40h399993c4.7-4.7 7-9.3 7-14 0-9.3\n-3.7-15.3-11-18-92.7-56.7-159-133.7-199-231-3.3-9.3-6-14.7-8-16-2-1.3-7-2-15-2\n-10.7 0-16.7 2-18 6-2 2.7-1 9.7 3 21 15.3 42 36.7 81.8 64 119.5 27.3 37.7 58\n 69.2 92 94.5zm0 0v40h399900v-40z",
          rightharpoonplus:
            "M0 241v40h399993c4.7-4.7 7-9.3 7-14 0-9.3-3.7-15.3-11\n-18-92.7-56.7-159-133.7-199-231-3.3-9.3-6-14.7-8-16-2-1.3-7-2-15-2-10.7 0-16.7\n 2-18 6-2 2.7-1 9.7 3 21 15.3 42 36.7 81.8 64 119.5 27.3 37.7 58 69.2 92 94.5z\nm0 0v40h399900v-40z m100 194v40h399900v-40zm0 0v40h399900v-40z",
          rightharpoondown:
            "M399747 511c0 7.3 6.7 11 20 11 8 0 13-.8 15-2.5s4.7-6.8\n 8-15.5c40-94 99.3-166.3 178-217 13.3-8 20.3-12.3 21-13 5.3-3.3 8.5-5.8 9.5\n-7.5 1-1.7 1.5-5.2 1.5-10.5s-2.3-10.3-7-15H0v40h399908c-34 25.3-64.7 57-92 95\n-27.3 38-48.7 77.7-64 119-3.3 8.7-5 14-5 16zM0 241v40h399900v-40z",
          rightharpoondownplus:
            "M399747 705c0 7.3 6.7 11 20 11 8 0 13-.8\n 15-2.5s4.7-6.8 8-15.5c40-94 99.3-166.3 178-217 13.3-8 20.3-12.3 21-13 5.3-3.3\n 8.5-5.8 9.5-7.5 1-1.7 1.5-5.2 1.5-10.5s-2.3-10.3-7-15H0v40h399908c-34 25.3\n-64.7 57-92 95-27.3 38-48.7 77.7-64 119-3.3 8.7-5 14-5 16zM0 435v40h399900v-40z\nm0-194v40h400000v-40zm0 0v40h400000v-40z",
          righthook:
            "M399859 241c-764 0 0 0 0 0 40-3.3 68.7-15.7 86-37 10-12 15-25.3\n 15-40 0-22.7-9.8-40.7-29.5-54-19.7-13.3-43.5-21-71.5-23-17.3-1.3-26-8-26-20 0\n-13.3 8.7-20 26-20 38 0 71 11.2 99 33.5 0 0 7 5.6 21 16.7 14 11.2 21 33.5 21\n 66.8s-14 61.2-42 83.5c-28 22.3-61 33.5-99 33.5L0 241z M0 281v-40h399859v40z",
          rightlinesegment:
            "M399960 241 V94 h40 V428 h-40 V281 H0 v-40z\nM399960 241 V94 h40 V428 h-40 V281 H0 v-40z",
          rightToFrom:
            "M400000 167c-70.7-42-118-97.7-142-167h-23c-15.3 0-23 .3-23\n 1 0 1.3 5.3 13.7 16 37 18 35.3 41.3 69 70 101l7 8H0v40h399905l-7 8c-28.7 32\n-52 65.7-70 101-10.7 23.3-16 35.7-16 37 0 .7 7.7 1 23 1h23c24-69.3 71.3-125 142\n-167z M100 147v40h399900v-40zM0 341v40h399900v-40z",
          twoheadleftarrow:
            "M0 167c68 40\n 115.7 95.7 143 167h22c15.3 0 23-.3 23-1 0-1.3-5.3-13.7-16-37-18-35.3-41.3-69\n-70-101l-7-8h125l9 7c50.7 39.3 85 86 103 140h46c0-4.7-6.3-18.7-19-42-18-35.3\n-40-67.3-66-96l-9-9h399716v-40H284l9-9c26-28.7 48-60.7 66-96 12.7-23.333 19\n-37.333 19-42h-46c-18 54-52.3 100.7-103 140l-9 7H95l7-8c28.7-32 52-65.7 70-101\n 10.7-23.333 16-35.7 16-37 0-.7-7.7-1-23-1h-22C115.7 71.3 68 127 0 167z",
          twoheadrightarrow:
            "M400000 167\nc-68-40-115.7-95.7-143-167h-22c-15.3 0-23 .3-23 1 0 1.3 5.3 13.7 16 37 18 35.3\n 41.3 69 70 101l7 8h-125l-9-7c-50.7-39.3-85-86-103-140h-46c0 4.7 6.3 18.7 19 42\n 18 35.3 40 67.3 66 96l9 9H0v40h399716l-9 9c-26 28.7-48 60.7-66 96-12.7 23.333\n-19 37.333-19 42h46c18-54 52.3-100.7 103-140l9-7h125l-7 8c-28.7 32-52 65.7-70\n 101-10.7 23.333-16 35.7-16 37 0 .7 7.7 1 23 1h22c27.3-71.3 75-127 143-167z",
          widetilde1:
            "M200 55.538c-77 0-168 73.953-177 73.953-3 0-7\n-2.175-9-5.437L2 97c-1-2-2-4-2-6 0-4 2-7 5-9l20-12C116 12 171 0 207 0c86 0\n 114 68 191 68 78 0 168-68 177-68 4 0 7 2 9 5l12 19c1 2.175 2 4.35 2 6.525 0\n 4.35-2 7.613-5 9.788l-19 13.05c-92 63.077-116.937 75.308-183 76.128\n-68.267.847-113-73.952-191-73.952z",
          widetilde2:
            "M344 55.266c-142 0-300.638 81.316-311.5 86.418\n-8.01 3.762-22.5 10.91-23.5 5.562L1 120c-1-2-1-3-1-4 0-5 3-9 8-10l18.4-9C160.9\n 31.9 283 0 358 0c148 0 188 122 331 122s314-97 326-97c4 0 8 2 10 7l7 21.114\nc1 2.14 1 3.21 1 4.28 0 5.347-3 9.626-7 10.696l-22.3 12.622C852.6 158.372 751\n 181.476 676 181.476c-149 0-189-126.21-332-126.21z",
          widetilde3:
            "M786 59C457 59 32 175.242 13 175.242c-6 0-10-3.457\n-11-10.37L.15 138c-1-7 3-12 10-13l19.2-6.4C378.4 40.7 634.3 0 804.3 0c337 0\n 411.8 157 746.8 157 328 0 754-112 773-112 5 0 10 3 11 9l1 14.075c1 8.066-.697\n 16.595-6.697 17.492l-21.052 7.31c-367.9 98.146-609.15 122.696-778.15 122.696\n -338 0-409-156.573-744-156.573z",
          widetilde4:
            "M786 58C457 58 32 177.487 13 177.487c-6 0-10-3.345\n-11-10.035L.15 143c-1-7 3-12 10-13l22-6.7C381.2 35 637.15 0 807.15 0c337 0 409\n 177 744 177 328 0 754-127 773-127 5 0 10 3 11 9l1 14.794c1 7.805-3 13.38-9\n 14.495l-20.7 5.574c-366.85 99.79-607.3 139.372-776.3 139.372-338 0-409\n -175.236-744-175.236z",
          vec: "M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 5\n3.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 11\n10.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63\n-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1\n-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59\nH213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359\nc-16-25.333-24-45-24-59z",
          widehat1:
            "M529 0h5l519 115c5 1 9 5 9 10 0 1-1 2-1 3l-4 22\nc-1 5-5 9-11 9h-2L532 67 19 159h-2c-5 0-9-4-11-9l-5-22c-1-6 2-12 8-13z",
          widehat2:
            "M1181 0h2l1171 176c6 0 10 5 10 11l-2 23c-1 6-5 10\n-11 10h-1L1182 67 15 220h-1c-6 0-10-4-11-10l-2-23c-1-6 4-11 10-11z",
          widehat3:
            "M1181 0h2l1171 236c6 0 10 5 10 11l-2 23c-1 6-5 10\n-11 10h-1L1182 67 15 280h-1c-6 0-10-4-11-10l-2-23c-1-6 4-11 10-11z",
          widehat4:
            "M1181 0h2l1171 296c6 0 10 5 10 11l-2 23c-1 6-5 10\n-11 10h-1L1182 67 15 340h-1c-6 0-10-4-11-10l-2-23c-1-6 4-11 10-11z",
          widecheck1:
            "M529,159h5l519,-115c5,-1,9,-5,9,-10c0,-1,-1,-2,-1,-3l-4,-22c-1,\n-5,-5,-9,-11,-9h-2l-512,92l-513,-92h-2c-5,0,-9,4,-11,9l-5,22c-1,6,2,12,8,13z",
          widecheck2:
            "M1181,220h2l1171,-176c6,0,10,-5,10,-11l-2,-23c-1,-6,-5,-10,\n-11,-10h-1l-1168,153l-1167,-153h-1c-6,0,-10,4,-11,10l-2,23c-1,6,4,11,10,11z",
          widecheck3:
            "M1181,280h2l1171,-236c6,0,10,-5,10,-11l-2,-23c-1,-6,-5,-10,\n-11,-10h-1l-1168,213l-1167,-213h-1c-6,0,-10,4,-11,10l-2,23c-1,6,4,11,10,11z",
          widecheck4:
            "M1181,340h2l1171,-296c6,0,10,-5,10,-11l-2,-23c-1,-6,-5,-10,\n-11,-10h-1l-1168,273l-1167,-273h-1c-6,0,-10,4,-11,10l-2,23c-1,6,4,11,10,11z",
          baraboveleftarrow:
            "M400000 620h-399890l3 -3c68.7 -52.7 113.7 -120 135 -202\nc4 -14.7 6 -23 6 -25c0 -7.3 -7 -11 -21 -11c-8 0 -13.2 0.8 -15.5 2.5\nc-2.3 1.7 -4.2 5.8 -5.5 12.5c-1.3 4.7 -2.7 10.3 -4 17c-12 48.7 -34.8 92 -68.5 130\ns-74.2 66.3 -121.5 85c-10 4 -16 7.7 -18 11c0 8.7 6 14.3 18 17c47.3 18.7 87.8 47\n121.5 85s56.5 81.3 68.5 130c0.7 2 1.3 5 2 9s1.2 6.7 1.5 8c0.3 1.3 1 3.3 2 6\ns2.2 4.5 3.5 5.5c1.3 1 3.3 1.8 6 2.5s6 1 10 1c14 0 21 -3.7 21 -11\nc0 -2 -2 -10.3 -6 -25c-20 -79.3 -65 -146.7 -135 -202l-3 -3h399890z\nM100 620v40h399900v-40z M0 241v40h399900v-40zM0 241v40h399900v-40z",
          rightarrowabovebar:
            "M0 241v40h399891c-47.3 35.3-84 78-110 128-16.7 32\n-27.7 63.7-33 95 0 1.3-.2 2.7-.5 4-.3 1.3-.5 2.3-.5 3 0 7.3 6.7 11 20 11 8 0\n13.2-.8 15.5-2.5 2.3-1.7 4.2-5.5 5.5-11.5 2-13.3 5.7-27 11-41 14.7-44.7 39\n-84.5 73-119.5s73.7-60.2 119-75.5c6-2 9-5.7 9-11s-3-9-9-11c-45.3-15.3-85-40.5\n-119-75.5s-58.3-74.8-73-119.5c-4.7-14-8.3-27.3-11-40-1.3-6.7-3.2-10.8-5.5\n-12.5-2.3-1.7-7.5-2.5-15.5-2.5-14 0-21 3.7-21 11 0 2 2 10.3 6 25 20.7 83.3 67\n151.7 139 205zm96 379h399894v40H0zm0 0h399904v40H0z",
          baraboveshortleftharpoon:
            "M507,435c-4,4,-6.3,8.7,-7,14c0,5.3,0.7,9,2,11\nc1.3,2,5.3,5.3,12,10c90.7,54,156,130,196,228c3.3,10.7,6.3,16.3,9,17\nc2,0.7,5,1,9,1c0,0,5,0,5,0c10.7,0,16.7,-2,18,-6c2,-2.7,1,-9.7,-3,-21\nc-32,-87.3,-82.7,-157.7,-152,-211c0,0,-3,-3,-3,-3l399351,0l0,-40\nc-398570,0,-399437,0,-399437,0z M593 435 v40 H399500 v-40z\nM0 281 v-40 H399908 v40z M0 281 v-40 H399908 v40z",
          rightharpoonaboveshortbar:
            "M0,241 l0,40c399126,0,399993,0,399993,0\nc4.7,-4.7,7,-9.3,7,-14c0,-9.3,-3.7,-15.3,-11,-18c-92.7,-56.7,-159,-133.7,-199,\n-231c-3.3,-9.3,-6,-14.7,-8,-16c-2,-1.3,-7,-2,-15,-2c-10.7,0,-16.7,2,-18,6\nc-2,2.7,-1,9.7,3,21c15.3,42,36.7,81.8,64,119.5c27.3,37.7,58,69.2,92,94.5z\nM0 241 v40 H399908 v-40z M0 475 v-40 H399500 v40z M0 475 v-40 H399500 v40z",
          shortbaraboveleftharpoon:
            "M7,435c-4,4,-6.3,8.7,-7,14c0,5.3,0.7,9,2,11\nc1.3,2,5.3,5.3,12,10c90.7,54,156,130,196,228c3.3,10.7,6.3,16.3,9,17c2,0.7,5,1,9,\n1c0,0,5,0,5,0c10.7,0,16.7,-2,18,-6c2,-2.7,1,-9.7,-3,-21c-32,-87.3,-82.7,-157.7,\n-152,-211c0,0,-3,-3,-3,-3l399907,0l0,-40c-399126,0,-399993,0,-399993,0z\nM93 435 v40 H400000 v-40z M500 241 v40 H400000 v-40z M500 241 v40 H400000 v-40z",
          shortrightharpoonabovebar:
            "M53,241l0,40c398570,0,399437,0,399437,0\nc4.7,-4.7,7,-9.3,7,-14c0,-9.3,-3.7,-15.3,-11,-18c-92.7,-56.7,-159,-133.7,-199,\n-231c-3.3,-9.3,-6,-14.7,-8,-16c-2,-1.3,-7,-2,-15,-2c-10.7,0,-16.7,2,-18,6\nc-2,2.7,-1,9.7,3,21c15.3,42,36.7,81.8,64,119.5c27.3,37.7,58,69.2,92,94.5z\nM500 241 v40 H399408 v-40z M500 435 v40 H400000 v-40z",
        };
      var Na,
        qa = 8205,
        Ra = [
          [qa, 1],
          [65038, 2],
          [127995, 5],
          [129456, 4],
          [917536, 96],
        ],
        Ia = [127462, 127487];
      function Va(e) {
        var t;
        if (void 0 === Na) {
          Na = {};
          for (let e of Ra)
            for (let t = e[0]; t <= e[0] + e[1] - 1; t++) Na[t] = !0;
        }
        return null != (t = Na[e]) && t;
      }
      function ja(e) {
        return e >= Ia[0] && e <= Ia[1];
      }
      function Ha(e) {
        if (/^[\u0020-\u00FF]*$/.test(e)) return e;
        let t = [],
          n = (function (e) {
            let t = [];
            for (let n = 0; n < e.length; n++) {
              let i = e.charCodeAt(n);
              if (
                (13 === i && 10 === e.charCodeAt(n + 1) && ((i = 10), n++),
                (13 === i || 12 === i) && (i = 10),
                0 === i && (i = 65533),
                i >= 55296 && i <= 56319)
              ) {
                let t = e.charCodeAt(n + 1);
                t >= 56320 &&
                  t <= 57343 &&
                  ((i = 65536 + 1024 * (i - 55296) + (t - 56320)), n++);
              }
              t.push(i);
            }
            return t;
          })(e),
          i = 0;
        for (; i < n.length; ) {
          let e = n[i++],
            r = n[i];
          if (r === qa) {
            let e = i - 1;
            for (i += 2; n[i] === qa; ) i += 2;
            t.push(String.fromCodePoint(...n.slice(e, i - e + 1)));
          } else if (Va(r)) {
            let e = i - 1;
            for (; Va(n[i]); ) i += n[i] === qa ? 2 : 1;
            t.push(String.fromCodePoint(...n.slice(e, 2 * i - e - 1)));
          } else
            ja(e)
              ? ((i += 1), t.push(String.fromCodePoint(...n.slice(i - 2, 2))))
              : t.push(String.fromCodePoint(e));
        }
        return t;
      }
      function Wa(e, t) {
        var n, i, r, a;
        let o = [],
          s = e.next();
        if (s && "\\relax" !== s)
          if ("\\noexpand" === s) (s = e.next()), s && o.push(s);
          else if ("\\obeyspaces" === s) e.obeyspaces = !0;
          else if ("\\bgroup" === s) o.push("<{>");
          else if ("\\egroup" === s) o.push("<}>");
          else if ("\\string" === s) {
            if (((s = e.next()), s))
              if (s.startsWith("\\"))
                for (let l of s) o.push("\\" === l ? "\\backslash" : l);
              else
                "<{>" === s
                  ? o.push("\\{")
                  : "<space>" === s
                  ? o.push("~")
                  : "<}>" === s && o.push("\\}");
          } else if ("\\csname" === s) {
            for (; "<space>" === e.peek(); ) e.next();
            let r = "",
              a = !1,
              l = [];
            do {
              if (0 === l.length)
                if (/^#[\d?@]$/.test(e.peek())) {
                  let r = e.get().slice(1);
                  (l = Ua(
                    null !=
                      (i =
                        null != (n = null == t ? void 0 : t(r))
                          ? n
                          : null == t
                          ? void 0
                          : t("?"))
                      ? i
                      : "\\placeholder{}",
                    t
                  )),
                    (s = l[0]);
                } else (s = e.next()), (l = s ? [s] : []);
              (a = 0 === l.length),
                !a && "\\endcsname" === s && ((a = !0), l.shift()),
                a ||
                  (a =
                    "<$>" === s ||
                    "<$$>" === s ||
                    "<{>" === s ||
                    "<}>" === s ||
                    ("string" == typeof s &&
                      s.length > 1 &&
                      s.startsWith("\\"))),
                a || (r += l.shift());
            } while (!a);
            r && o.push("\\" + r), o.push(...l);
          } else if ("\\endcsname" !== s)
            if (s.length > 1 && s.startsWith("#")) {
              let e = s.slice(1);
              o.push(
                ...Ua(
                  null !=
                    (a =
                      null != (r = null == t ? void 0 : t(e))
                        ? r
                        : null == t
                        ? void 0
                        : t("?"))
                    ? a
                    : "\\placeholder{}",
                  t
                )
              );
            } else o.push(s);
        return o;
      }
      function Ua(e, t = null) {
        let n = [],
          i = "";
        for (let o of e.toString().split(/\r?\n/)) {
          i && n.push(i), (i = " ");
          let e = o.match(/((?:\\%)|[^%])*/);
          null !== e && n.push(e[0]);
        }
        let r = new (class {
            constructor(e) {
              (this.s = Ha(e)), (this.pos = 0), (this.obeyspaces = !1);
            }
            end() {
              return this.pos >= this.s.length;
            }
            get() {
              return this.pos < this.s.length ? this.s[this.pos++] : "";
            }
            peek() {
              return this.s[this.pos];
            }
            match(e) {
              let t =
                "string" == typeof this.s
                  ? e.exec(this.s.slice(this.pos))
                  : e.exec(this.s.slice(this.pos).join(""));
              return null != t && t[0] ? ((this.pos += t[0].length), t[0]) : "";
            }
            next() {
              if (this.end()) return null;
              if (
                (!this.obeyspaces &&
                  this.match(/^[ \f\n\r\t\v\u00A0\u2028\u2029]+/)) ||
                (this.obeyspaces &&
                  this.match(/^[ \f\n\r\t\v\u00A0\u2028\u2029]/))
              )
                return "<space>";
              let e = this.get();
              if ("\\" === e) {
                if (!this.end()) {
                  let e = this.match(/^[a-zA-Z\*]+/);
                  return (
                    e
                      ? this.match(/^[ \f\n\r\t\v\u00A0\u2028\u2029]*/)
                      : (e = this.get()),
                    "\\" + e
                  );
                }
              } else {
                if ("{" === e) return "<{>";
                if ("}" === e) return "<}>";
                if ("^" === e) {
                  if ("^" === this.peek()) {
                    this.get();
                    let e = this.match(
                      /^(\^(\^(\^(\^[\da-f])?[\da-f])?[\da-f])?[\da-f])?[\da-f]{2}/
                    );
                    if (e)
                      return String.fromCodePoint(
                        Number.parseInt(e.slice(e.lastIndexOf("^") + 1), 16)
                      );
                  }
                  return e;
                }
                if ("#" === e) {
                  if (!this.end()) {
                    let e = !1;
                    if (
                      /[\d?@]/.test(this.peek()) &&
                      ((e = !0), this.pos + 1 < this.s.length)
                    ) {
                      let t = this.s[this.pos + 1];
                      e = /[^\dA-Za-z]/.test(t);
                    }
                    return e ? "#" + this.get() : "#";
                  }
                } else if ("$" === e)
                  return "$" === this.peek() ? (this.get(), "<$$>") : "<$>";
              }
              return e;
            }
          })(n.join("")),
          a = [];
        do {
          a.push(...Wa(r, t));
        } while (!r.end());
        return a;
      }
      function Ja(e) {
        let t = "",
          n = [];
        for (let i of e)
          i &&
            (t && /^[a-zA-Z\*]/.test(i) && n.push(t),
            n.push(i),
            /^\\[a-zA-Z]+\*?[\"\'][^\ ]+$/.test(i) && n.push(" "),
            (t = /\\[a-zA-Z]+\*?$/.test(i) ? " " : ""));
        return n.join("");
      }
      function Xa(e, ...t) {
        return (
          e.startsWith("\\"),
          0 === t.length ? e : Ja([e, ...t.map((e) => `{${e}}`)])
        );
      }
      function Ga(e) {
        return Ja(
          e.map((e) => {
            var t;
            return null !=
              (t = {
                "<space>": " ",
                "<$$>": "$$",
                "<$>": "$",
                "<{>": "{",
                "<}>": "}",
              }[e])
              ? t
              : e;
          })
        );
      }
      var Za = class e {
        constructor(t) {
          e._registry[t] = this;
        }
        static createAtom(t, n, i) {
          return e._registry[t].createAtom(n, ne(n, t), i);
        }
        static serialize(t, n) {
          var i;
          if (!t || 0 === t.length) return "";
          if (null != (i = n.skipStyles) && i) {
            let i = [];
            for (let r of Qa(t)) {
              let t = e._registry[r[0].mode];
              i.push(...t.serialize(r, n));
            }
            return Ja(i);
          }
          return Ja(
            (function (e, t) {
              if (0 === e.length) return [];
              let { parent: n } = e[0],
                i = null == n ? void 0 : n.computedStyle.fontSize,
                r = [];
              for (let a of eo(e, "fontSize")) {
                let e = a[0].computedStyle.fontSize,
                  o = no(a, t);
                o &&
                  (!e || "auto" === e || (n && i === e)
                    ? r.push(...o)
                    : r.push(
                        [
                          "",
                          "\\tiny",
                          "\\scriptsize",
                          "\\footnotesize",
                          "\\small",
                          "\\normalsize",
                          "\\large",
                          "\\Large",
                          "\\LARGE",
                          "\\huge",
                          "\\Huge",
                        ][e],
                        ...o
                      ));
              }
              return r;
            })(t, n)
          );
        }
        static getFont(t, n, i) {
          return e._registry[t].getFont(n, i);
        }
      };
      Za._registry = {};
      var Ya = Za;
      function Qa(e) {
        let t = [],
          n = [],
          i = "NONE";
        for (let r of e)
          "first" !== r.type &&
            (r.mode !== i
              ? (n.length > 0 && t.push(n), (n = [r]), (i = r.mode))
              : n.push(r));
        return n.length > 0 && t.push(n), t;
      }
      function eo(e, t) {
        let n,
          i = [],
          r = [];
        for (let a of e)
          if ("first" !== a.type && a.style) {
            let e;
            "variant" === t
              ? ((e = a.style.variant),
                a.style.variantStyle &&
                  "up" !== a.style.variantStyle &&
                  (e += "-" + a.style.variantStyle))
              : (e = a.style[t]),
              e === n
                ? r.push(a)
                : (r.length > 0 && i.push(r), (r = [a]), (n = e));
          }
        return r.length > 0 && i.push(r), i;
      }
      function to(e, t) {
        var n;
        let { parent: i } = e[0],
          r = null == i ? void 0 : i.computedStyle.color,
          a = [];
        for (let o of Qa(e)) {
          let e = t.defaultMode;
          for (let s of eo(o, "color")) {
            let o = s[0].computedStyle,
              l = Ya._registry[s[0].mode].serialize(
                s,
                u(d({}, t), { defaultMode: "text" === e ? "text" : "math" })
              );
            t.skipStyles ||
            !o.color ||
            "none" === o.color ||
            (i && r === o.color)
              ? a.push(Ja(l))
              : a.push(
                  Xa(
                    "\\textcolor",
                    null != (n = o.verbatimColor) ? n : o.color,
                    Ja(l)
                  )
                );
          }
        }
        return a;
      }
      function no(e, t) {
        let { parent: n } = e[0],
          i = null == n ? void 0 : n.computedStyle.backgroundColor;
        return eo(e, "backgroundColor").map((e) => {
          var r;
          if (e.length > 0 || "box" !== e[0].type) {
            let a = e[0].computedStyle;
            if (
              a.backgroundColor &&
              "none" !== a.backgroundColor &&
              (!n || i !== a.backgroundColor)
            )
              return Xa(
                "\\colorbox",
                null != (r = a.verbatimBackgroundColor) ? r : a.backgroundColor,
                Ja(to(e, u(d({}, t), { defaultMode: "text" })))
              );
          }
          return Ja(to(e, t));
        });
      }
      function io(e) {
        return e
          ? {
              mord: "ord",
              mbin: "bin",
              mop: "op",
              mrel: "rel",
              mopen: "open",
              mclose: "close",
              mpunct: "punct",
              minner: "inner",
              spacing: "ignore",
              latex: "latex",
              composition: "inner",
              error: "inner",
              placeholder: "ord",
              supsub: "ignore",
            }[e]
          : void 0;
      }
      function ro(e) {
        if (0 === e.length) return "ord";
        let t = io(e[0].type),
          n = io(e[e.length - 1].type);
        return t && t === n ? t : "ord";
      }
      function ao(e, t) {
        if ("string" == typeof e) return e;
        if ("number" == typeof e) {
          Number.isFinite(e);
          let n = Math.ceil(100 * e) / 100;
          return 0 === n ? "0" : n.toString() + (null != t ? t : "");
        }
        return "";
      }
      var oo = class e {
        constructor(t, n) {
          var i, r, a, o, s, l;
          if (
            ("number" == typeof t
              ? (this.value = String.fromCodePoint(t))
              : "string" == typeof t
              ? (this.value = t)
              : m(t)
              ? (this.children = t.filter((e) => null !== e))
              : t && t instanceof e && (this.children = [t]),
            this.children)
          )
            for (let e of this.children) e.parent = this;
          if (
            ((this.type =
              null != (i = null == n ? void 0 : n.type) ? i : "ignore"),
            (this.isSelected = !0 === (null == n ? void 0 : n.isSelected)),
            null != n && n.caret && (this.caret = n.caret),
            (this.classes =
              null != (r = null == n ? void 0 : n.classes) ? r : ""),
            (this.isTight = null != (a = null == n ? void 0 : n.isTight) && a),
            null != n && n.properties)
          )
            for (let e of Object.keys(n.properties))
              this.setStyle(e, n.properties[e]);
          null != n && n.attributes && (this.attributes = n.attributes);
          let c = null == n ? void 0 : n.fontFamily;
          if (
            (null != n &&
              n.style &&
              this.value &&
              (c =
                null !=
                (s = Ya.getFont(
                  null != (o = n.mode) ? o : "math",
                  this,
                  u(d({ variant: "normal" }, n.style), {
                    letterShapeStyle: n.letterShapeStyle,
                  })
                ))
                  ? s
                  : void 0),
            c || (c = "Main-Regular"),
            (this.height = 0),
            (this.depth = 0),
            (this._width = 0),
            (this.hasExplicitWidth = !1),
            (this.skew = 0),
            (this.italic = 0),
            (this.maxFontSize = 0),
            (this.scale = 1),
            "latex" === this.type)
          )
            (this.height = 0.8), (this.depth = 0.2), (this._width = 1);
          else if ("number" == typeof t) {
            let e = $a(t, c);
            (this.height = e.height),
              (this.depth = e.depth),
              (this._width = e.width),
              (this.skew = e.skew),
              (this.italic = e.italic);
          } else if (this.value) {
            (this.height = -1 / 0),
              (this.depth = -1 / 0),
              (this._width = 0),
              (this.skew = -1 / 0),
              (this.italic = -1 / 0);
            for (let e = 0; e < this.value.length; e++) {
              let t = $a(this.value.codePointAt(e), c);
              (this.height = Math.max(this.height, t.height)),
                (this.depth = Math.max(this.depth, t.depth)),
                (this._width += t.width),
                (this.skew = t.skew),
                (this.italic = t.italic);
            }
          } else if (this.children && this.children.length > 0)
            if (1 === this.children.length) {
              let e = this.children[0];
              (this.height = e.height),
                (this.depth = e.depth),
                (this._width = e.width),
                (this.maxFontSize = e.maxFontSize),
                (this.skew = e.skew),
                (this.italic = e.italic);
            } else {
              let e = -1 / 0,
                t = -1 / 0,
                n = 0,
                i = 0;
              for (let r of this.children)
                r.height > e && (e = r.height),
                  r.depth > t && (t = r.depth),
                  (i = Math.max(i, null != (l = r.maxFontSize) ? l : 0)),
                  (n += r.width);
              (this.height = e),
                (this.depth = t),
                (this._width = n),
                (this.maxFontSize = i);
            }
          void 0 !== (null == n ? void 0 : n.height) &&
            (this.height = n.height),
            void 0 !== (null == n ? void 0 : n.depth) && (this.depth = n.depth),
            void 0 !== (null == n ? void 0 : n.width) && (this.width = n.width),
            void 0 !== (null == n ? void 0 : n.maxFontSize) &&
              (this.maxFontSize = n.maxFontSize);
        }
        set atomID(e) {
          void 0 === e || 0 === e.length || (this.id = e);
        }
        selected(e) {
          if (this.isSelected !== e && ((this.isSelected = e), this.children))
            for (let t of this.children) t.selected(e);
        }
        setStyle(e, t, n) {
          if (void 0 === t) return;
          let i = ao(t, n);
          i.length > 0 &&
            (this.cssProperties || (this.cssProperties = {}),
            (this.cssProperties[e] = i));
        }
        setTop(e) {
          Number.isFinite(e) &&
            Math.abs(e) > 0.01 &&
            (this.cssProperties || (this.cssProperties = {}),
            (this.cssProperties.top = ao(e, "em")),
            (this.height -= e),
            (this.depth += e));
        }
        get left() {
          var e;
          return null != (e = this.cssProperties) && e["margin-left"]
            ? Number.parseFloat(this.cssProperties["margin-left"])
            : 0;
        }
        set left(e) {
          Number.isFinite(e) &&
            (0 === e
              ? this.cssProperties && delete this.cssProperties["margin-left"]
              : (this.cssProperties || (this.cssProperties = {}),
                (this.cssProperties["margin-left"] = ao(e, "em"))));
        }
        set right(e) {
          Number.isFinite(e) &&
            (0 === e
              ? this.cssProperties && delete this.cssProperties["margin-right"]
              : (this.cssProperties || (this.cssProperties = {}),
                (this.cssProperties["margin-right"] = ao(e, "em"))));
        }
        get width() {
          return this._width;
        }
        set width(e) {
          (this._width = e), (this.hasExplicitWidth = !0);
        }
        wrap(e) {
          let t = e.parent;
          if (!t) return this;
          e.isPhantom && this.setStyle("opacity", 0);
          let n = e.color;
          n && n !== t.color && this.setStyle("color", n);
          let i = e.backgroundColor;
          this.isSelected && (i = E(i)),
            i &&
              i !== t.backgroundColor &&
              (this.setStyle("background-color", i),
              this.setStyle("display", "inline-block")),
            this.scale;
          let r = e.scalingFactor;
          return (
            (this.scale = r),
            (this.height *= r),
            (this.depth *= r),
            (this._width *= r),
            (this.skew *= r),
            (this.italic *= r),
            this
          );
        }
        toMarkup() {
          var e, t, n, i;
          let r = null != (e = this.value) ? e : "";
          if (this.children) for (let h of this.children) r += h.toMarkup();
          let a = "";
          if (this.svgBody)
            a = (function (e) {
              if (Oa[e]) {
                let [t, n, i] = Oa[e];
                return `<span style="display:inline-block;height:${
                  i / 2
                }em;min-width:0"><span class="stretchy" style="height:${i}em"><svg width="100%" height="${i}em" viewBox="0 0 ${t} ${n}" preserveAspectRatio="none" ><path fill="currentcolor" d="${
                  Fa[e]
                }"></path></svg></span></span>`;
              }
              let t,
                n,
                [i, r, a, o] = Pa[e],
                s = a / 1e3;
              3 === i.length
                ? ((t = ["slice-1-of-3", "slice-2-of-3", "slice-3-of-3"]),
                  (n = ["xMinYMin", "xMidYMin", "xMaxYMin"]))
                : 2 === i.length
                ? ((t = ["slice-1-of-2", "slice-2-of-2"]),
                  (n = ["xMinYMin", "xMaxYMin"]))
                : ((t = ["slice-1-of-1"]), (n = [o]));
              let l = i
                .map(
                  (e, i) =>
                    `<span class="${t[i]}" style=height:${s}em><svg width=400em height=${s}em viewBox="0 0 400000 ${a}" preserveAspectRatio="${n[i]} slice"><path fill="currentcolor" d="${Fa[e]}"></path></svg></span>`
                )
                .join("");
              return `<span style="display:inline-block;height:${s}em;min-width:${r}em;">${l}</span>`;
            })(this.svgBody);
          else if (this.svgOverlay) {
            (a = '<span style="'),
              (a += "display: inline-block;"),
              (a += `height:${this.height + this.depth}em;`),
              (a += `vertical-align:${this.depth}em;`),
              (a += '">'),
              (a += r),
              (a += "</span>"),
              (a += '<svg style="position:absolute;overflow:overlay;'),
              (a += `height:${this.height + this.depth}em;`);
            let e = null == (t = this.cssProperties) ? void 0 : t.padding;
            e
              ? ((a += `top:${e};`),
                (a += `left:${e};`),
                (a += `width:calc(100% - 2 * ${e} );`))
              : (a += "top:0;left:0;width:100%;"),
              (a += "z-index:2;"),
              (a += '"'),
              this.svgStyle && (a += ` style="${this.svgStyle}"`),
              (a += `>${this.svgOverlay}</svg>`);
          }
          let o = "",
            s = this.classes.split(" ");
          s.push(
            null !=
              (n = {
                latex: "ML__latex",
                placeholder: "ML__placeholder",
                error: "ML__error",
              }[this.type])
              ? n
              : ""
          ),
            "latex" === this.caret && s.push("ML__latex-caret"),
            this.isSelected && s.push("ML__selected");
          let l =
            1 === s.length
              ? s[0]
              : s
                  .filter((e, t, n) => e.length > 0 && n.indexOf(e) === t)
                  .join(" ");
          if (
            (l.length > 0 && (o += ` class="${l}"`),
            this.id && (o += ` data-atom-id=${this.id}`),
            this.cssId && (o += ` id="${this.cssId.replace(/ /g, "-")}" `),
            this.attributes &&
              (o +=
                " " +
                Object.keys(this.attributes)
                  .map((e) => `${e}="${this.attributes[e]}"`)
                  .join(" ")),
            this.htmlData)
          ) {
            let e = this.htmlData.split(",");
            for (let t of e) {
              let e = t.match(/([^=]+)=(.+$)/);
              if (e) {
                let t = e[1].trim().replace(/ /g, "-");
                t && (o += ` data-${t}="${e[2]}" `);
              } else {
                let e = t.trim().replace(/ /g, "-");
                e && (o += ` data-${e} `);
              }
            }
          }
          let c = null != (i = this.cssProperties) ? i : {};
          this.hasExplicitWidth &&
            (c.width, (c.width = Math.round(100 * this._width) / 100 + "em"));
          let d = Object.keys(c).map((e) => `${e}:${c[e]}`);
          if (
            (void 0 !== this.scale &&
              1 !== this.scale &&
              (r.length > 0 || a.length > 0) &&
              d.push(`font-size: ${Math.round(1e4 * this.scale) / 100}%`),
            this.htmlStyle)
          ) {
            let e = this.htmlStyle.split(";"),
              t = "";
            for (let n of e) {
              let e = n.match(/([^=]+):(.+$)/);
              if (e) {
                let n = e[1].trim().replace(/ /g, "-");
                n && (t += `${n}:${e[2]};`);
              }
            }
            t && (o += ` style="${t}"`);
          }
          d.length > 0 && (o += ` style="${d.join(";")}"`);
          let u = "";
          return (
            (u =
              o.length > 0 || a.length > 0 ? `<span${o}>${r}${a}</span>` : r),
            "text" === this.caret
              ? (u += '<span class="ML__text-caret"></span>')
              : "math" === this.caret &&
                (u += '<span class="ML__caret"></span>'),
            u
          );
        }
        tryCoalesceWith(e) {
          if (this.svgBody || !this.value || e.svgBody || !e.value) return !1;
          let t = this.children && this.children.length > 0,
            n = e.children && e.children.length > 0;
          if (t || n) return !1;
          if (e.cssProperties || this.cssProperties)
            for (let o of [
              "border",
              "border-left",
              "border-right",
              "border-right-width",
              "left",
              "margin",
              "margin-left",
              "margin-right",
              "padding",
              "position",
              "width",
            ])
              if (
                (e.cssProperties && o in e.cssProperties) ||
                (this.cssProperties && o in this.cssProperties)
              )
                return !1;
          let i = this.cssProperties
            ? Object.keys(this.cssProperties).length
            : 0;
          if (i !== (e.cssProperties ? Object.keys(e.cssProperties).length : 0))
            return !1;
          if (i > 0)
            for (let o of Object.keys(this.cssProperties))
              if (this.cssProperties[o] !== e.cssProperties[o]) return !1;
          let r = this.classes.trim().replace(/\s+/g, " ").split(" "),
            a = e.classes.trim().replace(/\s+/g, " ").split(" ");
          if (r.length !== a.length) return !1;
          r.sort(), a.sort();
          for (let [o, s] of r.entries())
            if ("vertical-separator" === s || s !== a[o]) return !1;
          return (
            (this.value += e.value),
            (this.height = Math.max(this.height, e.height)),
            (this.depth = Math.max(this.depth, e.depth)),
            (this._width = this._width + e._width),
            (this.maxFontSize = Math.max(this.maxFontSize, e.maxFontSize)),
            (this.italic = e.italic),
            !0
          );
        }
      };
      function so(e) {
        if (!e || 0 === e.length) return [];
        e[0].children = so(e[0].children);
        let t = [e[0]];
        for (let n = 1; n < e.length; n++)
          t[t.length - 1].tryCoalesceWith(e[n]) ||
            ((e[n].children = so(e[n].children)), t.push(e[n]));
        return t;
      }
      function lo(e) {
        return e.children && (e.children = so(e.children)), e;
      }
      function co(e, t) {
        if (!e) return new oo(null, t);
        let n = new oo(null, { classes: "ML__strut", type: "ignore" });
        n.setStyle("height", Math.max(0, e.height), "em");
        let i = [n];
        if (0 !== e.depth) {
          let t = new oo(null, {
            classes: "ML__strut--bottom",
            type: "ignore",
          });
          t.setStyle("height", e.height + e.depth, "em"),
            t.setStyle("vertical-align", -e.depth, "em"),
            i.push(t);
        }
        return i.push(e), new oo(i, u(d({}, t), { type: "lift" }));
      }
      function uo(e, t, n) {
        return (e.svgOverlay = t), (e.svgStyle = n), e;
      }
      function ho(e) {
        let t =
            (function (e) {
              return Pa[e] ? Pa[e][2] / 1e3 : Oa[e][2];
            })(e) / 2,
          n = new oo(null, {
            height: t + 0.166,
            depth: t - 0.166,
            maxFontSize: 0,
          });
        return (n.svgBody = e), n;
      }
      function po(e) {
        var t;
        let [n, i] = (function (e) {
          if ("individualShift" in e) {
            let t = e.individualShift,
              n = t[0],
              i = [n],
              r = -n.shift - n.box.depth,
              a = r;
            for (let e = 1; e < t.length; e++) {
              let r = t[e],
                o = -r.shift - a - r.box.depth,
                s = o - (n.box.height + n.box.depth);
              (a += o), i.push(s), i.push(r), (n = r);
            }
            return [i, r];
          }
          if ("top" in e) {
            let t = e.top;
            for (let n of e.children)
              t -= "number" == typeof n ? n : n.box.height + n.box.depth;
            return [e.children, t];
          }
          if ("bottom" in e) return [e.children, -e.bottom];
          if ("firstBaseline" in e) {
            let t = e.firstBaseline[0];
            if ("number" == typeof t)
              throw new Error("First child must be an element.");
            return [e.firstBaseline, -t.box.depth];
          }
          if ("shift" in e) {
            let t = e.children[0];
            if ("number" == typeof t)
              throw new Error("First child must be an element.");
            return [e.children, -t.box.depth - e.shift];
          }
          return [null, 0];
        })(e);
        if (!n) return [[], 0, 0];
        let r = 0;
        for (let p of n)
          if ("number" != typeof p) {
            let e = p.box;
            r = Math.max(r, e.maxFontSize, e.height);
          }
        r += 2;
        let a = new oo(null, { classes: "pstrut", height: r });
        a.setStyle("height", r, "em");
        let o = [],
          s = i,
          l = i,
          c = i;
        for (let p of n) {
          if ("number" == typeof p) c += p;
          else {
            let e = p.box,
              n = null != (t = p.classes) ? t : [],
              i = new oo([a, e], { classes: n.join(" "), style: p.style });
            e.setStyle("height", e.height + e.depth, "em"),
              e.setStyle("display", "inline-block"),
              i.setStyle("top", -r - c - e.depth, "em"),
              p.marginLeft && i.setStyle("margin-left", p.marginLeft, "em"),
              p.marginRight && i.setStyle("margin-right", p.marginRight, "em"),
              o.push(i),
              (c += e.height + e.depth);
          }
          (s = Math.min(s, c)), (l = Math.max(l, c));
        }
        let d = new oo(o, { classes: "vlist" });
        if ((d.setStyle("height", l, "em"), s >= 0))
          return [[new oo(d, { classes: "vlist-r" })], l, -s];
        let u = new oo(new oo(null), { classes: "vlist" });
        u.setStyle("height", -s, "em");
        let h = new oo(8203, {
          classes: "vlist-s",
          maxFontSize: 0,
          height: 0,
          depth: 0,
        });
        return [
          [
            new oo([d, h], { classes: "vlist-r" }),
            new oo(u, { classes: "vlist-r" }),
          ],
          l,
          -s,
        ];
      }
      var mo = class extends oo {
        constructor(e, t) {
          var n;
          let [i, r, a] = po(e);
          super(1 === i.length ? i[0] : i, {
            classes:
              (null != (n = null == t ? void 0 : t.classes) ? n : "") +
              " vlist-t" +
              (2 === i.length ? " vlist-t2" : ""),
            height: r,
            depth: a,
            type: null == t ? void 0 : t.type,
          });
        }
      };
      var fo = class {
          constructor(e, t, n) {
            (this.id = e), (this.sizeDelta = t), (this.cramped = n);
            let i = { "-4": 2, "-3": 1, 0: 0 }[t];
            this.metrics = Object.keys(Da).reduce(
              (e, t) => u(d({}, e), { [t]: Da[t][i] }),
              {}
            );
          }
          getFontSize(e) {
            return Math.max(1, e + this.sizeDelta);
          }
          get sup() {
            return go[[0, 1, 0, 1, 2, 3, 2, 3][this.id]];
          }
          get sub() {
            return go[[0, 0, 0, 0, 2, 2, 2, 2][this.id]];
          }
          get fracNum() {
            return go[[0, 1, 0, 1, 2, 3, 4, 5][this.id]];
          }
          get fracDen() {
            return go[[0, 0, 0, 0, 2, 2, 4, 4][this.id]];
          }
          get cramp() {
            return go[[0, 0, 2, 2, 4, 4, 6, 6][this.id]];
          }
          get isTight() {
            return this.sizeDelta < 0;
          }
        },
        yo = {
          7: new fo(7, 0, !1),
          6: new fo(6, 0, !0),
          5: new fo(5, 0, !1),
          4: new fo(4, 0, !0),
          3: new fo(3, -3, !1),
          2: new fo(2, -3, !0),
          1: new fo(1, -4, !1),
          0: new fo(0, -4, !0),
        },
        go = u(d({}, yo), {
          displaystyle: yo[7],
          textstyle: yo[5],
          scriptstyle: yo[3],
          scriptscriptstyle: yo[1],
        });
      function bo(e, t) {
        var n;
        if (!e) return 0;
        let i = {
          pt: 1,
          mm: 7227 / 2540,
          cm: 7227 / 254,
          ex: 35271 / 8192,
          px: 3 / 4,
          em: Aa,
          bp: 1.00375,
          dd: 1238 / 1157,
          pc: 12,
          in: 72.27,
          mu: 10 / 18,
        }[null != (n = e.unit) ? n : "pt"];
        if (Number.isFinite(t)) {
          let n = 10 ** t;
          return Math.round((e.dimension / Aa) * i * n) / n;
        }
        return e.dimension * i;
      }
      function vo(e, t) {
        if (null === e) return 0;
        let n = bo(e) / Aa;
        if (Number.isFinite(t)) {
          let e = 10 ** t;
          return Math.round(n * e) / e;
        }
        return n;
      }
      function xo(e) {
        var t;
        return `${e.dimension}${null != (t = e.unit) ? t : "pt"}`;
      }
      function wo(e) {
        var t, n;
        if (null == e) return null;
        let i = "";
        if (
          ("dimension" in e &&
            (i = `${e.dimension}${null != (t = e.unit) ? t : "pt"}`),
          "glue" in e &&
            (i = (function (e) {
              let t = xo(e.glue);
              return (
                e.grow &&
                  0 !== e.grow.dimension &&
                  (t += ` plus ${xo(e.grow)}`),
                e.shrink &&
                  0 !== e.shrink.dimension &&
                  (t += ` minus ${xo(e.shrink)}`),
                t
              );
            })(e)),
          "number" in e)
        )
          if ("base" in e && "decimal" !== e.base)
            if ("alpha" === e.base) i = `\`${String.fromCodePoint(e.number)}`;
            else {
              let t = Math.round(e.number) >>> 0;
              "hexadecimal" === e.base
                ? ((i = Number(t).toString(16).toUpperCase()),
                  (i =
                    t <= 255
                      ? i.padStart(2, "0")
                      : t <= 65535
                      ? i.padStart(4, "0")
                      : t <= 16777215
                      ? i.padStart(6, "0")
                      : i.padStart(8, "0")),
                  (i = `"${i}`))
                : "octal" === e.base &&
                  ((i = Number(t).toString(8)),
                  (i =
                    t <= 63
                      ? i.padStart(2, "0")
                      : t <= 30583
                      ? i.padStart(4, "0")
                      : i.padStart(8, "0")),
                  (i = `'${i}`));
            }
          else i = Number(e.number).toString();
        return (
          "register" in e &&
            ("factor" in e &&
              (-1 === e.factor
                ? (i = "-")
                : 1 !== e.factor && (i = Number(e.factor).toString())),
            "global" in e && e.global && (i += "\\global"),
            (i += `\\${e.register}`)),
          "string" in e && (i = e.string),
          null != (n = e.relax) && n && (i += "\\relax"),
          i
        );
      }
      function ko(e, t) {
        return null == e
          ? null
          : "number" in e
          ? u(d({}, e), { number: e.number * t })
          : "register" in e
          ? "factor" in e && e.factor
            ? u(d({}, e), { factor: e.factor * t })
            : u(d({}, e), { factor: t })
          : "dimension" in e
          ? u(d({}, e), { dimension: e.dimension * t })
          : "glue" in e
          ? e.shrink && e.grow
            ? {
                glue: ko(e.glue, t),
                shrink: ko(e.shrink, t),
                grow: ko(e.grow, t),
              }
            : e.shrink
            ? { glue: ko(e.glue, t), shrink: ko(e.shrink, t) }
            : e.grow
            ? { glue: ko(e.glue, t), grow: ko(e.grow, t) }
            : { glue: ko(e.glue, t) }
          : null;
      }
      var _o = {
        "p@": { dimension: 1 },
        "z@": { dimension: 0 },
        maxdimen: { dimension: 16383.99999 },
        hfuzz: { dimension: 0.1 },
        vfuzz: { dimension: 0.1 },
        overfullrule: { dimension: 5 },
        hsize: { dimension: 6.5, unit: "in" },
        vsize: { dimension: 8.9, unit: "in" },
        parindent: { dimension: 20 },
        maxdepth: { dimension: 4 },
        splitmaxdepth: { register: "maxdimen" },
        boxmaxdepth: { register: "maxdimen" },
        delimitershortfall: { dimension: 5 },
        nulldelimiterspace: { dimension: 1.2, unit: "pt" },
        scriptspace: { dimension: 0.5 },
        topskip: { dimension: 10 },
        splittopskip: { dimension: 10 },
        normalbaselineskip: { dimension: 12 },
        normallineskip: { dimension: 1 },
        normallineskiplimit: { dimension: 0 },
        jot: { dimension: 3 },
        doublerulesep: { dimension: 2 },
        arrayrulewidth: { dimension: 0.4 },
        arraycolsep: { dimension: 5 },
        fboxsep: { dimension: 3 },
        fboxrule: { dimension: 0.4 },
        "z@skip": {
          glue: { dimension: 0 },
          shrink: { dimension: 0 },
          grow: { dimension: 0 },
        },
        hideskip: {
          glue: { dimension: -1e3 },
          grow: { dimension: 1, unit: "fill" },
        },
        "@flushglue": {
          glue: { dimension: 0 },
          grow: { dimension: 1, unit: "fill" },
        },
        parskip: { glue: { dimension: 0 }, grow: { dimension: 1 } },
        abovedisplayskip: {
          glue: { dimension: 12 },
          grow: { dimension: 3 },
          shrink: { dimension: 9 },
        },
        abovedisplayshortskip: {
          glue: { dimension: 0 },
          grow: { dimension: 3 },
        },
        belowdisplayskip: {
          glue: { dimension: 12 },
          grow: { dimension: 3 },
          shrink: { dimension: 9 },
        },
        belowdisplayshortskip: {
          glue: { dimension: 7 },
          grow: { dimension: 3 },
          shrink: { dimension: 4 },
        },
        parfillskip: {
          glue: { dimension: 0 },
          grow: { dimension: 1, unit: "fil" },
        },
        thinmuskip: { glue: { dimension: 3, unit: "mu" } },
        medmuskip: {
          glue: { dimension: 4, unit: "mu" },
          grow: { dimension: 2, unit: "mu" },
          shrink: { dimension: 4, unit: "mu" },
        },
        thickmuskip: {
          glue: { dimension: 5, unit: "mu" },
          grow: { dimension: 5, unit: "mu" },
        },
        smallskipamount: {
          glue: { dimension: 3 },
          grow: { dimension: 1 },
          shrink: { dimension: 1 },
        },
        medskipamount: {
          glue: { dimension: 6 },
          grow: { dimension: 2 },
          shrink: { dimension: 3 },
        },
        bigskipamount: {
          glue: { dimension: 12 },
          grow: { dimension: 2 },
          shrink: { dimension: 4 },
        },
        pretolerance: 100,
        tolerance: 200,
        hbadness: 1e3,
        vbadness: 1e3,
        linepenalty: 10,
        hyphenpenalty: 50,
        exhyphenpenalty: 50,
        binoppenalty: 700,
        relpenalty: 500,
        clubpenalty: 150,
        widowpenalty: 150,
        displaywidowpenalty: 50,
        brokenpenalty: 100,
        predisplaypenalty: 1e4,
        doublehyphendemerits: 1e4,
        finalhyphendemerits: 5e3,
        adjdemerits: 1e4,
        tracinglostchars: 1,
        uchyph: 1,
        delimiterfactor: 901,
        defaulthyphenchar: "\\-",
        defaultskewchar: -1,
        newlinechar: -1,
        showboxbreadth: 5,
        showboxdepth: 3,
        errorcontextlines: 5,
        interdisplaylinepenalty: 100,
        interfootnotelinepenalty: 100,
        baselineSkip: 1.2,
        arraystretch: 1,
        month: new Date().getMonth() + 1,
        day: new Date().getDate(),
        year: new Date().getFullYear(),
      };
      function So() {
        return d({}, _o);
      }
      function Mo() {
        return {
          registers: So(),
          smartFence: !1,
          renderPlaceholder: void 0,
          placeholderSymbol: "\u25a2",
          letterShapeStyle: b.locale.startsWith("fr") ? "french" : "tex",
          minFontScale: 0,
          colorMap: L,
          backgroundColorMap: C,
          getMacro: (e) => ie(e, Q()),
        };
      }
      var Lo = class e {
          constructor(t, n) {
            var i, r, a, o, s, l, c, u, h, p, m, f, y, g, b;
            let v;
            null != t && t.parent
              ? ((this.parent = t.parent),
                (v = t.parent),
                (this.registers = {}))
              : ((v = d(
                  d({}, Mo()),
                  null != (i = null == t ? void 0 : t.from) ? i : {}
                )),
                (this.registers = v.registers)),
              v.atomIdsSettings &&
                (this.atomIdsSettings = d({}, v.atomIdsSettings)),
              (this.renderPlaceholder = v.renderPlaceholder),
              (this.isPhantom =
                null !=
                  (o =
                    null != (a = null == t ? void 0 : t.isPhantom)
                      ? a
                      : null == (r = this.parent)
                      ? void 0
                      : r.isPhantom) && o),
              (this.letterShapeStyle = v.letterShapeStyle),
              (this.minFontScale = v.minFontScale),
              null != n && n.color && "none" !== n.color
                ? (this.color = n.color)
                : (this.color =
                    null != (l = null == (s = this.parent) ? void 0 : s.color)
                      ? l
                      : ""),
              null != n && n.backgroundColor && "none" !== n.backgroundColor
                ? (this.backgroundColor = n.backgroundColor)
                : (this.backgroundColor =
                    null !=
                    (u = null == (c = this.parent) ? void 0 : c.backgroundColor)
                      ? u
                      : ""),
              null != n &&
              n.fontSize &&
              "auto" !== n.fontSize &&
              n.fontSize !== (null == (h = this.parent) ? void 0 : h.size)
                ? (this.size = n.fontSize)
                : (this.size =
                    null != (m = null == (p = this.parent) ? void 0 : p.size)
                      ? m
                      : 5);
            let x =
              null != (y = null == (f = this.parent) ? void 0 : f.mathstyle)
                ? y
                : go.displaystyle;
            if ("string" == typeof (null == t ? void 0 : t.mathstyle)) {
              if (v instanceof e)
                switch (t.mathstyle) {
                  case "cramp":
                    x = x.cramp;
                    break;
                  case "superscript":
                    x = x.sup;
                    break;
                  case "subscript":
                    x = x.sub;
                    break;
                  case "numerator":
                    x = x.fracNum;
                    break;
                  case "denominator":
                    x = x.fracDen;
                }
              switch (t.mathstyle) {
                case "textstyle":
                  x = go.textstyle;
                  break;
                case "displaystyle":
                  x = go.displaystyle;
                  break;
                case "scriptstyle":
                  x = go.scriptstyle;
                  break;
                case "scriptscriptstyle":
                  x = go.scriptscriptstyle;
              }
            }
            (this.mathstyle = x),
              (this.smartFence = v.smartFence),
              (this.placeholderSymbol = v.placeholderSymbol),
              (this.colorMap = null != (g = v.colorMap) ? g : (e) => e),
              (this.backgroundColorMap =
                null != (b = v.backgroundColorMap) ? b : (e) => e),
              (this.getMacro = v.getMacro),
              void 0 !== this.parent || this.registers;
          }
          makeID() {
            if (!this.atomIdsSettings) return;
            if (this.atomIdsSettings.overrideID)
              return this.atomIdsSettings.overrideID;
            if ("number" != typeof this.atomIdsSettings.seed)
              return `${Date.now().toString(36).slice(-2)}${Math.floor(
                1e5 * Math.random()
              ).toString(36)}`;
            let e = this.atomIdsSettings.seed.toString(36);
            return (this.atomIdsSettings.seed += 1), e;
          }
          scale(e) {
            return e * this.effectiveFontSize;
          }
          get scalingFactor() {
            return this.parent
              ? this.effectiveFontSize / this.parent.effectiveFontSize
              : 1;
          }
          get isDisplayStyle() {
            return 7 === this.mathstyle.id || 6 === this.mathstyle.id;
          }
          get isCramped() {
            return this.mathstyle.cramped;
          }
          get isTight() {
            return this.mathstyle.isTight;
          }
          get metrics() {
            return this.mathstyle.metrics;
          }
          get effectiveFontSize() {
            return Math.max(
              Ta[Math.max(1, this.size + this.mathstyle.sizeDelta)],
              this.minFontScale
            );
          }
          getRegister(e) {
            var t;
            return null != (t = this.registers) && t[e]
              ? this.registers[e]
              : this.parent
              ? this.parent.getRegister(e)
              : void 0;
          }
          getRegisterAsNumber(e) {
            let t = this.getRegister(e);
            return "number" == typeof t
              ? t
              : "string" == typeof t
              ? Number(t)
              : void 0;
          }
          getRegisterAsGlue(e) {
            var t;
            if (null != (t = this.registers) && t[e]) {
              let t = this.registers[e];
              return "object" == typeof t && "glue" in t
                ? t
                : "object" == typeof t && "dimension" in t
                ? { glue: { dimension: t.dimension } }
                : "number" == typeof t
                ? { glue: { dimension: t } }
                : void 0;
            }
            if (this.parent) return this.parent.getRegisterAsGlue(e);
          }
          getRegisterAsEm(e, t) {
            return vo(this.getRegisterAsDimension(e), t);
          }
          getRegisterAsDimension(e) {
            var t;
            if (null != (t = this.registers) && t[e]) {
              let t = this.registers[e];
              return "object" == typeof t && "glue" in t
                ? t.glue
                : "object" == typeof t && "dimension" in t
                ? t
                : "number" == typeof t
                ? { dimension: t }
                : void 0;
            }
            if (this.parent) return this.parent.getRegisterAsDimension(e);
          }
          setRegister(e, t) {
            void 0 !== t ? (this.registers[e] = t) : delete this.registers[e];
          }
          evaluate(e) {
            if (!e || !("register" in e)) return e;
            let t = this;
            if ("global" in e && e.global) for (; t.parent; ) t = t.parent;
            let n = 1;
            "factor" in e &&
              1 !== e.factor &&
              void 0 !== e.factor &&
              (n = e.factor);
            let i = t.getRegister(e.register);
            if (void 0 === i) return;
            if ("string" == typeof i)
              return { string: Number(i).toString() + i };
            if ("number" == typeof i) return { number: n * i };
            let r = t.evaluate(i);
            return void 0 !== r
              ? "string" in r
                ? { string: Number(i).toString() + r.string }
                : "number" in r
                ? { number: n * r.number }
                : "dimension" in r
                ? u(d({}, r), { dimension: n * r.dimension })
                : "glue" in r
                ? u(d({}, r), {
                    glue: u(d({}, r.glue), { dimension: n * r.glue.dimension }),
                    shrink: r.shrink
                      ? u(d({}, r.shrink), {
                          dimension: n * r.shrink.dimension,
                        })
                      : void 0,
                    grow: r.grow
                      ? u(d({}, r.grow), { dimension: n * r.grow.dimension })
                      : void 0,
                  })
                : e
              : void 0;
          }
          toDimension(e) {
            let t = this.evaluate(e);
            return void 0 === t
              ? null
              : "dimension" in t
              ? t
              : "glue" in t
              ? t.glue
              : "number" in t
              ? { dimension: t.number }
              : null;
          }
          toEm(e, t) {
            if (null === e) return 0;
            let n = this.toDimension(e);
            return null === n ? 0 : bo(n, t) / Aa;
          }
          toNumber(e) {
            if (null === e) return null;
            let t = this.evaluate(e);
            return void 0 === t
              ? null
              : "number" in t
              ? t.number
              : "dimension" in t
              ? t.dimension
              : "glue" in t
              ? t.glue.dimension
              : "string" in t
              ? Number(t.string)
              : null;
          }
          toColor(e) {
            var t, n;
            if (null === e) return null;
            let i = this.evaluate(e);
            return void 0 === i
              ? null
              : "string" in i
              ? null !=
                (n =
                  null == (t = this.colorMap) ? void 0 : t.call(this, i.string))
                ? n
                : i.string
              : null;
          }
          toBackgroundColor(e) {
            var t, n;
            if (null === e) return null;
            let i = this.evaluate(e);
            return void 0 === i
              ? null
              : "string" in i
              ? null !=
                (n =
                  null == (t = this.backgroundColorMap)
                    ? void 0
                    : t.call(this, i.string))
                ? n
                : i.string
              : null;
          }
        },
        Co = ["body", "above", "below", "superscript", "subscript"];
      function zo(e) {
        return "string" == typeof e && Co.includes(e);
      }
      function Ao(e) {
        return void 0 !== e && Array.isArray(e) && 2 === e.length;
      }
      var Eo = class e {
        constructor(e) {
          var t, n, i, r, a, o, s, l, c;
          (this.subsupPlacement = void 0),
            (this.explicitSubsupPlacement = !1),
            (this.type = e.type),
            "string" == typeof e.value && (this.value = e.value),
            (this.command =
              null != (n = null != (t = e.command) ? t : this.value) ? n : ""),
            (this.mode = null != (i = e.mode) ? i : "math"),
            (this.isFunction = null != (r = e.isFunction) && r),
            (this.subsupPlacement = e.limits),
            (this.style = null != (a = d({}, e.style)) ? a : {}),
            (this.displayContainsHighlight =
              null != (o = e.displayContainsHighlight) && o),
            (this.captureSelection = null != (s = e.captureSelection) && s),
            (this.skipBoundary = null != (l = e.skipBoundary) && l),
            (this.verbatimLatex = null != (c = e.verbatimLatex) ? c : void 0),
            e.args && (this.args = e.args),
            e.body && (this.body = e.body),
            (this._changeCounter = 0);
        }
        static createBox(e, t, n) {
          var i;
          if (!t) return null;
          let r = (function (e) {
              let t,
                n = [],
                i = [];
              for (let r of e)
                if (t || r.style) {
                  let e = r.computedStyle;
                  t &&
                  e.color === t.color &&
                  e.backgroundColor === t.backgroundColor &&
                  e.fontSize === t.fontSize
                    ? i.push(r)
                    : (i.length > 0 && n.push(i), (i = [r]), (t = e));
                } else i.push(r);
              return i.length > 0 && n.push(i), n;
            })(t),
            a = [];
          for (let s of r) {
            let t = s[0].style,
              n = Ko(e, s, {
                style: {
                  color: t.color,
                  backgroundColor: t.backgroundColor,
                  fontSize: t.fontSize,
                },
              });
            n && a.push(n);
          }
          if (0 === a.length) return null;
          let o = (
            null != (i = null == n ? void 0 : n.classes) ? i : ""
          ).trim();
          return 1 !== a.length || o || (null != n && n.type)
            ? new oo(a, { classes: o, type: null == n ? void 0 : n.type }).wrap(
                e
              )
            : a[0].wrap(e);
        }
        static serialize(e, t) {
          return Ya.serialize(e, t);
        }
        static commonAncestor(e, t) {
          if (e === t || e.parent === t.parent) return e.parent;
          let n = new WeakSet(),
            { parent: i } = e;
          for (; i; ) n.add(i), (i = i.parent);
          for (i = t.parent; i; ) {
            if (n.has(i)) return i;
            i = i.parent;
          }
        }
        static fromJson(t) {
          return new e(
            "string" == typeof t ? { type: "mord", value: t, mode: "math" } : t
          );
        }
        get latexMode() {
          return "math" === this.mode ? "math" : "text";
        }
        toJson() {
          let e = {};
          if (
            (this.type && (e.type = this.type),
            "math" !== this.mode && (e.mode = this.mode),
            this.command &&
              this.command !== this.value &&
              (e.command = this.command),
            void 0 !== this.value && (e.value = this.value),
            this.style &&
              Object.keys(this.style).length > 0 &&
              (e.style = d({}, this.style)),
            void 0 !== this.verbatimLatex &&
              (e.verbatimLatex = this.verbatimLatex),
            this.subsupPlacement && (e.subsupPlacement = this.subsupPlacement),
            this.explicitSubsupPlacement && (e.explicitSubsupPlacement = !0),
            this.isFunction && (e.isFunction = !0),
            this.displayContainsHighlight && (e.displayContainsHighlight = !0),
            this.isExtensibleSymbol && (e.isExtensibleSymbol = !0),
            this.skipBoundary && (e.skipBoundary = !0),
            this.captureSelection && (e.captureSelection = !0),
            this.args &&
              (e.args = (function (e) {
                return e.map((e) =>
                  null === e
                    ? "<null>"
                    : Array.isArray(e) && e[0] instanceof Eo
                    ? { atoms: e.map((e) => e.toJson()) }
                    : "object" == typeof e && "group" in e
                    ? { group: e.group.map((e) => e.toJson()) }
                    : e
                );
              })(this.args)),
            this._branches)
          )
            for (let t of Object.keys(this._branches))
              this._branches[t] &&
                (e[t] = this._branches[t]
                  .filter((e) => "first" !== e.type)
                  .map((e) => e.toJson()));
          return "mord" === e.type &&
            2 === Object.keys(e).length &&
            "value" in e
            ? e.value
            : e;
        }
        get changeCounter() {
          return this.parent ? this.parent.changeCounter : this._changeCounter;
        }
        set isDirty(e) {
          if (e) {
            this.parent || this._changeCounter++,
              "verbatimLatex" in this && (this.verbatimLatex = void 0),
              (this._children = void 0);
            let { parent: e } = this;
            for (; e; )
              e.parent || e._changeCounter++,
                "verbatimLatex" in e && (e.verbatimLatex = void 0),
                (e._children = void 0),
                (e = e.parent);
          }
        }
        _serialize(e) {
          var t;
          if (
            !e.expandMacro &&
            !e.skipStyles &&
            "string" == typeof this.verbatimLatex
          )
            return this.verbatimLatex;
          let n = ne(this.command, this.mode);
          return null != n && n.serialize
            ? n.serialize(this, e)
            : this.body && this.command
            ? Ja([Xa(this.command, this.bodyToLatex(e)), this.supsubToLatex(e)])
            : this.body
            ? Ja([this.bodyToLatex(e), this.supsubToLatex(e)])
            : this.value && "\u200b" !== this.value
            ? null != (t = this.command)
              ? t
              : re(this.mode, this.value)
            : "";
        }
        bodyToLatex(e) {
          var t;
          return Ya.serialize(
            this.body,
            u(d({}, e), {
              defaultMode: null != (t = e.defaultMode) ? t : this.latexMode,
            })
          );
        }
        aboveToLatex(e) {
          return Ya.serialize(this.above, e);
        }
        belowToLatex(e) {
          return Ya.serialize(this.below, e);
        }
        supsubToLatex(e) {
          let t = "";
          if (
            ((e = u(d({}, e), { defaultMode: "math" })),
            void 0 !== this.branch("subscript"))
          ) {
            let n = Ya.serialize(this.subscript, e);
            0 === n.length
              ? (t += "_{}")
              : 1 === n.length && /^[0-9]$/.test(n)
              ? (t += `_${n}`)
              : (t += `_{${n}}`);
          }
          if (void 0 !== this.branch("superscript")) {
            let n = Ya.serialize(this.superscript, e);
            0 === n.length
              ? (t += "^{}")
              : 1 === n.length
              ? "\u2032" === n
                ? (t += "^\\prime ")
                : "\u2033" === n
                ? (t += "^\\doubleprime ")
                : /^[0-9]$/.test(n)
                ? (t += `^${n}`)
                : (t += `^{${n}}`)
              : (t += `^{${n}}`);
          }
          return t;
        }
        get treeDepth() {
          let e = 1,
            t = this.parent;
          for (; t; ) (t = t.parent), (e += 1);
          return e;
        }
        get inCaptureSelection() {
          let e = this;
          for (; e; ) {
            if (e.captureSelection) return !0;
            e = e.parent;
          }
          return !1;
        }
        get parentPrompt() {
          let e = this.parent;
          for (; e; ) {
            if ("prompt" === e.type && !e.captureSelection) return e;
            e = e.parent;
          }
          return null;
        }
        branch(e) {
          if (zo(e) && this._branches) return this._branches[e];
        }
        get branches() {
          if (!this._branches) return [];
          let e = [];
          for (let t of Co) this._branches[t] && e.push(t);
          return e;
        }
        createBranch(e) {
          return (
            zo(e),
            zo(e)
              ? (this._branches
                  ? this._branches[e] ||
                    (this._branches[e] = [this.makeFirstAtom(e)])
                  : (this._branches = { [e]: [this.makeFirstAtom(e)] }),
                (this.isDirty = !0),
                this._branches[e])
              : []
          );
        }
        get row() {
          return Ao(this.parentBranch) ? this.parentBranch[0] : -1;
        }
        get col() {
          return Ao(this.parentBranch) ? this.parentBranch[1] : -1;
        }
        get body() {
          var e;
          return null == (e = this._branches) ? void 0 : e.body;
        }
        set body(e) {
          this.setChildren(e, "body");
        }
        get superscript() {
          var e;
          return null == (e = this._branches) ? void 0 : e.superscript;
        }
        set superscript(e) {
          this.setChildren(e, "superscript");
        }
        get subscript() {
          var e;
          return null == (e = this._branches) ? void 0 : e.subscript;
        }
        set subscript(e) {
          this.setChildren(e, "subscript");
        }
        get above() {
          var e;
          return null == (e = this._branches) ? void 0 : e.above;
        }
        set above(e) {
          this.setChildren(e, "above");
        }
        get below() {
          var e;
          return null == (e = this._branches) ? void 0 : e.below;
        }
        set below(e) {
          this.setChildren(e, "below");
        }
        get computedStyle() {
          var e, t;
          let n = "string" == typeof this.style.verbatimColor,
            i = "string" == typeof this.style.verbatimBackgroundColor,
            r = d(
              d(
                {},
                null !=
                  (t = null == (e = this.parent) ? void 0 : e.computedStyle)
                  ? t
                  : {}
              ),
              this.style
            );
          return (
            delete r.variant,
            delete r.variantStyle,
            i || delete r.verbatimBackgroundColor,
            n || delete r.verbatimColor,
            r
          );
        }
        applyStyle(e) {
          (this.isDirty = !0),
            (this.style = d(d({}, this.style), e)),
            "none" === this.style.fontFamily && delete this.style.fontFamily,
            "auto" === this.style.fontShape && delete this.style.fontShape,
            "auto" === this.style.fontSeries && delete this.style.fontSeries,
            "none" === this.style.color &&
              (delete this.style.color, delete this.style.verbatimColor),
            "none" === this.style.backgroundColor &&
              (delete this.style.backgroundColor,
              delete this.style.verbatimBackgroundColor),
            "auto" === this.style.fontSize && delete this.style.fontSize;
          for (let t of this.children) t.applyStyle(e);
        }
        getInitialBaseElement() {
          var e, t, n;
          return this.hasEmptyBranch("body")
            ? this
            : (null == (e = this.body) || e[0].type,
              null !=
              (n =
                null == (t = this.body[1]) ? void 0 : t.getInitialBaseElement())
                ? n
                : this);
        }
        getFinalBaseElement() {
          return this.hasEmptyBranch("body")
            ? this
            : this.body[this.body.length - 1].getFinalBaseElement();
        }
        isCharacterBox() {
          return (
            "leftright" !== this.type &&
            "genfrac" !== this.type &&
            "subsup" !== this.type &&
            "delim" !== this.type &&
            "array" !== this.type &&
            "surd" !== this.type &&
            "mord" === this.getFinalBaseElement().type
          );
        }
        hasEmptyBranch(e) {
          let t = this.branch(e);
          return !t || (t.length, t[0].type, 1 === t.length);
        }
        setChildren(e, t) {
          var n;
          if (!e || (zo(t), !zo(t))) return;
          null == (n = e[0]) || n.type;
          let i = [this.makeFirstAtom(t), ...e];
          this._branches
            ? (this._branches[t] = i)
            : (this._branches = { [t]: i });
          for (let r of e) (r.parent = this), (r.parentBranch = t);
          this.isDirty = !0;
        }
        makeFirstAtom(t) {
          let n = new e({ type: "first", mode: this.mode });
          return (n.parent = this), (n.parentBranch = t), n;
        }
        addChild(e, t) {
          e.type,
            this.createBranch(t).push(e),
            (this.isDirty = !0),
            (e.parent = this),
            (e.parentBranch = t);
        }
        addChildBefore(e, t) {
          t.parentBranch;
          let n = this.createBranch(t.parentBranch);
          n.splice(n.indexOf(t), 0, e),
            (this.isDirty = !0),
            (e.parent = this),
            (e.parentBranch = t.parentBranch);
        }
        addChildAfter(e, t) {
          t.parentBranch;
          let n = this.createBranch(t.parentBranch);
          n.splice(n.indexOf(t) + 1, 0, e),
            (this.isDirty = !0),
            (e.parent = this),
            (e.parentBranch = t.parentBranch);
        }
        addChildren(e, t) {
          let n = this.createBranch(t);
          for (let i of e) (i.parent = this), (i.parentBranch = t), n.push(i);
          this.isDirty = !0;
        }
        addChildrenAfter(e, t) {
          0 === e.length || e[0].type, t.parentBranch;
          let n = this.createBranch(t.parentBranch);
          n.splice(n.indexOf(t) + 1, 0, ...e), (this.isDirty = !0);
          for (let i of e) (i.parent = this), (i.parentBranch = t.parentBranch);
          return e[e.length - 1];
        }
        removeBranch(e) {
          let t = this.branch(e);
          if ((zo(e) && (this._branches[e] = void 0), !t)) return [];
          for (let n of t) (n.parent = void 0), (n.parentBranch = void 0);
          return t[0].type, t.shift(), (this.isDirty = !0), t;
        }
        removeChild(e) {
          if ((e.parent, "first" === e.type)) return;
          let t = this.branch(e.parentBranch),
            n = t.indexOf(e);
          t.splice(n, 1),
            (this.isDirty = !0),
            (e.parent = void 0),
            (e.parentBranch = void 0);
        }
        get siblings() {
          return this.parent ? this.parent.branch(this.parentBranch) : [];
        }
        get firstSibling() {
          return this.siblings[0];
        }
        get lastSibling() {
          let { siblings: e } = this;
          return e[e.length - 1];
        }
        get isFirstSibling() {
          return this === this.firstSibling;
        }
        get isLastSibling() {
          return this === this.lastSibling;
        }
        get hasNoSiblings() {
          return 1 === this.siblings.length;
        }
        get leftSibling() {
          this.parent;
          let e = this.parent.branch(this.parentBranch);
          return e[e.indexOf(this) - 1];
        }
        get rightSibling() {
          this.parent;
          let e = this.parent.branch(this.parentBranch);
          return e[e.indexOf(this) + 1];
        }
        get hasChildren() {
          return !!(this._branches && this.children.length > 0);
        }
        get firstChild() {
          return this.hasChildren, this.children[0];
        }
        get lastChild() {
          this.hasChildren;
          let { children: e } = this;
          return e[e.length - 1];
        }
        get children() {
          if (this._children) return this._children;
          if (!this._branches) return [];
          let e = [];
          for (let t of Co)
            if (this._branches[t])
              for (let n of this._branches[t]) e.push(...n.children), e.push(n);
          return (this._children = e), e;
        }
        render(e) {
          if ("first" === this.type && !e.atomIdsSettings) return null;
          let t = ne(this.command, this.mode);
          if (null != t && t.render) return t.render(this, e);
          let n = new Lo({ parent: e }, this.style),
            i = this.createBox(n, { classes: this.parent ? "" : "ML__base" });
          return i
            ? (!this.subsupPlacement &&
                (this.superscript || this.subscript) &&
                (i = this.attachSupsub(n, { base: i })),
              i.wrap(n))
            : null;
        }
        attachSupsub(t, n) {
          var i;
          let r = n.base,
            a = this.superscript,
            o = this.subscript;
          if (!a && !o) return r;
          let s = null,
            l = null,
            c = null != (i = n.isCharacterBox) ? i : this.isCharacterBox(),
            d = 0;
          if (a) {
            let n = new Lo({ parent: t, mathstyle: "superscript" });
            (s = e.createBox(n, a)),
              c || (d = r.height - t.metrics.supDrop * n.scalingFactor);
          }
          let u,
            h = 0;
          if (o) {
            let n = new Lo({ parent: t, mathstyle: "subscript" });
            (l = e.createBox(n, o)),
              c || (h = r.depth + t.metrics.subDrop * n.scalingFactor);
          }
          u = t.isDisplayStyle
            ? t.metrics.sup1
            : t.isCramped
            ? t.metrics.sup3
            : t.metrics.sup2;
          let p = 0.05 / t.scalingFactor,
            m = null;
          if (l && s) {
            (d = Math.max(d, u, s.depth + 0.25 * t.metrics.xHeight)),
              (h = Math.max(h, t.metrics.sub2));
            let e = t.metrics.defaultRuleThickness;
            if (d - s.depth - (l.height - h) < 4 * e) {
              h = 4 * e - (d - s.depth) + l.height;
              let n = 0.8 * t.metrics.xHeight - (d - s.depth);
              n > 0 && ((d += n), (h -= n));
            }
            let n = this.isExtensibleSymbol && r.italic ? -r.italic : 0;
            m = new mo({
              individualShift: [
                { box: l, shift: h, marginLeft: n },
                { box: s, shift: -d },
              ],
            }).wrap(t);
          } else
            l && !s
              ? ((h = Math.max(h, t.metrics.sub1, l.height - 0.3448)),
                (m = new mo({
                  shift: h,
                  children: [
                    {
                      box: l,
                      marginRight: p,
                      marginLeft: this.isCharacterBox() ? -r.italic : 0,
                    },
                  ],
                })))
              : !l &&
                s &&
                ((d = Math.max(d, u, s.depth + 0.10775)),
                (m = new mo({
                  shift: -d,
                  children: [{ box: s, marginRight: p }],
                })));
          return new oo(
            [
              r,
              new oo(m, {
                caret: this.caret,
                isSelected: this.isSelected,
                classes: "msubsup",
              }),
            ],
            { type: n.type }
          );
        }
        attachLimits(t, n) {
          let i = this.superscript
              ? e.createBox(
                  new Lo({ parent: t, mathstyle: "superscript" }, this.style),
                  this.superscript
                )
              : null,
            r = this.subscript
              ? e.createBox(
                  new Lo({ parent: t, mathstyle: "subscript" }, this.style),
                  this.subscript
                )
              : null;
          return i || r
            ? (function (e, t) {
                var n, i, r, a, o;
                let s = e.metrics,
                  l = new oo(t.base),
                  c = null != (n = t.baseShift) ? n : 0,
                  d = null != (i = t.slant) ? i : 0,
                  u = 0,
                  h = 0;
                t.above &&
                  (u =
                    null != (r = t.aboveShift)
                      ? r
                      : Math.max(
                          s.bigOpSpacing1,
                          s.bigOpSpacing3 - t.above.depth
                        )),
                  t.below &&
                    (h =
                      null != (a = t.belowShift)
                        ? a
                        : Math.max(
                            s.bigOpSpacing2,
                            s.bigOpSpacing4 - t.below.height
                          ));
                let p = null;
                if (t.below && t.above) {
                  let n =
                    s.bigOpSpacing5 +
                    t.below.height +
                    t.below.depth +
                    h +
                    l.depth +
                    c;
                  p = new mo({
                    bottom: n,
                    children: [
                      s.bigOpSpacing5,
                      { box: t.below, marginLeft: -d, classes: ["ML__center"] },
                      h,
                      { box: l, classes: ["ML__center"] },
                      u,
                      { box: t.above, marginLeft: d, classes: ["ML__center"] },
                      s.bigOpSpacing5,
                    ],
                  }).wrap(e);
                } else if (t.below && !t.above)
                  p = new mo({
                    top: l.height - c,
                    children: [
                      s.bigOpSpacing5,
                      { box: t.below, marginLeft: -d, classes: ["ML__center"] },
                      h,
                      { box: l, classes: ["ML__center"] },
                    ],
                  }).wrap(e);
                else if (!t.below && t.above) {
                  let n = l.depth + c;
                  p = new mo({
                    bottom: n,
                    children: [
                      { box: l, classes: ["ML__center"] },
                      u,
                      { box: t.above, marginLeft: d, classes: ["ML__center"] },
                      s.bigOpSpacing5,
                    ],
                  }).wrap(e);
                } else {
                  let t = l.depth + c;
                  p = new mo({
                    bottom: t,
                    children: [{ box: l }, s.bigOpSpacing5],
                  }).wrap(e);
                }
                return new oo(p, { type: null != (o = t.type) ? o : "op" });
              })(t, u(d({}, n), { above: i, below: r }))
            : n.base.wrap(t);
        }
        bind(e, t) {
          if (!t || e.isPhantom || "\u200b" === this.value) return t;
          let n = this.parent;
          for (; n && !n.captureSelection; ) n = n.parent;
          return (
            (null != n && n.captureSelection) ||
              (this.id || (this.id = e.makeID()), (t.atomID = this.id)),
            t
          );
        }
        createBox(t, n) {
          var i, r, a, o;
          let s = null != (i = this.value) ? i : this.body,
            l =
              null != (r = null == n ? void 0 : n.boxType) ? r : io(this.type),
            c = null != (a = null == n ? void 0 : n.classes) ? a : "";
          "text" === this.mode && (c += " ML__text");
          let h =
            "string" == typeof s || void 0 === s
              ? new oo(null != s ? s : null, {
                  type: l,
                  isSelected: this.isSelected,
                  mode: this.mode,
                  maxFontSize: t.scalingFactor,
                  style: u(d({ variant: "normal" }, this.style), {
                    fontSize: Math.max(1, t.size + t.mathstyle.sizeDelta),
                  }),
                  letterShapeStyle: t.letterShapeStyle,
                  classes: c,
                })
              : null != (o = e.createBox(t, s, { type: l, classes: c }))
              ? o
              : new oo(null);
          return (
            t.isTight && (h.isTight = !0),
            ("math" !== this.mode || "main" === this.style.variant) &&
              (h.italic = 0),
            (h.right = h.italic),
            this.bind(t, h),
            this.caret &&
              !this.superscript &&
              !this.subscript &&
              (h.caret = this.caret),
            h
          );
        }
        isDigit() {
          var e;
          return "mord" === this.type && this.value
            ? /^[\d,\.]$/.test(this.value)
            : "group" === this.type &&
                2 === (null == (e = this.body) ? void 0 : e.length) &&
                "first" === this.body[0].type &&
                "," === this.body[1].value;
        }
        asDigit() {
          var e;
          return "mord" === this.type &&
            this.value &&
            /^[\d,\.]$/.test(this.value)
            ? this.value
            : "group" === this.type &&
              2 === (null == (e = this.body) ? void 0 : e.length) &&
              "first" === this.body[0].type &&
              "," === this.body[1].value
            ? "."
            : "";
        }
      };
      function Ko(e, t, n) {
        var i, r, a, o, s;
        if (!t || 0 === t.length) return null;
        let l = new Lo({ parent: e }, n.style),
          c = !(null != (i = l.atomIdsSettings) && i.groupNumbers),
          h = [];
        if (1 === t.length) {
          let e = t[0],
            n = e.render(l);
          n && (c && e.isSelected && n.selected(!0), (h = [n]));
        } else {
          let e = "",
            n = !0;
          for (let i of t) {
            null != (r = l.atomIdsSettings) &&
              r.groupNumbers &&
              e &&
              ((n && i.isDigit()) || (!n && Do(i))) &&
              (l.atomIdsSettings.overrideID = e);
            let t = i.render(l);
            l.atomIdsSettings && (l.atomIdsSettings.overrideID = void 0),
              t &&
                (null != (a = l.atomIdsSettings) &&
                  a.groupNumbers &&
                  ((i.isDigit() || Do(i)) &&
                    (!e || n !== i.isDigit()) &&
                    ((n = i.isDigit()), (e = null != (o = i.id) ? o : "")),
                  e &&
                    (!(i.isDigit() || Do(i)) ||
                      !i.hasEmptyBranch("superscript") ||
                      !i.hasEmptyBranch("subscript")) &&
                    (e = "")),
                c && i.isSelected && t.selected(!0),
                h.push(t));
          }
        }
        if (0 === h.length) return null;
        let p = new oo(
          h,
          u(d({ isTight: l.isTight }, n), {
            type: null != (s = n.type) ? s : "lift",
          })
        );
        return (p.isSelected = h.every((e) => e.isSelected)), p.wrap(l);
      }
      function Do(e) {
        return "text" === e.mode;
      }
      var To = class e extends Eo {
        constructor(e, t, n) {
          super({
            type: "text",
            command: e,
            mode: "text",
            displayContainsHighlight: !0,
          }),
            (this.value = t),
            (this.verbatimLatex = t),
            this.applyStyle(n);
        }
        static fromJson(t) {
          return new e(t.command, t.value, t.style);
        }
        render(e) {
          let t = this.createBox(e);
          return this.caret && (t.caret = this.caret), t;
        }
        _serialize(e) {
          var t;
          return null != (t = this.verbatimLatex)
            ? t
            : ae("text", this.value.codePointAt(0));
        }
      };
      function Bo(e, t) {
        return e[0] === t[0] && e[1] === t[1] ? "equal" : "different";
      }
      function $o(e) {
        let t = 1 / 0,
          n = -1 / 0;
        for (let i of e.ranges)
          (t = Math.min(t, i[0], i[1])), (n = Math.max(n, i[0], i[1]));
        return [t, n];
      }
      function Po(e, t, n) {
        return n
          ? (function (e, t) {
              if (!t) return "";
              if ("string" == typeof t) return t;
              if (!e || void 0 === t.after) return t.value;
              let n = !1,
                i = !1,
                r = !1,
                a = !1,
                o = !1,
                s = !1,
                l = !1,
                c = !1,
                d = !1,
                u = !1,
                h = !1,
                p = !1,
                m = !1,
                f = !1,
                y = !1,
                g = e[0],
                b = 0;
              for (
                ;
                null != g && g.type && /msubsup|placeholder/.test(g.type);

              )
                (b += 1), (g = e[b]);
              return (
                (n = !g || "first" === g.type),
                g &&
                  ((f = "text" === g.mode),
                  (i = !f && "mord" === g.type && B.test(g.value)),
                  (r = !f && "mord" === g.type && /\d+$/.test(g.value)),
                  (a = !f && g.isFunction),
                  (o = "genfrac" === g.type),
                  (s = "surd" === g.type),
                  (l = "mbin" === g.type),
                  (c = "mrel" === g.type),
                  (d = "mop" === g.type),
                  (u = "mpunct" === g.type || "minner" === g.type),
                  (h = "array" === g.type),
                  (p = "mopen" === g.type),
                  (m = "mclose" === g.type || "leftright" === g.type),
                  (y = "space" === g.type)),
                (t.after.includes("nothing") && n) ||
                (t.after.includes("letter") && i) ||
                (t.after.includes("digit") && r) ||
                (t.after.includes("function") && a) ||
                (t.after.includes("frac") && o) ||
                (t.after.includes("surd") && s) ||
                (t.after.includes("binop") && l) ||
                (t.after.includes("relop") && c) ||
                (t.after.includes("operator") && d) ||
                (t.after.includes("punct") && u) ||
                (t.after.includes("array") && h) ||
                (t.after.includes("openfence") && p) ||
                (t.after.includes("closefence") && m) ||
                (t.after.includes("text") && f) ||
                (t.after.includes("space") && y)
                  ? t.value
                  : ""
              );
            })(e, n[t])
          : "";
      }
      var Oo = {
        "&": "\\&",
        "%": "\\%",
        $: "\\$",
        "''": "^{\\doubleprime}",
        alpha: "\\alpha",
        delta: "\\delta",
        Delta: "\\Delta",
        pi: "\\pi",
        Pi: "\\Pi",
        theta: "\\theta",
        Theta: "\\Theta",
        ii: {
          after:
            "nothing+digit+function+frac+surd+binop+relop+punct+array+openfence+closefence+space+text",
          value: "\\imaginaryI",
        },
        jj: {
          after:
            "nothing+digit+function+frac+surd+binop+relop+punct+array+openfence+closefence+space+text",
          value: "\\imaginaryJ",
        },
        ee: {
          after:
            "nothing+digit+function+frac+surd+binop+relop+punct+array+openfence+closefence+space+text",
          value: "\\exponentialE",
        },
        nabla: "\\nabla",
        grad: "\\nabla",
        del: "\\partial",
        deg: { after: "digit+space", value: "\\degree" },
        infty: "\\infty",
        "\u221e": "\\infty",
        oo: {
          after:
            "nothing+digit+frac+surd+binop+relop+punct+array+openfence+closefence+space",
          value: "\\infty",
        },
        "\u2211": "\\sum",
        sum: "\\sum_{#?}^{#?}",
        int: "\\int_{#?}^{#?}",
        prod: "\\prod_{#?}^{#?}",
        sqrt: "\\sqrt{#?}",
        "\u2206": "\\differentialD",
        "\u2202": "\\differentialD",
        arcsin: "\\arcsin",
        arccos: "\\arccos",
        arctan: "\\arctan",
        arcsec: "\\arcsec",
        arccsc: "\\arccsc",
        arsinh: "\\arsinh",
        arcosh: "\\arcosh",
        artanh: "\\artanh",
        arcsech: "\\arcsech",
        arccsch: "\\arccsch",
        arg: "\\arg",
        ch: "\\ch",
        cosec: "\\cosec",
        cosh: "\\cosh",
        cot: "\\cot",
        cotg: "\\cotg",
        coth: "\\coth",
        csc: "\\csc",
        ctg: "\\ctg",
        cth: "\\cth",
        sec: "\\sec",
        sinh: "\\sinh",
        sh: "\\sh",
        tanh: "\\tanh",
        tg: "\\tg",
        th: "\\th",
        sin: "\\sin",
        cos: "\\cos",
        tan: "\\tan",
        lg: "\\lg",
        lb: "\\lb",
        log: "\\log",
        ln: "\\ln",
        exp: "\\exp",
        lim: "\\lim_{#?}",
        dx: {
          after:
            "nothing+digit+function+frac+surd+binop+relop+punct+array+openfence+closefence+space+text",
          value: "\\differentialD x",
        },
        dy: {
          after:
            "nothing+digit+function+frac+surd+binop+relop+punct+array+openfence+closefence+space+text",
          value: "\\differentialD y",
        },
        dt: {
          after:
            "nothing+digit+function+frac+surd+binop+relop+punct+array+openfence+closefence+space+text",
          value: "\\differentialD t",
        },
        AA: "\\forall",
        EE: "\\exists",
        "!EE": "\\nexists",
        "&&": "\\land",
        xin: {
          after: "nothing+text+relop+punct+openfence+space",
          value: "x \\in",
        },
        in: { after: "nothing+letter+closefence", value: "\\in" },
        "!in": "\\notin",
        NN: "\\mathbb{N}",
        ZZ: "\\Z",
        QQ: "\\Q",
        RR: "\\R",
        CC: "\\C",
        xx: "\\times",
        "+-": "\\pm",
        "\u2260": "\\ne",
        "!=": "\\ne",
        "\u2265": "\\ge",
        ">=": "\\ge",
        "\u2264": "\\le",
        "<=": "\\le",
        "<<": "\\ll",
        ">>": "\\gg",
        "~~": "\\approx",
        "\u2248": "\\approx",
        "?=": "\\questeq",
        "\xf7": "\\div",
        "\xac": "\\neg",
        ":=": "\\coloneq",
        "::": "\\Colon",
        "(:": "\\langle",
        ":)": "\\rangle",
        beta: "\\beta",
        chi: "\\chi",
        epsilon: "\\epsilon",
        varepsilon: "\\varepsilon",
        eta: {
          after:
            "nothing+digit+function+frac+surd+binop+relop+punct+array+openfence+closefence+space+text",
          value: "\\eta",
        },
        gamma: "\\gamma",
        Gamma: "\\Gamma",
        iota: "\\iota",
        kappa: "\\kappa",
        lambda: "\\lambda",
        Lambda: "\\Lambda",
        mu: {
          after:
            "nothing+digit+function+frac+surd+binop+relop+punct+array+openfence+closefence+space+text",
          value: "\\mu",
        },
        nu: {
          after:
            "nothing+digit+function+frac+surd+binop+relop+punct+array+openfence+closefence+space+text",
          value: "\\nu",
        },
        "\xb5": "\\mu",
        phi: {
          after:
            "nothing+digit+function+frac+surd+binop+relop+punct+array+openfence+closefence+space+text",
          value: "\\phi",
        },
        Phi: {
          after:
            "nothing+digit+function+frac+surd+binop+relop+punct+array+openfence+closefence+space+text",
          value: "\\Phi",
        },
        varphi: "\\varphi",
        psi: {
          after:
            "nothing+digit+function+frac+surd+binop+relop+punct+array+openfence+closefence+space+text",
          value: "\\psi",
        },
        Psi: {
          after:
            "nothing+digit+function+frac+surd+binop+relop+punct+array+openfence+closefence+space+text",
          value: "\\Psi",
        },
        rho: {
          after:
            "nothing+digit+function+frac+surd+binop+relop+punct+array+openfence+closefence+space+text",
          value: "\\rho",
        },
        sigma: "\\sigma",
        Sigma: "\\Sigma",
        tau: {
          after:
            "nothing+digit+function+frac+surd+binop+relop+punct+array+openfence+closefence+space+text",
          value: "\\tau",
        },
        vartheta: "\\vartheta",
        upsilon: "\\upsilon",
        xi: {
          after:
            "nothing+digit+function+frac+surd+binop+relop+punct+array+openfence+closefence+space",
          value: "\\xi",
        },
        Xi: {
          after:
            "nothing+digit+function+frac+surd+binop+relop+punct+array+openfence+closefence+space+text",
          value: "\\Xi",
        },
        zeta: "\\zeta",
        omega: "\\omega",
        Omega: "\\Omega",
        "\u03a9": "\\omega",
        forall: "\\forall",
        exists: "\\exists",
        "!exists": "\\nexists",
        ":.": "\\therefore",
        liminf: "\\liminf_{#?}",
        limsup: "\\limsup_{#?}",
        argmin: "\\operatorname*{arg~min}_{#?}",
        argmax: "\\operatorname*{arg~max}_{#?}",
        det: "\\det",
        mod: "\\mod",
        max: "\\max",
        min: "\\min",
        erf: "\\operatorname{erf}",
        erfc: "\\operatorname{erfc}",
        bessel: "\\operatorname{bessel}",
        mean: "\\operatorname{mean}",
        median: "\\operatorname{median}",
        fft: "\\operatorname{fft}",
        lcm: "\\operatorname{lcm}",
        gcd: "\\operatorname{gcd}",
        randomReal: "\\operatorname{randomReal}",
        randomInteger: "\\operatorname{randomInteger}",
        Re: "\\operatorname{Re}",
        Im: "\\operatorname{Im}",
        mm: { after: "nothing+digit+operator", value: "\\operatorname{mm}" },
        cm: { after: "nothing+digit+operator", value: "\\operatorname{cm}" },
        km: { after: "nothing+digit+operator", value: "\\operatorname{km}" },
        kg: { after: "nothing+digit+operator", value: "\\operatorname{kg}" },
        "...": "\\ldots",
        "+...": "+\\cdots",
        "-...": "-\\cdots",
        "->...": "\\to\\cdots",
        "--\x3e...": "\\longrightarrow\\cdots",
        "->": "\\to",
        "|->": "\\mapsto",
        "--\x3e": "\\longrightarrow",
        "<--": "\\longleftarrow",
        "=>": "\\Rightarrow",
        "==>": "\\Longrightarrow",
        "<=>": "\\Leftrightarrow",
        "<->": "\\leftrightarrow",
        "(.)": "\\odot",
        "(+)": "\\oplus",
        "(/)": "\\oslash",
        "(*)": "\\otimes",
        "(-)": "\\ominus",
        "||": "\\Vert",
        "{": "\\{",
        "}": "\\}",
        "*": "\\cdot",
        "**": "\\star",
        "***": "\\ast",
        "//": "\\slash",
        "\\\\": "\\backslash",
        setminus: "\\backslash",
        "|><": "\\ltimes",
        "><|": "\\rtimes",
        "|><|": "\\bowtie",
        "-:": "\\div",
        divide: "\\div",
        "@": "\\circ",
        "^^": "\\wedge",
        "^^^": "\\bigwedge",
        vv: "\\vee",
        vvv: "\\bigvee",
        nn: "\\cap",
        nnn: "\\bigcap",
        uu: "\\cup",
        uuu: "\\bigcup",
        "-=": "\\equiv",
        "~=": "\\cong",
        lt: "<",
        "lt=": "\\leq",
        gt: ">",
        "gt=": "\\geq",
        "-<": "\\prec",
        "-lt": "\\prec",
        "-<=": "\\preceq",
        ">-=": "\\succeq",
        prop: "\\propto",
        diamond: "\\diamond",
        square: "\\square",
        iff: "\\iff",
        sub: "\\subset",
        sup: "\\supset",
        sube: "\\subseteq",
        supe: "\\supseteq",
        uarr: "\\uparrow",
        darr: "\\downarrow",
        rarr: "\\rightarrow",
        rArr: "\\Rightarrow",
        larr: "\\leftarrow",
        lArr: "\\Leftarrow",
        harr: "\\leftrightarrow",
        hArr: "\\Leftrightarrow",
        aleph: "\\aleph",
        and: "\\land",
        or: "\\lor",
        not: "\\neg",
        "_|_": "\\bot",
        TT: "\\top",
        "|--": "\\vdash",
        "|==": "\\models",
        "|__": "\\lfloor",
        "__|": "\\rfloor",
        "|~": "\\lceil",
        "~|": "\\rceil",
        ">->": "\\rightarrowtail",
        "->>": "\\twoheadrightarrow",
        ">->>": "\\twoheadrightarrowtail",
        frac: "\\frac{#?}{#?}",
        cbrt: "\\sqrt[3]{#?}",
        nthroot: "\\sqrt[#?]{#?}",
      };
      function Fo(e, t) {
        var n;
        let i = null != (n = null == t ? void 0 : t.format) ? n : "auto";
        return (
          "auto" === i &&
            ([i, e] = (function (e) {
              if ((e = e.trim()).length <= 1) return ["latex", e];
              let t;
              return (
                ([t, e] = Vo(e)),
                t
                  ? ["latex", e]
                  : e.startsWith("`") && e.endsWith("`")
                  ? ["ascii-math", (e = e.substring(1, e.length - 1))]
                  : e.includes("\\")
                  ? ["latex", e]
                  : /\$.+\$/.test(e)
                  ? ["latex", `\\text{${e}}`]
                  : [void 0, e]
              );
            })(e)),
          "ascii-math" === i
            ? [
                "ascii-math",
                No(
                  (e = (e = (e = (e = (e = (e = e.replace(
                    /\u2061/gu,
                    ""
                  )).replace(/\u3016/gu, "{")).replace(
                    /\u3017/gu,
                    "}"
                  )).replace(/([^\\])sinx/g, "$1\\sin x")).replace(
                    /([^\\])cosx/g,
                    "$1\\cos x "
                  )).replace(/\u2013/g, "-")),
                  { inlineShortcuts: null == t ? void 0 : t.inlineShortcuts }
                ),
              ]
            : ["latex", e]
        );
      }
      function No(e, t) {
        var n, i, r;
        if (!e) return "";
        let a,
          o = !1,
          s = null != (n = t.inlineShortcuts) ? n : Oo;
        if (
          (!o &&
            (e.startsWith("^") || e.startsWith("_")) &&
            ((a = qo(e.slice(1), { inlineShortcuts: s, noWrap: !0 })),
            (e = e[0] + "{" + a.match + "}"),
            (e += No(a.rest, t)),
            (o = !0)),
          o ||
            ((a = e.match(/^(sqrt|\u221A)(.*)/)),
            a &&
              ((a = qo(a[2], { inlineShortcuts: s, noWrap: !0 })),
              (e =
                "\\sqrt{" +
                (null != (i = a.match) ? i : "\\placeholder{}") +
                "}"),
              (e += No(a.rest, t)),
              (o = !0))),
          o ||
            ((a = e.match(/^(\\cbrt|\u221B)(.*)/)),
            a &&
              ((a = qo(a[2], { inlineShortcuts: s, noWrap: !0 })),
              (e =
                "\\sqrt[3]{" +
                (null != (r = a.match) ? r : "\\placeholder{}") +
                "}"),
              (e += No(a.rest, t)),
              (o = !0))),
          o ||
            ((a = e.match(/^abs(.*)/)),
            a &&
              ((a = qo(a[1], { inlineShortcuts: s, noWrap: !0 })),
              (e = "\\left|" + a.match + "\\right|"),
              (e += No(a.rest, t)),
              (o = !0))),
          o ||
            ((a = e.match(/^["\u201d\u201c](.*?)["\u201d\u201c](.*)/)),
            a && ((e = "\\text{" + a[1] + "}"), (e += No(a[2], t)), (o = !0))),
          o ||
            ((a = e.match(/^([^a-zA-Z\(\{\[\_\^\\\s"]+)(.*)/)),
            a && ((e = Ro(a[1], s)), (e += No(a[2], t)), (o = !0))),
          !o &&
            /^([fgh])[^a-zA-Z]/.test(e) &&
            ((a = qo(e.slice(1), { inlineShortcuts: s, noWrap: !0 })),
            (e =
              "(" === e[1]
                ? e[0] + "\\left(" + a.match + "\\right)"
                : e[0] + a.match),
            (e += No(a.rest, t)),
            (o = !0)),
          o ||
            ((a = e.match(/^([a-zA-Z]+)(.*)/)),
            a && ((e = Ro(a[1], s)), (e += No(a[2], t)), (o = !0))),
          !o)
        )
          if (
            ((a = qo(e, { inlineShortcuts: s, noWrap: !0 })),
            a.match && "/" === a.rest[0])
          ) {
            let n = qo(a.rest.slice(1), { inlineShortcuts: s, noWrap: !0 });
            n.match &&
              (e = "\\frac{" + a.match + "}{" + n.match + "}" + No(n.rest, t)),
              (o = !0);
          } else
            a.match &&
              ((e = e.startsWith("(")
                ? "\\left(" + a.match + "\\right)" + No(a.rest, t)
                : a.match + No(a.rest, t)),
              (o = !0));
        return (
          o ||
            ((a = e.match(/^(\s+)(.*)$/)),
            a && ((e = " " + No(a[2], t)), (o = !0))),
          e
        );
      }
      function qo(e, t) {
        let n = "",
          i = (e = e.trim()),
          r = e.charAt(0),
          a = { "(": ")", "{": "}", "[": "]" }[r];
        if (a) {
          let o = 1,
            s = 1;
          for (; s < e.length && o > 0; )
            e[s] === r && o++, e[s] === a && o--, s++;
          0 === o
            ? (t.noWrap && "(" === r
                ? (n = No(e.substring(1, s - 1), t))
                : ("{" === r && "}" === a && ((r = "\\{"), (a = "\\}")),
                  (n =
                    "\\left" +
                    r +
                    No(e.substring(1, s - 1), t) +
                    "\\right" +
                    a)),
              (i = e.slice(Math.max(0, s))))
            : ((n = e.substring(1, s)), (i = ""));
        } else {
          let r = e.match(/^([a-zA-Z]+)/);
          if (r) {
            let n = Po(null, e, t.inlineShortcuts);
            if (n)
              return (
                (n = n.replace("_{#?}", "")),
                (n = n.replace("^{#?}", "")),
                { match: n, rest: e.slice(n.length) }
              );
          }
          if (((r = e.match(/^([a-zA-Z])/)), r))
            return { match: r[1], rest: e.slice(1) };
          if (((r = e.match(/^(-)?\d+(\.\d*)?/)), r))
            return { match: r[0], rest: e.slice(r[0].length) };
          /^\\(left|right)/.test(e) ||
            ((r = e.match(/^(\\[a-zA-Z]+)/)),
            r && ((i = e.slice(r[1].length)), (n = r[1])));
        }
        return { match: n, rest: i };
      }
      function Ro(e, t) {
        let n = Po(null, e, t);
        return (
          n
            ? ((n = n.replace("_{#?}", "")),
              (n = n.replace("^{#?}", "")),
              (n += " "))
            : (n = e),
          n
        );
      }
      var Io = [
        ["\\[", "\\]"],
        ["\\(", "\\)"],
        ["$$", "$$"],
        ["$", "$"],
        ["\\begin{math}", "\\end{math}"],
        ["\\begin{displaymath}", "\\end{displaymath}"],
        ["\\begin{equation}", "\\end{equation}"],
        ["\\begin{equation*}", "\\end{equation*}"],
      ];
      function Vo(e) {
        let t = e.trim();
        for (let n of Io)
          if (t.startsWith(n[0]) && t.endsWith(n[1]))
            return [!0, t.substring(n[0].length, t.length - n[1].length)];
        return [!1, e];
      }
      var jo = (e, t, n) => (
          Io.some((e) => t.startsWith(e[0]) && t.endsWith(e[1])) ||
            (t = `$$ ${t} $$`),
          t
        ),
        Ho = class e {
          constructor(t) {
            e._modes[t] = this;
          }
          static onPaste(t, n, i) {
            var r;
            if (!n.contentEditable && "none" === n.userSelect)
              return n.model.announce("plonk"), !1;
            if ("string" == typeof i) {
              let e = new DataTransfer();
              e.setData("text/plain", i), (i = e);
            }
            let a = new ClipboardEvent("paste", {
              clipboardData: i,
              cancelable: !0,
            });
            return (
              !(null == (r = n.host) || !r.dispatchEvent(a)) &&
              e._modes[t].onPaste(n, i)
            );
          }
          static onCopy(e, t) {
            var n;
            if (!t.clipboardData) return;
            if (!e.contentEditable && "none" === e.userSelect)
              return void e.model.announce("plonk");
            let i = e.model,
              r = i.selectionIsCollapsed ? [0, i.lastOffset] : $o(i.selection),
              a = i.getAtoms(r);
            if (a.every((e) => "text" === e.mode || !e.mode))
              t.clipboardData.setData(
                "text/plain",
                a
                  .filter((e) => e instanceof To)
                  .map((e) => e.value)
                  .join("")
              );
            else if (a.every((e) => "latex" === e.mode))
              t.clipboardData.setData(
                "text/plain",
                i
                  .getAtoms(r, { includeChildren: !0 })
                  .map((e) => {
                    var t;
                    return null != (t = e.value) ? t : "";
                  })
                  .join("")
              );
            else {
              let l;
              (l =
                1 === a.length && void 0 !== a[0].verbatimLatex
                  ? a[0].verbatimLatex
                  : i.getValue(r, "latex-expanded")),
                t.clipboardData.setData("application/x-latex", l);
              try {
                t.clipboardData.setData(
                  "text/plain",
                  e.options.onExport(e, l, r)
                );
              } catch (o) {}
              if (1 === a.length) {
                let e = a[0];
                ("root" === e.type || "group" === e.type) &&
                  (a = e.body.filter((e) => "first" !== e.type));
              }
              try {
                t.clipboardData.setData(
                  "application/json+mathlive",
                  JSON.stringify(a.map((e) => e.toJson()))
                );
              } catch (o) {}
              if (
                null !=
                  (n = window[Symbol.for("io.cortexjs.compute-engine")]) &&
                n.ComputeEngine
              ) {
                let e = window.MathfieldElement.computeEngine;
                if (e)
                  try {
                    e.jsonSerializationOptions = { metadata: ["latex"] };
                    let n = e.parse(i.getValue(r, "latex-unstyled")),
                      a = JSON.stringify(n.json);
                    a && t.clipboardData.setData("application/json", a);
                  } catch (s) {}
              }
            }
            t.preventDefault();
          }
          static insert(t, n, i = {}) {
            var r;
            let a =
              "auto" === i.mode ? t.mode : null != (r = i.mode) ? r : t.mode;
            return e._modes[a].insert(t, n, i);
          }
          onPaste(e, t) {
            return !1;
          }
          insert(e, t, n) {
            return !1;
          }
        };
      Ho._modes = {};
      var Wo = Ho,
        Uo = [
          { key: "left", command: "moveToPreviousChar" },
          { key: "right", command: "moveToNextChar" },
          { key: "up", command: "moveUp" },
          { key: "down", command: "moveDown" },
          { key: "shift+[ArrowLeft]", command: "extendSelectionBackward" },
          { key: "shift+[ArrowRight]", command: "extendSelectionForward" },
          { key: "shift+[ArrowUp]", command: "extendSelectionUpward" },
          { key: "shift+[ArrowDown]", command: "extendSelectionDownward" },
          { key: "[Backspace]", command: "deleteBackward" },
          { key: "alt+[Delete]", command: "deleteBackward" },
          { key: "[Delete]", command: "deleteForward" },
          { key: "alt+[Backspace]", command: "deleteForward" },
          { key: "alt+[ArrowLeft]", command: "moveToPreviousWord" },
          { key: "alt+[ArrowRight]", command: "moveToNextWord" },
          { key: "shift+alt+[ArrowLeft]", command: "extendToPreviousWord" },
          { key: "shift+alt+[ArrowRight]", command: "extendToNextWord" },
          { key: "ctrl+[ArrowLeft]", command: "moveToGroupStart" },
          { key: "ctrl+[ArrowRight]", command: "moveToGroupEnd" },
          { key: "shift+ctrl+[ArrowLeft]", command: "extendToGroupStart" },
          { key: "shift+ctrl+[ArrowRight]", command: "extendToGroupEnd" },
          { key: "[Home]", command: "moveToMathfieldStart" },
          { key: "cmd+[ArrowLeft]", command: "moveToMathfieldStart" },
          { key: "shift+[Home]", command: "extendToMathFieldStart" },
          { key: "shift+cmd+[ArrowLeft]", command: "extendToMathFieldStart" },
          { key: "[End]", command: "moveToMathfieldEnd" },
          { key: "cmd+[ArrowRight]", command: "moveToMathfieldEnd" },
          { key: "shift+[End]", command: "extendToMathFieldEnd" },
          { key: "shift+cmd+[ArrowRight]", command: "extendToMathFieldEnd" },
          { key: "[Pageup]", command: "moveToGroupStart" },
          { key: "[Pagedown]", command: "moveToGroupEnd" },
          { key: "[Tab]", command: "moveToNextGroup" },
          { key: "shift+[Tab]", command: "moveToPreviousGroup" },
          { key: "[Escape]", ifMode: "math", command: ["switchMode", "latex"] },
          { key: "[Escape]", ifMode: "text", command: ["switchMode", "latex"] },
          {
            key: "[Escape]",
            ifMode: "latex",
            command: ["complete", "complete", { selectItem: "true" }],
          },
          { key: "\\", ifMode: "math", command: ["switchMode", "latex", "\\"] },
          {
            key: "[IntlBackslash]",
            ifMode: "math",
            command: ["switchMode", "latex", "\\"],
          },
          {
            key: "[Tab]",
            ifMode: "latex",
            command: ["complete", "accept-suggestion"],
          },
          { key: "[Return]", ifMode: "latex", command: "complete" },
          { key: "[Enter]", ifMode: "latex", command: "complete" },
          {
            key: "shift+[Escape]",
            ifMode: "latex",
            command: ["complete", "reject"],
          },
          { key: "[ArrowDown]", ifMode: "latex", command: "nextSuggestion" },
          { key: "[ArrowUp]", ifMode: "latex", command: "previousSuggestion" },
          { key: "ctrl+a", ifPlatform: "!macos", command: "selectAll" },
          { key: "cmd+a", command: "selectAll" },
          { key: "[Cut]", command: "cutToClipboard" },
          { key: "[Copy]", command: "copyToClipboard" },
          { key: "[Paste]", command: "pasteFromClipboard" },
          { key: "[Clear]", command: "deleteBackward" },
          { key: "[Undo]", command: "undo" },
          { key: "[Redo]", command: "redo" },
          { key: "[EraseEof]", command: "deleteToGroupEnd" },
          { key: "ctrl+x", ifPlatform: "ios", command: "cutToClipboard" },
          { key: "cmd+x", ifPlatform: "ios", command: "cutToClipboard" },
          { key: "ctrl+c", ifPlatform: "ios", command: "copyToClipboard" },
          { key: "cmd+c", ifPlatform: "ios", command: "copyToClipboard" },
          { key: "ctrl+v", ifPlatform: "ios", command: "pasteFromClipboard" },
          { key: "cmd+v", ifPlatform: "ios", command: "pasteFromClipboard" },
          { key: "ctrl+z", ifPlatform: "!macos", command: "undo" },
          { key: "cmd+z", command: "undo" },
          { key: "ctrl+y", ifPlatform: "!macos", command: "redo" },
          { key: "shift+cmd+y", command: "redo" },
          { key: "shift+ctrl+z", ifPlatform: "!macos", command: "redo" },
          { key: "shift+cmd+z", command: "redo" },
          { key: "ctrl+b", ifPlatform: "macos", command: "moveToPreviousChar" },
          { key: "ctrl+f", ifPlatform: "macos", command: "moveToNextChar" },
          { key: "ctrl+p", ifPlatform: "macos", command: "moveUp" },
          { key: "ctrl+n", ifPlatform: "macos", command: "moveDown" },
          {
            key: "ctrl+a",
            ifPlatform: "macos",
            command: "moveToMathfieldStart",
          },
          { key: "ctrl+e", ifPlatform: "macos", command: "moveToMathfieldEnd" },
          {
            key: "shift+ctrl+b",
            ifPlatform: "macos",
            command: "extendSelectionBackward",
          },
          {
            key: "shift+ctrl+f",
            ifPlatform: "macos",
            command: "extendSelectionForward",
          },
          {
            key: "shift+ctrl+p",
            ifPlatform: "macos",
            command: "extendSelectionUpward",
          },
          {
            key: "shift+ctrl+n",
            ifPlatform: "macos",
            command: "extendSelectionDownward",
          },
          {
            key: "shift+ctrl+a",
            ifPlatform: "macos",
            command: "extendToMathFieldStart",
          },
          {
            key: "shift+ctrl+e",
            ifPlatform: "macos",
            command: "extendToMathFieldEnd",
          },
          {
            key: "alt+ctrl+b",
            ifPlatform: "macos",
            command: "moveToPreviousWord",
          },
          { key: "alt+ctrl+f", ifPlatform: "macos", command: "moveToNextWord" },
          {
            key: "shift+alt+ctrl+b",
            ifPlatform: "macos",
            command: "extendToPreviousWord",
          },
          {
            key: "shift+alt+ctrl+f",
            ifPlatform: "macos",
            command: "extendToNextWord",
          },
          { key: "ctrl+h", ifPlatform: "macos", command: "deleteBackward" },
          { key: "ctrl+d", ifPlatform: "macos", command: "deleteForward" },
          { key: "ctrl+l", ifPlatform: "macos", command: "scrollIntoView" },
          {
            key: "ctrl+[Digit2]",
            ifMode: "math",
            command: ["insert", "\\sqrt{#0}"],
          },
          { key: "ctrl+[Digit5]", ifMode: "math", command: "moveToOpposite" },
          {
            key: "ctrl+[Digit6]",
            ifMode: "math",
            command: "moveToSuperscript",
          },
          { key: "ctrl+[Return]", ifMode: "math", command: "addRowAfter" },
          { key: "ctrl+[Enter]", ifMode: "math", command: "addRowAfter" },
          { key: "cmd+[Return]", ifMode: "math", command: "addRowAfter" },
          { key: "cmd+[Enter]", ifMode: "math", command: "addRowAfter" },
          { key: "alt+p", ifMode: "math", command: ["insert", "\\pi"] },
          { key: "alt+v", ifMode: "math", command: ["insert", "\\sqrt{#0}"] },
          { key: "alt+o", ifMode: "math", command: ["insert", "\\emptyset"] },
          {
            key: "alt+d",
            ifMode: "math",
            command: ["insert", "\\differentialD"],
          },
          {
            key: "shift+alt+o",
            ifMode: "math",
            command: ["insert", "\\varnothing"],
          },
          {
            key: "shift+alt+d",
            ifMode: "math",
            command: ["insert", "\\partial"],
          },
          {
            key: "alt+[Backslash]",
            ifMode: "math",
            command: ["insert", "\\backslash"],
          },
          {
            key: "[NumpadDivide]",
            ifMode: "math",
            command: ["insert", "\\frac{#@}{#?}"],
          },
          {
            key: "alt+[NumpadDivide]",
            ifMode: "math",
            command: ["insert", "\\frac{#?}{#@}"],
          },
          { key: "shift+alt+k", command: "toggleKeystrokeCaption" },
          { key: "alt+[Space]", command: "toggleVirtualKeyboard" },
          {
            key: "alt+ctrl+[ArrowUp]",
            command: ["speak", "all", { withHighlighting: !1 }],
          },
          {
            key: "alt+ctrl+[ArrowDown]",
            command: ["speak", "selection", { withHighlighting: !1 }],
          },
          {
            key: "shift+[Quote]",
            ifLayout: ["apple.en-intl", "windows.en-intl", "linux.en"],
            ifMode: "math",
            command: ["switchMode", "text", "", ""],
          },
          {
            key: "shift+alt+[KeyT]",
            ifMode: "math",
            command: ["switchMode", "text", "", ""],
          },
          {
            key: "shift+[Quote]",
            ifLayout: ["apple.en-intl", "windows.en-intl", "linux.en"],
            ifMode: "text",
            command: ["switchMode", "math", "", ""],
          },
          {
            key: "shift+alt+[KeyT]",
            ifMode: "text",
            command: ["switchMode", "math", "", ""],
          },
          { key: "/", ifMode: "math", command: ["insert", "\\frac{#@}{#?}"] },
          {
            key: "alt+/",
            ifLayout: ["apple.en-intl", "windows.en-intl", "linux.en"],
            ifMode: "math",
            command: ["insert", "\\/"],
          },
          {
            key: "alt+[BracketLeft]",
            ifLayout: ["apple.en-intl", "windows.en-intl", "linux.en"],
            ifMode: "math",
            command: ["insert", "\\left\\lbrack #0 \\right\\rbrack"],
          },
          {
            key: "ctrl+[Minus]",
            ifLayout: ["apple.en-intl", "windows.en-intl", "linux.en"],
            ifMode: "math",
            command: "moveToSubscript",
          },
          {
            key: "shift+alt+[BracketLeft]",
            ifLayout: ["apple.en-intl", "windows.en-intl", "linux.en"],
            ifMode: "math",
            command: ["insert", "\\left\\lbrace #0 \\right\\rbrace"],
          },
          {
            key: "ctrl+;",
            ifLayout: ["apple.en-intl", "windows.en-intl", "linux.en"],
            ifMode: "math",
            command: "addRowAfter",
          },
          {
            key: "cmd+;",
            ifLayout: ["apple.en-intl", "windows.en-intl", "linux.en"],
            ifMode: "math",
            command: "addRowAfter",
          },
          {
            key: "shift+ctrl+;",
            ifLayout: ["apple.en-intl", "windows.en-intl", "linux.en"],
            ifMode: "math",
            command: "addRowBefore",
          },
          {
            key: "shift+cmd+;",
            ifLayout: ["apple.en-intl", "windows.en-intl", "linux.en"],
            ifMode: "math",
            command: "addRowBefore",
          },
          { key: "ctrl+[Backspace]", ifMode: "math", command: "removeRow" },
          { key: "cmd+[Backspace]", ifMode: "math", command: "removeRow" },
          { key: "alt+[Tab]", ifMode: "math", command: "addColumnAfter" },
          {
            key: "shift+alt+[Tab]",
            ifMode: "math",
            command: "addColumnBefore",
          },
          { key: "alt+[Enter]", ifMode: "math", command: "addRowAfter" },
          { key: "shift+alt+[Enter]", ifMode: "math", command: "addRowBefore" },
          { key: "alt+[Return]", ifMode: "math", command: "addRowAfter" },
          {
            key: "shift+alt+[Return]",
            ifMode: "math",
            command: "addRowBefore",
          },
          { key: "shift+[Backspace]", ifMode: "math", command: "removeColumn" },
          {
            key: "alt+[Digit5]",
            ifLayout: ["apple.en-intl", "windows.en-intl", "linux.en"],
            ifMode: "math",
            command: ["insert", "$\\infty"],
          },
          {
            key: "alt+[Digit9]",
            ifLayout: ["apple.en-intl", "windows.en-intl", "linux.en"],
            ifMode: "math",
            command: ["insert", "("],
          },
          {
            key: "alt+[Digit0]",
            ifLayout: ["apple.en-intl", "windows.en-intl", "linux.en"],
            ifMode: "math",
            command: ["insert", ")"],
          },
          {
            key: "alt+|",
            ifLayout: ["apple.en-intl", "windows.en-intl", "linux.en"],
            ifMode: "math",
            command: ["insert", "|"],
          },
          {
            key: "shift+[Backquote]",
            ifLayout: ["apple.en-intl", "windows.en-intl", "linux.en"],
            ifMode: "math",
            command: ["insert", "\\~"],
          },
          {
            key: "[Backquote]",
            ifLayout: ["windows.french", "linux.french"],
            ifMode: "math",
            command: ["insert", "^2"],
          },
        ],
        Jo = {
          "\\sqrt": ["alt+v", "ctrl+[Digit2]"],
          "\\pi": "alt+p",
          "\\infty": "alt+[Digit5]",
          "\\differentialD": "alt+d",
          "\\partial": "shift+alt+d",
          "\\frac": "Slash",
          "\\emptyset": "alt+o",
          "\\varnothing": "shift+alt+o",
          "\\~": "~",
        };
      function Xo(e, t, n, i) {
        let r = t.split(" ");
        for (let a of r) {
          let t = a.match(/(.*):(.*)/);
          if (t) {
            let r = null != i ? i : {};
            "active" === t[2] ? (r.passive = !1) : (r[t[2]] = !0),
              e.addEventListener(t[1], n, r);
          } else e.addEventListener(a, n, i);
        }
      }
      function Go(e, t, n, i) {
        let r = t.split(" ");
        for (let a of r) {
          let t = a.match(/(.*):(.*)/);
          if (t) {
            let r = null != i ? i : {};
            "active" === t[2] ? (r.passive = !1) : (r[t[2]] = !0),
              e.removeEventListener(t[1], n, r);
          } else e.removeEventListener(a, n, i);
        }
      }
      function Zo(e) {
        var t;
        return (null == (t = e.element) ? void 0 : t.mathfield) === e;
      }
      function Yo(e) {
        let t = (function (e) {
          var t, n;
          return null !=
            (n =
              null != (t = e.querySelector(".ML__caret"))
                ? t
                : e.querySelector(".ML__text-caret"))
            ? n
            : e.querySelector(".ML__latex-caret");
        })(e);
        if (!t) return null;
        let n = t.getBoundingClientRect();
        return { x: n.right, y: n.bottom, height: n.height };
      }
      function Qo(e) {
        var t;
        if (!e.parent) return "root";
        let n = null != (t = e.parent.id) ? t : "";
        return (
          (n +=
            "string" == typeof e.parentBranch
              ? "-" + e.parentBranch
              : `-${e.parentBranch[0]}/${e.parentBranch[0]}`),
          n
        );
      }
      function es(e, t, n) {
        if (!t) return null;
        let i = e.field.getBoundingClientRect(),
          r = t.right - t.left,
          a = t.bottom - t.top,
          o = Math.ceil(t.left - i.left + e.field.scrollLeft * n),
          s = Math.ceil(t.top - i.top);
        return { left: o, right: o + r, top: s, bottom: s + a };
      }
      function ts(e) {
        let t = e.getBoundingClientRect(),
          n = parseInt(getComputedStyle(e).marginRight),
          i = {
            top: t.top - 1,
            bottom: t.bottom,
            left: t.left,
            right: t.right - 1 + n,
          };
        if (0 === e.children.length || "SVG" === e.tagName.toUpperCase())
          return i;
        for (let r of e.children)
          if (
            1 === r.nodeType &&
            "atomId" in r.dataset &&
            !r.classList.contains("pstrut")
          ) {
            let e = ts(r);
            (i.left = Math.min(i.left, e.left)),
              (i.right = Math.max(i.right, e.right)),
              (i.top = Math.min(i.top, e.top)),
              (i.bottom = Math.max(i.bottom, e.bottom));
          }
        return i;
      }
      function ns(e, t) {
        var n, i;
        if (!t.id) return null;
        let r =
          null != (i = null == (n = e.atomBoundsCache) ? void 0 : n.get(t.id))
            ? i
            : null;
        if (null !== r) return r;
        let a = e.fieldContent.querySelector(`[data-atom-id="${t.id}"]`);
        return (
          (r = a ? ts(a) : null),
          e.atomBoundsCache &&
            (r
              ? e.atomBoundsCache.set(t.id, r)
              : e.atomBoundsCache.delete(t.id)),
          null != r ? r : null
        );
      }
      function is(e, t) {
        return e.model.selection.ranges.reduce(
          (n, i) =>
            n.concat(
              ...(function (e, t, n) {
                let i = new Map();
                for (let r of e.model.getAtoms(t, { includeChildren: !0 })) {
                  if (
                    null != n &&
                    n.excludeAtomsWithBackground &&
                    r.style.backgroundColor
                  )
                    continue;
                  let t = e.field,
                    a = parseFloat(getComputedStyle(t).width),
                    o = t.getBoundingClientRect().width / a;
                  o = isNaN(o) ? 1 : o;
                  let s = es(e, ns(e, r), o);
                  if (s) {
                    let e = Qo(r);
                    if (i.has(e)) {
                      let t = i.get(e);
                      i.set(e, {
                        left: Math.min(t.left, s.left),
                        right: Math.max(t.right, s.right),
                        top: Math.min(t.top, s.top),
                        bottom: Math.max(t.bottom, s.bottom),
                      });
                    } else i.set(e, s);
                  }
                }
                return [...i.values()];
              })(e, i, t)
            ),
          []
        );
      }
      function rs(e, t) {
        return (
          "*" === e ||
          "none" === t ||
          ("same-origin" === t
            ? !window.origin || e === window.origin
            : "function" == typeof t && t(e))
        );
      }
      function as(e) {
        let t = 0,
          n = 0,
          i = e.offsetWidth,
          r = e.offsetHeight;
        for (; e instanceof HTMLElement; )
          (t += e.offsetTop), (n += e.offsetLeft), (e = e.offsetParent);
        return new DOMRect(n, t, i, r);
      }
      var os, ss;
      function ls(e) {
        let t = "";
        switch (e) {
          case "mathfield-element":
            t =
              "\n    :host { display: inline-block; background-color: field; color: fieldtext; border-width: 1px; border-style: solid; border-color: #acacac; border-radius: 2px; padding:4px; pointer-events: none;}\n    :host([hidden]) { display: none; }\n    :host([disabled]), :host([disabled]:focus), :host([disabled]:focus-within) { outline: none; opacity:  .5; }\n    :host(:focus), :host(:focus-within) {\n      outline: Highlight auto 1px;    /* For Firefox */\n      outline: -webkit-focus-ring-color auto 1px;\n    }\n    :host([readonly]:focus), :host([readonly]:focus-within),\n    :host([read-only]:focus), :host([read-only]:focus-within) {\n      outline: none;\n    }";
            break;
          case "core":
            t =
              ".ML__container {\n  min-height: auto !important;\n  --_hue: var(--hue, 212);\n  --_placeholder-color: var(--placeholder-color, hsl(var(--_hue), 40%, 49%));\n  --_placeholder-opacity: var(--placeholder-opacity, 0.4);\n  --_text-font-family: var(--text-font-family, system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen', 'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue', sans-serif);\n}\n.ML__sr-only {\n  position: absolute;\n  width: 1px;\n  height: 1px;\n  margin: -1px;\n  padding: 0;\n  overflow: hidden;\n  clip: rect(0, 0, 0, 0);\n  clip-path: inset(50%);\n  white-space: nowrap;\n  border: 0;\n}\n.ML__is-inline {\n  display: inline-block;\n}\n.ML__base {\n  visibility: inherit;\n  display: inline-block;\n  position: relative;\n  cursor: text;\n  padding: 0;\n  margin: 0;\n  box-sizing: content-box;\n  border: 0;\n  outline: 0;\n  vertical-align: baseline;\n  font-weight: inherit;\n  font-family: inherit;\n  font-style: inherit;\n  text-decoration: none;\n  width: min-content;\n}\n.ML__strut,\n.ML__strut--bottom {\n  display: inline-block;\n  min-height: 0.5em;\n}\n.ML__small-delim {\n  font-family: KaTeX_Main;\n}\n/* Text mode */\n.ML__text {\n  font-family: var(--_text-font-family);\n  white-space: pre;\n}\n/* Use cmr for 'math upright' */\n.ML__cmr {\n  font-family: KaTeX_Main;\n  font-style: normal;\n}\n.ML__mathit {\n  font-family: KaTeX_Math;\n  /* The KaTeX_Math font is italic by default, so the font-style below is only \n     useful when a fallback font is used\n  */\n  font-style: italic;\n}\n.ML__mathbf {\n  font-family: KaTeX_Main;\n  font-weight: bold;\n}\n/* Lowercase greek symbols should stick to math font when \\mathbf is applied \n   to match TeX idiosyncratic behavior */\n.lcGreek.ML__mathbf {\n  font-family: KaTeX_Math;\n  font-weight: normal;\n}\n.ML__mathbfit {\n  font-family: KaTeX_Math;\n  font-weight: bold;\n  font-style: italic;\n}\n.ML__ams {\n  font-family: KaTeX_AMS;\n}\n/* Blackboard */\n.ML__bb {\n  font-family: KaTeX_AMS;\n}\n.ML__cal {\n  font-family: KaTeX_Caligraphic;\n}\n.ML__frak {\n  font-family: KaTeX_Fraktur;\n}\n.ML__tt {\n  font-family: KaTeX_Typewriter;\n}\n.ML__script {\n  font-family: KaTeX_Script;\n}\n.ML__sans {\n  font-family: KaTeX_SansSerif;\n}\n.ML__series_ul {\n  font-weight: 100;\n}\n.ML__series_el {\n  font-weight: 100;\n}\n.ML__series_l {\n  font-weight: 200;\n}\n.ML__series_sl {\n  font-weight: 300;\n}\n.ML__series_sb {\n  font-weight: 500;\n}\n.ML__bold,\n.ML__boldsymbol {\n  font-weight: 700;\n}\n.ML__series_eb {\n  font-weight: 800;\n}\n.ML__series_ub {\n  font-weight: 900;\n}\n.ML__series_uc {\n  font-stretch: ultra-condensed;\n}\n.ML__series_ec {\n  font-stretch: extra-condensed;\n}\n.ML__series_c {\n  font-stretch: condensed;\n}\n.ML__series_sc {\n  font-stretch: semi-condensed;\n}\n.ML__series_sx {\n  font-stretch: semi-expanded;\n}\n.ML__series_x {\n  font-stretch: expanded;\n}\n.ML__series_ex {\n  font-stretch: extra-expanded;\n}\n.ML__series_ux {\n  font-stretch: ultra-expanded;\n}\n.ML__it {\n  font-style: italic;\n}\n.ML__shape_ol {\n  -webkit-text-stroke: 1px black;\n  text-stroke: 1px black;\n  color: transparent;\n}\n.ML__shape_sc {\n  font-variant: small-caps;\n}\n.ML__shape_sl {\n  font-style: oblique;\n}\n/* First level emphasis */\n.ML__emph {\n  color: #bc2612;\n}\n/* Second level emphasis */\n.ML__emph .ML__emph {\n  color: #0c7f99;\n}\n.ML__highlight {\n  color: #007cb2;\n  background: #edd1b0;\n}\n.ML__center {\n  text-align: center;\n}\n.ML__label_padding {\n  padding: 0 0.5em;\n}\n.ML__frac-line {\n  width: 100%;\n  min-height: 1px;\n}\n.ML__frac-line:after {\n  content: '';\n  display: block;\n  margin-top: max(-1px, -0.04em);\n  min-height: max(1px, 0.04em);\n  /* Ensure the line is visible when printing even if \"turn off background images\" is on*/\n  -webkit-print-color-adjust: exact;\n  print-color-adjust: exact;\n  /* There's a bug since Chrome 62 where \n      sub-pixel border lines don't draw at some zoom \n      levels (110%, 90%). \n      Setting the min-height used to work around it, but that workaround\n      broke in Chrome 84 or so.\n      Setting the background (and the min-height) seems to work for now.\n      */\n  background: currentColor;\n  box-sizing: content-box;\n  /* Vuetify sets the box-sizing to inherit \n            causes the fraction line to not draw at all sizes (see #26) */\n  /* On some versions of Firefox on Windows, the line fails to \n            draw at some zoom levels, but setting the transform triggers\n            the hardware accelerated path, which works */\n  transform: translate(0, 0);\n}\n.ML__sqrt {\n  display: inline-block;\n}\n.ML__sqrt-sign {\n  display: inline-block;\n  position: relative;\n}\n.ML__sqrt-line {\n  display: inline-block;\n  height: max(1px, 0.04em);\n  width: 100%;\n}\n.ML__sqrt-line:before {\n  content: '';\n  display: block;\n  margin-top: min(-1px, -0.04em);\n  min-height: max(1px, 0.04em);\n  /* Ensure the line is visible when printing even if \"turn off background images\" is on*/\n  -webkit-print-color-adjust: exact;\n  print-color-adjust: exact;\n  background: currentColor;\n  /* On some versions of Firefox on Windows, the line fails to \n            draw at some zoom levels, but setting the transform triggers\n            the hardware accelerated path, which works */\n  transform: translate(0, 0);\n}\n.ML__sqrt-line:after {\n  border-bottom-width: 1px;\n  content: ' ';\n  display: block;\n  margin-top: -0.1em;\n}\n.ML__sqrt-index {\n  margin-left: 0.27777778em;\n  margin-right: -0.55555556em;\n}\n.ML__delim-size1 {\n  font-family: KaTeX_Size1;\n}\n.ML__delim-size2 {\n  font-family: KaTeX_Size2;\n}\n.ML__delim-size3 {\n  font-family: KaTeX_Size3;\n}\n.ML__delim-size4 {\n  font-family: KaTeX_Size4;\n}\n.ML__delim-mult .delim-size1 > span {\n  font-family: KaTeX_Size1;\n}\n.ML__delim-mult .delim-size4 > span {\n  font-family: KaTeX_Size4;\n}\n.ML__accent-body > span {\n  font-family: KaTeX_Main;\n  width: 0;\n}\n.ML__accent-vec {\n  position: relative;\n  left: 0.24em;\n}\n.ML__mathlive {\n  display: inline-block;\n  direction: ltr;\n  text-align: left;\n  text-indent: 0;\n  text-rendering: auto;\n  font-family: KaTeX_Main, 'Times New Roman', serif;\n  font-style: normal;\n  font-size-adjust: none;\n  font-stretch: normal;\n  font-variant-caps: normal;\n  letter-spacing: normal;\n  line-height: 1.2;\n  word-wrap: normal;\n  word-spacing: normal;\n  white-space: nowrap;\n  text-shadow: none;\n  -webkit-user-select: none;\n  user-select: none;\n  width: min-content;\n}\n.ML__mathlive .style-wrap {\n  position: relative;\n}\n.ML__mathlive .mfrac,\n.ML__mathlive .left-right {\n  display: inline-block;\n}\n.ML__mathlive .vlist-t {\n  display: inline-table;\n  table-layout: fixed;\n  border-collapse: collapse;\n}\n.ML__mathlive .vlist-r {\n  display: table-row;\n}\n.ML__mathlive .vlist {\n  display: table-cell;\n  vertical-align: bottom;\n  position: relative;\n}\n.ML__mathlive .vlist > span {\n  display: block;\n  height: 0;\n  position: relative;\n}\n.ML__mathlive .vlist > span > span {\n  display: inline-block;\n}\n.ML__mathlive .vlist > span > .pstrut {\n  overflow: hidden;\n  width: 0;\n}\n.ML__mathlive .vlist-t2 {\n  margin-right: -2px;\n}\n.ML__mathlive .vlist-s {\n  display: table-cell;\n  vertical-align: bottom;\n  font-size: 1px;\n  width: 2px;\n  min-width: 2px;\n}\n.ML__mathlive .msubsup {\n  text-align: left;\n}\n.ML__mathlive .negativethinspace {\n  display: inline-block;\n  margin-left: -0.16667em;\n  height: 0.71em;\n}\n.ML__mathlive .thinspace {\n  display: inline-block;\n  width: 0.16667em;\n  height: 0.71em;\n}\n.ML__mathlive .mediumspace {\n  display: inline-block;\n  width: 0.22222em;\n  height: 0.71em;\n}\n.ML__mathlive .thickspace {\n  display: inline-block;\n  width: 0.27778em;\n  height: 0.71em;\n}\n.ML__mathlive .enspace {\n  display: inline-block;\n  width: 0.5em;\n  height: 0.71em;\n}\n.ML__mathlive .quad {\n  display: inline-block;\n  width: 1em;\n  height: 0.71em;\n}\n.ML__mathlive .qquad {\n  display: inline-block;\n  width: 2em;\n  height: 0.71em;\n}\n.ML__mathlive .llap,\n.ML__mathlive .rlap {\n  width: 0;\n  position: relative;\n  display: inline-block;\n}\n.ML__mathlive .llap > .inner,\n.ML__mathlive .rlap > .inner {\n  position: absolute;\n}\n.ML__mathlive .llap > .fix,\n.ML__mathlive .rlap > .fix {\n  display: inline-block;\n}\n.ML__mathlive .llap > .inner {\n  right: 0;\n}\n.ML__mathlive .rlap > .inner {\n  left: 0;\n}\n.ML__mathlive .rule {\n  display: inline-block;\n  border: solid 0;\n  position: relative;\n  box-sizing: border-box;\n}\n.ML__mathlive .overline .overline-line,\n.ML__mathlive .underline .underline-line {\n  width: 100%;\n}\n.ML__mathlive .overline .overline-line:before,\n.ML__mathlive .underline .underline-line:before {\n  content: '';\n  border-bottom-style: solid;\n  border-bottom-width: max(1px, 0.04em);\n  -webkit-print-color-adjust: exact;\n  print-color-adjust: exact;\n  display: block;\n}\n.ML__mathlive .overline .overline-line:after,\n.ML__mathlive .underline .underline-line:after {\n  border-bottom-style: solid;\n  border-bottom-width: max(1px, 0.04em);\n  -webkit-print-color-adjust: exact;\n  print-color-adjust: exact;\n  content: '';\n  display: block;\n  margin-top: -1px;\n}\n.ML__mathlive .stretchy {\n  display: block;\n  position: absolute;\n  width: 100%;\n  left: 0;\n  overflow: hidden;\n}\n.ML__mathlive .stretchy:before,\n.ML__mathlive .stretchy:after {\n  content: '';\n}\n.ML__mathlive .stretchy svg {\n  display: block;\n  position: absolute;\n  width: 100%;\n  height: inherit;\n  fill: currentColor;\n  stroke: currentColor;\n  fill-rule: nonzero;\n  fill-opacity: 1;\n  stroke-width: 1;\n  stroke-linecap: butt;\n  stroke-linejoin: miter;\n  stroke-miterlimit: 4;\n  stroke-dasharray: none;\n  stroke-dashoffset: 0;\n  stroke-opacity: 1;\n}\n.ML__mathlive .slice-1-of-2 {\n  display: inline-flex;\n  position: absolute;\n  left: 0;\n  width: 50.2%;\n  overflow: hidden;\n}\n.ML__mathlive .slice-2-of-2 {\n  display: inline-flex;\n  position: absolute;\n  right: 0;\n  width: 50.2%;\n  overflow: hidden;\n}\n.ML__mathlive .slice-1-of-3 {\n  display: inline-flex;\n  position: absolute;\n  left: 0;\n  width: 25.1%;\n  overflow: hidden;\n}\n.ML__mathlive .slice-2-of-3 {\n  display: inline-flex;\n  position: absolute;\n  left: 25%;\n  width: 50%;\n  overflow: hidden;\n}\n.ML__mathlive .slice-3-of-3 {\n  display: inline-flex;\n  position: absolute;\n  right: 0;\n  width: 25.1%;\n  overflow: hidden;\n}\n.ML__mathlive .slice-1-of-1 {\n  display: inline-flex;\n  position: absolute;\n  width: 100%;\n  left: 0;\n  overflow: hidden;\n}\n.ML__mathlive .nulldelimiter {\n  display: inline-block;\n}\n.ML__mathlive .op-group {\n  display: inline-block;\n}\n.ML__mathlive .op-symbol {\n  position: relative;\n}\n.ML__mathlive .op-symbol.small-op {\n  font-family: KaTeX_Size1;\n}\n.ML__mathlive .op-symbol.large-op {\n  font-family: KaTeX_Size2;\n}\n.ML__mathlive .mtable .vertical-separator {\n  display: inline-block;\n  min-width: 1px;\n  box-sizing: border-box;\n}\n.ML__mathlive .mtable .arraycolsep {\n  display: inline-block;\n}\n.ML__mathlive .mtable .col-align-m > .vlist-t {\n  text-align: center;\n}\n.ML__mathlive .mtable .col-align-c > .vlist-t {\n  text-align: center;\n}\n.ML__mathlive .mtable .col-align-l > .vlist-t {\n  text-align: left;\n}\n.ML__mathlive .mtable .col-align-r > .vlist-t {\n  text-align: right;\n}\n.ML__error {\n  display: inline-block;\n  background-image: radial-gradient(ellipse at center, hsl(341, 100%, 40%), rgba(0, 0, 0, 0) 70%);\n  background-color: hsla(341, 100%, 40%, 0.1);\n  background-repeat: repeat-x;\n  background-size: 3px 3px;\n  padding-bottom: 3px;\n  background-position: 0 100%;\n}\n.ML__error > .ML__error {\n  background: transparent;\n  padding: 0;\n}\n.ML__placeholder {\n  color: var(--_placeholder-color);\n  opacity: var(--_placeholder-opacity);\n  padding-left: 0.4ex;\n  padding-right: 0.4ex;\n  font-family: system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen', 'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue', sans-serif;\n}\n.ML__notation {\n  position: absolute;\n  box-sizing: border-box;\n  line-height: 0;\n}\n/* This class is used to implement the `\\mathtip` and `\\texttip` commands\n   For UI elements, see `[data-ML__tooltip]`\n*/\n.ML__tooltip-container {\n  position: relative;\n  transform: scale(0);\n}\n.ML__tooltip-container .ML__tooltip-content {\n  position: fixed;\n  display: inline-table;\n  visibility: hidden;\n  z-index: 2;\n  width: max-content;\n  max-width: 400px;\n  padding: 12px 12px;\n  border-radius: 8px;\n  background: #616161;\n  --_selection-color: #fff;\n  color: #fff;\n  box-shadow: 0 2px 2px 0 rgba(0, 0, 0, 0.14), 0 1px 5px 0 rgba(0, 0, 0, 0.12), 0 3px 1px -2px rgba(0, 0, 0, 0.2);\n  opacity: 0;\n  transition: opacity 0.15s cubic-bezier(0.4, 0, 1, 1);\n}\n.ML__tooltip-container .ML__tooltip-content .ML__text {\n  white-space: normal;\n}\n.ML__tooltip-container .ML__tooltip-content .ML__base {\n  display: contents;\n}\n.ML__tooltip-container:hover .ML__tooltip-content {\n  visibility: visible;\n  opacity: 1;\n  font-size: 0.75em;\n  transform: scale(1) translate(0, 3em);\n}\n";
            break;
          case "mathfield":
            t =
              "@keyframes ML__caret-blink {\n  0%,\n  100% {\n    opacity: 1;\n  }\n  50% {\n    opacity: 0;\n  }\n}\n.ML__container {\n  display: inline-flex;\n  flex-flow: row;\n  justify-content: space-between;\n  align-items: flex-end;\n  min-height: 39px;\n  /* Need some room for the virtual keyboard toggle */\n  width: 100%;\n  /* Encourage browsers to consider allocating a hardware accelerated\n   layer for this element. */\n  isolation: isolate;\n  /* Prevent the browser from trying to interpret touch gestures in the field */\n  /* \"Disabling double-tap to zoom removes the need for browsers to\n        delay the generation of click events when the user taps the screen.\" */\n  touch-action: none;\n  --_caret-color: var(--caret-color, hsl(var(--_hue), 40%, 49%));\n  --_selection-color: var(--selection-color, #000);\n  --_selection-background-color: var(--selection-background-color, hsl(var(--_hue), 70%, 85%));\n  --_text-highlight-background-color: var(--highlight-text, hsla(var(--_hue), 40%, 50%, 0.1));\n  --_contains-highlight-background-color: var(--contains-highlight-background-color, hsl(var(--_hue), 40%, 95%));\n  --_smart-fence-color: var(--smart-fence-color, currentColor);\n  --_smart-fence-opacity: var(--smart-fence-opacity, 0.5);\n  --_latex-color: var(--latex-color, hsl(var(--_hue), 40%, 50%));\n  --_correct-color: var(--correct-color, #10a000);\n  --_incorrect-color: var(--incorrect-color, #a01b00);\n  --_composition-background-color: var(--composition-background-color, #fff1c2);\n  --_composition-text-color: var(--composition-text-color, black);\n  --_composition-underline-color: var(--composition-underline-color, transparent);\n}\n/* This is the actual field content (formula) */\n.ML__content {\n  display: flex;\n  align-items: center;\n  align-self: center;\n  position: relative;\n  overflow: hidden;\n  padding: 2px 0 2px 1px;\n  width: 100%;\n}\n.ML__virtual-keyboard-toggle {\n  box-sizing: border-box;\n  display: flex;\n  align-self: center;\n  align-items: center;\n  flex-shrink: 0;\n  flex-direction: column;\n  justify-content: center;\n  width: 34px;\n  height: 34px;\n  padding: 0;\n  margin-right: 4px;\n  cursor: pointer;\n  /* Avoid some weird blinking with :hover */\n  border-radius: 8px;\n  border: 1px solid transparent;\n  transition: background 0.2s cubic-bezier(0.64, 0.09, 0.08, 1);\n  color: hsl(var(--_hue), 40%, 50%);\n  fill: currentColor;\n  background: transparent;\n}\n.ML__virtual-keyboard-toggle:hover {\n  background: hsla(0, 0%, 70%, 0.3);\n  color: #333;\n  fill: currentColor;\n}\n.ML__virtual-keyboard-toggle > span {\n  display: flex;\n  align-self: center;\n  align-items: center;\n}\n/* The invisible element used to capture keyboard events. We're just trying\n really hard to make sure it doesn't show. */\n.ML__keyboard-sink {\n  display: inline-block;\n  resize: none;\n  outline: none;\n  border: none;\n  /* Need these for Microsoft Edge */\n  position: fixed;\n  clip: rect(0 0 0 0);\n  /* Need this to prevent iOS Safari from auto-zooming */\n  font-size: 1em;\n  font-family: KaTeX_Main;\n}\n.ML__composition {\n  background: var(--_composition-background-color);\n  color: var(--_composition-text-color);\n  text-decoration: underline var(--_composition-underline-color);\n}\n.ML__caret:after {\n  content: '';\n  border: none;\n  border-radius: 2px;\n  border-right: 2px solid var(--_caret-color);\n  margin-right: -2px;\n  position: relative;\n  left: -1px;\n  animation: ML__caret-blink 1.05s step-end forwards infinite;\n}\n.ML__text-caret:after {\n  content: '';\n  border: none;\n  border-radius: 1px;\n  border-right: 1px solid var(--_caret-color);\n  margin-right: -1px;\n  position: relative;\n  left: 0;\n  animation: ML__caret-blink 1.05s step-end forwards infinite;\n}\n.ML__latex-caret:after {\n  content: '_';\n  border: none;\n  margin-right: 0;\n  margin-right: calc(-1ex - 2px);\n  position: relative;\n  color: var(--_caret-color);\n  animation: ML__caret-blink 1.05s step-end forwards infinite;\n}\n.ML__focused .ML__text {\n  background: var(--_text-highlight-background-color);\n}\n/* When using smartFence, the anticipated closing fence is displayed\nwith this style */\n.ML__smart-fence__close {\n  opacity: var(--_smart-fence-opacity);\n  color: var(--_smart-fence-color);\n}\n.ML__selected,\n.ML__focused .ML__selected .ML__contains-caret,\n.ML__focused .ML__selected .ML__smart-fence__close,\n.ML__focused .ML__selected .ML__placeholder {\n  color: var(--_selection-color);\n  opacity: 1;\n}\n:host(:focus) .ML__selection {\n  box-sizing: border-box;\n  background: var(--_selection-background-color) !important;\n}\n.ML__contains-caret.ML__close,\n.ML__contains-caret.ML__open,\n.ML__contains-caret > .ML__close,\n.ML__contains-caret > .ML__open,\n.ML__contains-caret .ML__sqrt-sign,\n.ML__contains-caret .ML__sqrt-line {\n  color: var(--_caret-color);\n}\n.ML__contains-highlight {\n  background: var(--_contains-highlight-background-color);\n  box-sizing: border-box;\n}\n.ML__latex {\n  font-family: 'Berkeley Mono', 'IBM Plex Mono', 'Source Code Pro', Consolas, 'Roboto Mono', Menlo, 'Bitstream Vera Sans Mono', 'DejaVu Sans Mono', Monaco, Courier, monospace;\n  font-weight: 400;\n  color: var(--_latex-color);\n}\n.ML__suggestion {\n  opacity: 0.5;\n}\n.ML__virtual-keyboard-toggle.is-visible.is-pressed:hover {\n  background: hsl(var(--_hue), 25%, 35%);\n  color: #fafafa;\n  fill: currentColor;\n}\n.ML__virtual-keyboard-toggle:focus {\n  outline: none;\n  border-radius: 8px;\n  border: 2px solid hsl(var(--_hue), 40%, 50%);\n}\n.ML__virtual-keyboard-toggle.is-pressed,\n.ML__virtual-keyboard-toggle.is-active:hover,\n.ML__virtual-keyboard-toggle.is-active {\n  background: hsl(var(--_hue), 25%, 35%);\n  color: #fafafa;\n  fill: currentColor;\n}\n/* Add an attribute 'data-ML__tooltip' to automatically show a\n   tooltip over a element on hover.\n   Use 'data-position=\"top\"' to place the tooltip above the\n   element rather than below.\n   Use 'data-delay' to delay the triggering of the tooltip.\n*/\n[data-ML__tooltip] {\n  position: relative;\n}\n[data-ML__tooltip][data-placement='top']::after {\n  top: inherit;\n  bottom: 100%;\n}\n[data-ML__tooltip]::after {\n  content: attr(data-ML__tooltip);\n  position: absolute;\n  display: none;\n  z-index: 2;\n  right: 110%;\n  left: calc(100% + 8px);\n  width: max-content;\n  max-width: 200px;\n  padding: 8px 8px;\n  border-radius: 2px;\n  background: #616161;\n  color: #fff;\n  box-shadow: 0 2px 2px 0 rgba(0, 0, 0, 0.14), 0 1px 5px 0 rgba(0, 0, 0, 0.12), 0 3px 1px -2px rgba(0, 0, 0, 0.2);\n  text-align: center;\n  font-family: system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen', 'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue', sans-serif;\n  font-style: normal;\n  font-weight: 400;\n  font-size: 12px;\n  /* Phone */\n  opacity: 0;\n  transform: scale(0.5);\n  transition: all 0.15s cubic-bezier(0.4, 0, 1, 1);\n}\n@media only screen and (max-width: 767px) {\n  [data-ML__tooltip]::after {\n    padding: 8px 16px;\n    font-size: 16px;\n  }\n}\n:not(.tracking) [data-ML__tooltip]:hover {\n  position: relative;\n}\n:not(.tracking) [data-ML__tooltip]:hover::after {\n  visibility: visible;\n  display: inline-table;\n  opacity: 1;\n  transform: scale(1);\n}\n[data-ML__tooltip][data-delay]::after {\n  transition-delay: 0s;\n}\n[data-ML__tooltip][data-delay]:hover::after {\n  transition-delay: 1s;\n  /* attr(data-delay); Should work. But doesn't. */\n}\n.ML__prompt {\n  border-radius: 2px;\n}\n.ML__editablePromptBox {\n  outline: 1px solid #acacac;\n  border-radius: 2px;\n  z-index: -1;\n}\n.ML__focusedPromptBox {\n  outline: highlight auto 1px;\n}\n.ML__lockedPromptBox {\n  background-color: rgba(142, 142, 141, 0.4);\n  z-index: -1;\n}\n.ML__correctPromptBox {\n  outline: 1px solid var(--_correct-color);\n  box-shadow: 0 0 5px var(--_correct-color);\n}\n.ML__incorrectPromptBox {\n  outline: 1px solid var(--_incorrect-color);\n  box-shadow: 0 0 5px var(--_incorrect-color);\n}\n";
            break;
          case "environment-popover":
            t =
              "#mathlive-environment-popover.is-visible {\n  visibility: visible;\n}\n#mathlive-environment-popover {\n  --_environment-panel-height: var(--environment-panel-height, 70px);\n  --_accent-color: var(--accent-color, #0c75d8);\n  --_background: var(--environment-panel-background, #0c75d8);\n  --_button-background: var(--environment-panel-button-background, white);\n  --_button-background-hover: var(--environment-panel-button-background-hover, #f5f5f7);\n  --_button-background-active: var(--environment-panel-button-background-active, #f5f5f7);\n  --_button-text: var(--environment-panel-button-text, #e3e4e8);\n  position: absolute;\n  width: calc(var(--_environment-panel-height) * 2);\n  height: var(--_environment-panel-height);\n  border-radius: 4px;\n  border: 1.5px solid var(--_accent-color);\n  background-color: var(--_background);\n  box-shadow: 0 0 30px 0 var(--environment-shadow, rgba(0, 0, 0, 0.4));\n  pointer-events: all;\n  visibility: hidden;\n}\n#mathlive-environment-popover .MLEP__array-buttons {\n  height: calc(var(--_environment-panel-height) * 5/4);\n  width: calc(var(--_environment-panel-height) * 5/4);\n  margin-left: calc(0px - var(--_environment-panel-height) * 0.16);\n  margin-top: calc(0px - var(--_environment-panel-height) * 0.19);\n}\n#mathlive-environment-popover .MLEP__array-buttons .font {\n  fill: white;\n}\n#mathlive-environment-popover .MLEP__array-buttons circle {\n  fill: #7f7f7f;\n  transition: fill 300ms;\n}\n#mathlive-environment-popover .MLEP__array-buttons .MLEP__array-insert-background {\n  fill-opacity: 1;\n  fill: var(--_background);\n  stroke: var(--_accent-color);\n  stroke-width: 3px;\n}\n#mathlive-environment-popover .MLEP__array-buttons line {\n  stroke: var(--_accent-color);\n  stroke-opacity: 0;\n  stroke-width: 40;\n  pointer-events: none;\n  transition: stroke-opacity 300ms;\n  stroke-linecap: round;\n}\n#mathlive-environment-popover .MLEP__array-buttons g[data-command]:hover circle {\n  fill: var(--_accent-color);\n}\n#mathlive-environment-popover .MLEP__array-buttons g[data-command]:hover line {\n  stroke-opacity: 1;\n}\n#mathlive-environment-popover .MLEP__environment-delimiter-controls {\n  height: 100%;\n  width: 50%;\n}\n#mathlive-environment-popover .MLEP__environment-delimiter-controls .MLEP__array-delimiter-options {\n  width: var(--_environment-panel-height);\n  height: var(--_environment-panel-height);\n  display: flex;\n  flex-wrap: wrap;\n  flex-direction: row;\n  justify-content: space-around;\n}\n#mathlive-environment-popover .MLEP__environment-delimiter-controls .MLEP__array-delimiter-options svg {\n  pointer-events: all;\n  margin-top: 2px;\n  width: calc(var(--_environment-panel-height) / 3 * 28 / 24);\n  height: calc(var(--_environment-panel-height) / 3 - 2px);\n  border-radius: calc(var(--_environment-panel-height) / 25);\n  background-color: var(--_button-background);\n}\n#mathlive-environment-popover .MLEP__environment-delimiter-controls .MLEP__array-delimiter-options svg:hover {\n  background-color: var(--_button-background-hover);\n}\n#mathlive-environment-popover .MLEP__environment-delimiter-controls .MLEP__array-delimiter-options svg path,\n#mathlive-environment-popover .MLEP__environment-delimiter-controls .MLEP__array-delimiter-options svg line {\n  stroke: var(--_button-text);\n  stroke-width: 2;\n  stroke-linecap: round;\n}\n#mathlive-environment-popover .MLEP__environment-delimiter-controls .MLEP__array-delimiter-options svg rect,\n#mathlive-environment-popover .MLEP__environment-delimiter-controls .MLEP__array-delimiter-options svg path {\n  fill-opacity: 0;\n}\n#mathlive-environment-popover .MLEP__environment-delimiter-controls .MLEP__array-delimiter-options svg.active {\n  pointer-events: none;\n  background-color: var(--_button-background-active);\n}\n#mathlive-environment-popover .MLEP__environment-delimiter-controls .MLEP__array-delimiter-options svg.active path,\n#mathlive-environment-popover .MLEP__environment-delimiter-controls .MLEP__array-delimiter-options svg.active line {\n  stroke: var(--_accent-color);\n}\n#mathlive-environment-popover .MLEP__environment-delimiter-controls .MLEP__array-delimiter-options svg.active circle {\n  fill: var(--_accent-color);\n}\n";
            break;
          case "suggestion-popover":
            t =
              "/* The element that display info while in latex mode */\n#mathlive-suggestion-popover {\n  background-color: rgba(97, 97, 97);\n  color: #fff;\n  text-align: center;\n  border-radius: 8px;\n  position: fixed;\n  z-index: 1;\n  display: none;\n  flex-direction: column;\n  justify-content: center;\n  box-shadow: 0 14px 28px rgba(0, 0, 0, 0.25), 0 10px 10px rgba(0, 0, 0, 0.22);\n}\n#mathlive-suggestion-popover.top-tip::after {\n  content: '';\n  position: absolute;\n  top: -15px;\n  left: calc(50% - 15px);\n  width: 0;\n  height: 0;\n  border-left: 15px solid transparent;\n  border-right: 15px solid transparent;\n  border-bottom: 15px solid rgba(97, 97, 97);\n  font-size: 1rem;\n}\n#mathlive-suggestion-popover.bottom-tip::after {\n  content: '';\n  position: absolute;\n  bottom: -15px;\n  left: calc(50% - 15px);\n  width: 0;\n  height: 0;\n  border-left: 15px solid transparent;\n  border-right: 15px solid transparent;\n  border-top: 15px solid rgba(97, 97, 97);\n  font-size: 1rem;\n}\n#mathlive-suggestion-popover.is-animated {\n  transition: all 0.2s cubic-bezier(0.64, 0.09, 0.08, 1);\n  animation: ML__fade-in cubic-bezier(0, 0, 0.2, 1) 0.15s;\n}\n#mathlive-suggestion-popover.is-visible {\n  display: flex;\n}\n@keyframes ML__fade-in {\n  from {\n    opacity: 0;\n  }\n  to {\n    opacity: 1;\n  }\n}\n/* The wrapper class for the entire content of the popover panel */\n#mathlive-suggestion-popover ul {\n  display: flex;\n  flex-flow: column;\n  list-style: none;\n  margin: 0;\n  padding: 0;\n  align-items: flex-start;\n  max-height: 400px;\n  overflow-y: auto;\n}\n#mathlive-suggestion-popover li {\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n  margin: 8px;\n  padding: 8px;\n  width: calc(100% - 16px - 16px);\n  column-gap: 1em;\n  border-radius: 8px;\n  cursor: pointer;\n  /* Since the content can be clicked on, provide feedback on hover */\n}\n#mathlive-suggestion-popover li a {\n  color: #5ea6fd;\n  padding-top: 0.3em;\n  margin-top: 0.4em;\n  display: block;\n}\n#mathlive-suggestion-popover li a:hover {\n  color: #5ea6fd;\n  text-decoration: underline;\n}\n#mathlive-suggestion-popover li:hover,\n#mathlive-suggestion-popover li.is-pressed,\n#mathlive-suggestion-popover li.is-active {\n  background: rgba(255, 255, 255, 0.1);\n}\n/* The command inside a popover (inside a #mathlive-suggestion-popover) */\n.ML__popover__command {\n  font-size: 1.6rem;\n  font-family: KaTeX_Main;\n}\n.ML__popover__current {\n  background: #5ea6fd;\n  color: #fff;\n}\n.ML__popover__latex {\n  font-family: 'IBM Plex Mono', 'Source Code Pro', Consolas, 'Roboto Mono', Menlo, 'Bitstream Vera Sans Mono', 'DejaVu Sans Mono', Monaco, Courier, monospace;\n  align-self: center;\n}\n/* The keyboard shortcuts for a symbol as displayed in the popover */\n.ML__popover__keybinding {\n  font-family: system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen', 'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue', sans-serif;\n  font-size: 0.8em;\n  opacity: 0.7;\n}\n/* Style for the character that joins the modifiers of a keyboard shortcut \n(usually a \"+\" sign)*/\n.ML__shortcut-join {\n  opacity: 0.5;\n}\n";
            break;
          case "keystroke-caption":
            t =
              "/* The element that displays the keys as the user type them */\n#mathlive-keystroke-caption-panel {\n  visibility: hidden;\n  /*min-width: 160px;*/\n  /*background-color: rgba(97, 97, 200, .95);*/\n  background: var(--secondary, hsl(var(--_hue), 19%, 26%));\n  border-color: var(--secondary-border, hsl(0, 0%, 91%));\n  box-shadow: 0 3px 6px rgba(0, 0, 0, 0.16), 0 3px 6px rgba(0, 0, 0, 0.23);\n  text-align: center;\n  border-radius: 6px;\n  padding: 16px;\n  position: absolute;\n  z-index: 1;\n  display: flex;\n  flex-direction: row-reverse;\n  justify-content: center;\n  --keystroke: white;\n  --on-keystroke: #555;\n  --keystroke-border: #f7f7f7;\n}\n@media (prefers-color-scheme: dark) {\n  body:not([theme='light']) #mathlive-keystroke-caption-panel {\n    --keystroke: hsl(var(--_hue), 50%, 30%);\n    --on-keystroke: hsl(0, 0%, 98%);\n    --keystroke-border: hsl(var(--_hue), 50%, 25%);\n  }\n}\nbody[theme='dark'] #mathlive-keystroke-caption-panel {\n  --keystroke: hsl(var(--_hue), 50%, 30%);\n  --on-keystroke: hsl(0, 0%, 98%);\n  --keystroke-border: hsl(var(--_hue), 50%, 25%);\n}\n#mathlive-keystroke-caption-panel > span {\n  min-width: 14px;\n  /*height: 8px;*/\n  margin: 0 8px 0 0;\n  padding: 4px;\n  background-color: var(--keystroke);\n  color: var(--on-keystroke);\n  fill: currentColor;\n  font-family: system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen', 'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue', sans-serif;\n  font-size: 1em;\n  border-radius: 6px;\n  border: 2px solid var(--keystroke-border);\n  /*box-shadow: 0 7px 14px rgba(0,0,0,0.25), 0 5px 5px rgba(0,0,0,0.22);*/\n}\n";
            break;
          case "virtual-keyboard":
            t =
              ".ML__keyboard {\n  --_keyboard-height: 0;\n  --_keyboard-zindex: var(--keyboard-zindex, 105);\n  --_accent-color: var(--keyboard-accent-color, #0c75d8);\n  --_background: var(--keyboard-background, #cacfd7);\n  --_border: var(--keyboard-border, #ddd);\n  --_padding-horizontal: var(--keyboard-padding-horizontal, 0px);\n  --_padding-top: var(--keyboard-padding-top, 5px);\n  --_padding-bottom: var(--keyboard-padding-bottom, 0px);\n  --_row-padding-left: var(--keyboard-row-padding-left, 0px);\n  --_row-padding-right: var(--keyboard-row-padding-right, 0px);\n  --_toolbar-text: var(--keyboard-toolbar-text, #2c2e2f);\n  --_toolbar-text-active: var(--keyboard-toolbar-text-active, var(--_accent-color));\n  --_toolbar-background: var(--keyboard-toolbar-background, transparent);\n  --_toolbar-background-hover: var(--keyboard-toolbar-background-hover, #eee);\n  --_toolbar-background-selected: var(--keyboard-toolbar-background-selected, transparent);\n  --_toolbar-font-size: var(--keyboard-toolbar-font-size, \"135%\");\n  --_horizontal-rule: var(--keyboard-horizontal-rule, 1px solid #fff);\n  --_keycap-background: var(--keycap-background, white);\n  --_keycap-background-hover: var(--keycap-background-hover, #f5f5f7);\n  --_keycap-background-active: var(--keycap-background-active, var(--_accent-color));\n  --_keycap-background-pressed: var(--keycap-background-pressed, var(--_accent-color));\n  --_keycap-border: var(--keycap-border, #e5e6e9);\n  --_keycap-border-bottom: var(--keycap-border-bottom, #8d8f92);\n  --_keycap-text: var(--keycap-text, #000);\n  --_keycap-text-active: var(--keycap-text-active, #fff);\n  --_keycap-text-hover: var(--keycap-text-hover, var(--_keycap-text));\n  --_keycap-text-pressed: var(--keycap-text-pressed, #fff);\n  --_keycap-shift-text: var(--keycap-shift-text, var(--_accent-color));\n  --_keycap-primary-background: var(--keycap-primary-background, var(--_accent-color));\n  --_keycap-primary-text: var(--keycap-primary-text, #ddd);\n  --_keycap-primary-background-hover: var(--keycap-primary-background-hover, #0d80f2);\n  --_keycap-secondary-background: var(--keycap-secondary-background, #a0a9b8);\n  --_keycap-secondary-background-hover: var(--keycap-secondary-background-hover, #7d8795);\n  --_keycap-secondary-text: var(--keycap-secondary-text, #060707);\n  --_keycap-secondary-border: var(--keycap-secondary-border, #c5c9d0);\n  --_keycap-secondary-border-bottom: var(--keycap-secondary-border-bottom, #989da6);\n  --_keycap-height: var(--keycap-height, 60px);\n  /* Keycap width (incl. margin) */\n  --_keycap-max-width: var(--keycap-max-width, 100px);\n  --_keycap-gap: var(--keycap-gap, 8px);\n  --_keycap-font-size: var(--keycap-font-size, clamp(16px, 4cqw, 24px));\n  --_keycap-small-font-size: var(--keycap-small-font-size, calc(var(--keycap-font-size) * 0.8));\n  --_keycap-extra-small-font-size: var(--keycap-extra-small-font-size, calc(var(--keycap-font-size) / 1.42));\n  --_variant-panel-background: var(--variant-panel-background, #fff);\n  --_variant-keycap-text: var(--variant-keycap-text, var(--_keycap-text));\n  --_variant-keycap-text-active: var(--variant-keycap-text-active, var(--_keycap-text-active));\n  --_variant-keycap-background-active: var(--variant-keycap-background-active, var(--_accent-color));\n  --_variant-keycap-length: var(--variant-keycap-length, 70px);\n  --_variant-keycap-font-size: var(--variant-keycap-font-size, 30px);\n  --_variant-keycap-aside-font-size: var(--variant-keycap-aside-font-size, 12px);\n  --_keycap-shift-font-size: var(--keycap-shift-font-size, 16px);\n  --_keycap-shift-color: var(--keycap-shift-color, var(--_accent-color));\n  --_box-placeholder-color: var(--box-placeholder-color, var(--_accent-color));\n}\n.if-can-undo,\n.if-can-redo,\n.if-can-copy,\n.if-can-cut,\n.if-can-paste {\n  opacity: 0.4;\n  pointer-events: none;\n}\n.can-undo .if-can-undo,\n.can-redo .if-can-redo,\n.can-copy .if-can-copy,\n.can-cut .if-can-cut,\n.can-paste .if-can-paste {\n  opacity: 1;\n  pointer-events: all;\n}\nbody > .ML__keyboard {\n  position: fixed;\n  --_padding-bottom: calc(var(--_padding-bottom) + env(safe-area-inset-bottom, 0));\n}\nbody > .ML__keyboard.is-visible > .MLK__backdrop {\n  box-shadow: 0 -5px 6px rgba(0, 0, 0, 0.08);\n  border-top: 1px solid var(--_border);\n}\nbody > .ML__keyboard.backdrop-is-transparent.is-visible > .MLK__backdrop {\n  box-shadow: none;\n  border: none;\n}\nbody > .ML__keyboard.is-visible.animate > .MLK__backdrop {\n  transition: 0.28s cubic-bezier(0, 0, 0.2, 1);\n  transition-property: transform, opacity;\n  transition-timing-function: cubic-bezier(0.4, 0, 1, 1);\n}\n.ML__keyboard {\n  position: relative;\n  overflow: hidden;\n  top: 0;\n  left: 0;\n  height: 100%;\n  width: 100%;\n  z-index: var(--_keyboard-zindex);\n  box-sizing: border-box;\n  outline: none;\n  border: none;\n  margin: 0;\n  padding: 0;\n  line-height: 1;\n  overflow-wrap: unset;\n  text-align: left;\n  vertical-align: baseline;\n  cursor: auto;\n  white-space: pre;\n  box-shadow: none;\n  opacity: 1;\n  transform: none;\n  pointer-events: none;\n}\n.ML__keyboard :where(div) {\n  box-sizing: border-box;\n  outline: none;\n  border: none;\n  margin: 0;\n  padding: 0;\n  line-height: 1;\n  overflow-wrap: unset;\n  text-align: left;\n  vertical-align: baseline;\n  cursor: auto;\n  white-space: pre;\n  box-shadow: none;\n  transform: none;\n}\n.MLK__backdrop {\n  position: absolute;\n  bottom: calc(-1 * var(--_keyboard-height));\n  width: 100%;\n  height: var(--_keyboard-height);\n  box-sizing: border-box;\n  padding-top: var(--_padding-top);\n  padding-bottom: var(--_padding-bottom);\n  padding-left: var(--_padding-horizontal);\n  padding-right: var(--_padding-horizontal);\n  opacity: 0;\n  visibility: hidden;\n  transform: translate(0, 0);\n  background: var(--_background);\n}\n.backdrop-is-transparent .MLK__backdrop {\n  background: transparent;\n}\n/* If a custom layout has a custom container/backdrop\n  (backdrop-is-transparent), make sure to let pointer event go through. */\n.backdrop-is-transparent .MLK__plate {\n  background: transparent;\n  pointer-events: none;\n}\n/* If a custom layout has a custom container/backdrop, make sure to \n   allow pointer events on it. */\n.backdrop-is-transparent .MLK__layer > div > div {\n  pointer-events: all;\n}\n.ML__keyboard.is-visible > .MLK__backdrop {\n  transform: translate(0, calc(-1 * var(--_keyboard-height)));\n  opacity: 1;\n  visibility: visible;\n}\n.caps-lock-indicator {\n  display: none;\n  width: 8px;\n  height: 8px;\n  background: #0cbc0c;\n  box-shadow: inset 0 0 4px 0 #13ca13, 0 0 4px 0 #a9ef48;\n  border-radius: 8px;\n  right: 8px;\n  top: 8px;\n  position: absolute;\n}\n.ML__keyboard.is-caps-lock .caps-lock-indicator {\n  display: block;\n}\n.ML__keyboard.is-caps-lock .shift {\n  background: var(--_keycap-background-active);\n  color: var(--_keycap-text-active);\n}\n.MLK__plate {\n  position: absolute;\n  top: 0;\n  left: var(--_padding-horizontal);\n  width: calc(100% - 2 * var(--_padding-horizontal));\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n  container-type: inline-size;\n  touch-action: none;\n  -webkit-user-select: none;\n  user-select: none;\n  pointer-events: all;\n  font-family: system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen', 'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue', sans-serif;\n  font-size: 16px;\n  /* Size of toolbar labels */\n  font-weight: 400;\n  text-shadow: none;\n}\n.ML__box-placeholder {\n  color: var(--_box-placeholder-color);\n}\n.MLK__tex {\n  font-family: KaTeX_Main, KaTeX_Math, 'Cambria Math', 'Asana Math', OpenSymbol, Symbola, STIX, Times, serif !important;\n}\n.MLK__tex-math {\n  font-family: KaTeX_Math, KaTeX_Main, 'Cambria Math', 'Asana Math', OpenSymbol, Symbola, STIX, Times, serif !important;\n  font-style: italic;\n}\n.MLK__layer {\n  display: none;\n  outline: none;\n}\n.MLK__layer.is-visible {\n  display: flex;\n  flex-flow: column;\n}\n/* Keyboard layouts are made or rows of keys... */\n.MLK__rows {\n  display: flex;\n  flex-flow: column;\n  align-items: center;\n  border-collapse: separate;\n  clear: both;\n  border: 0;\n  margin: 0;\n  margin-bottom: var(--_keycap-gap);\n  gap: var(--_keycap-gap);\n  /* If the styling include, e.g., some shadows, they will be\n  cut off by the overflow. In that case, set the padding to \n  compensate. */\n  padding-left: var(--_row-padding-left);\n  padding-right: var(--_row-padding-right);\n  overflow-x: auto;\n  touch-action: none;\n}\n.MLK__rows > .row {\n  display: flex;\n  flex-flow: row;\n  justify-content: center;\n  width: 100%;\n  gap: var(--_keycap-gap);\n  margin: 0;\n  padding: 0;\n  /* For the alignment of the text on some modifiers (e.g. shift) */\n  /* Extra spacing between two adjacent keys */\n  /** A regular keycap */\n}\n.MLK__rows > .row .tex {\n  font-family: KaTeX_Math, KaTeX_Main, 'Cambria Math', 'Asana Math', OpenSymbol, Symbola, STIX, Times, serif !important;\n}\n.MLK__rows > .row .tex-math {\n  font-family: KaTeX_Math, 'Cambria Math', 'Asana Math', OpenSymbol, Symbola, STIX, Times, serif !important;\n}\n.MLK__rows > .row .big-op {\n  font-size: calc(1.25 * var(--_keycap-font-size));\n}\n.MLK__rows > .row .small {\n  font-size: var(--_keycap-small-font-size);\n}\n.MLK__rows > .row .bottom {\n  justify-content: flex-end;\n}\n.MLK__rows > .row .left {\n  align-items: flex-start;\n  padding-left: 12px;\n}\n.MLK__rows > .row .right {\n  align-items: flex-end;\n  padding-right: 12px;\n}\n.MLK__rows > .row .w0 {\n  width: 0;\n}\n.MLK__rows > .row .w5 {\n  width: calc(min(var(--_keycap-max-width, 100px), 10%) / 2 - var(--_keycap-gap));\n}\n.MLK__rows > .row .w15 {\n  width: calc(1.5 * min(var(--_keycap-max-width, 100px), 10%) - var(--_keycap-gap));\n}\n.MLK__rows > .row .w20 {\n  width: calc(2 * min(var(--_keycap-max-width, 100px), 10%) - var(--_keycap-gap));\n}\n.MLK__rows > .row .w50 {\n  width: calc(5 * min(var(--_keycap-max-width, 100px), 10%) - var(--_keycap-gap));\n}\n.MLK__rows > .row .MLK__keycap.w50 {\n  font-size: 80%;\n  padding-top: 10px;\n  font-weight: 100;\n}\n.MLK__rows > .row .separator {\n  background: transparent;\n  border: none;\n  pointer-events: none;\n}\n.MLK__rows > .row .horizontal-rule {\n  height: 6px;\n  margin-top: 3px;\n  margin-bottom: 0;\n  width: 100%;\n  border-radius: 0;\n  border-top: var(--_horizontal-rule);\n}\n.MLK__rows > .row .ghost {\n  background: var(--_toolbar-background);\n  border: none;\n  color: var(--_toolbar-text);\n}\n.MLK__rows > .row .ghost:hover {\n  background: var(--_toolbar-background-hover);\n}\n.MLK__rows > .row .bigfnbutton {\n  font-size: var(--_keycap-extra-small-font-size);\n}\n.MLK__rows > .row .shift,\n.MLK__rows > .row .action {\n  color: var(--_keycap-secondary-text);\n  background: var(--_keycap-secondary-background);\n  border-color: var(--_keycap-secondary-border);\n  border-bottom-color: var(--_keycap-secondary-border-bottom);\n  line-height: 0.8;\n  font-size: min(1rem, var(--_keycap-small-font-size));\n  font-weight: 600;\n  padding: 8px 12px 8px 12px;\n}\n.MLK__rows > .row .shift:hover,\n.MLK__rows > .row .action:hover {\n  background: var(--_keycap-secondary-background-hover);\n}\n.MLK__rows > .row .action.primary {\n  background: var(--_keycap-primary-background);\n  color: var(--_keycap-primary-text);\n}\n.MLK__rows > .row .action.primary:hover {\n  background: var(--_keycap-primary-background-hover);\n  color: var(--_keycap-primary-text);\n}\n.MLK__rows > .row .shift.selected,\n.MLK__rows > .row .action.selected {\n  color: var(--_toolbar-text-active);\n}\n.MLK__rows > .row .shift.selected.is-pressed,\n.MLK__rows > .row .action.selected.is-pressed,\n.MLK__rows > .row .shift.selected.is-active,\n.MLK__rows > .row .action.selected.is-active {\n  color: white;\n}\n.MLK__rows > .row .warning {\n  background: #cd0030;\n  color: white;\n}\n.MLK__rows > .row .warning svg.svg-glyph {\n  width: 24px;\n  height: 24px;\n  min-height: 24px;\n}\n.MLK__rows > .row div {\n  display: flex;\n  flex-flow: column;\n  align-items: center;\n  justify-content: space-evenly;\n  width: calc(min(var(--_keycap-max-width), 10%) - var(--_keycap-gap));\n  height: var(--_keycap-height);\n  box-sizing: border-box;\n  padding: 0;\n  vertical-align: top;\n  text-align: center;\n  float: left;\n  color: var(--_keycap-text);\n  fill: currentColor;\n  font-size: var(--_keycap-font-size);\n  background: var(--_keycap-background);\n  border: 1px solid var(--_keycap-border);\n  border-bottom-color: var(--_keycap-border-bottom);\n  border-radius: 6px;\n  cursor: pointer;\n  touch-action: none;\n  /* Keys with a variants panel */\n  position: relative;\n  overflow: hidden;\n  -webkit-user-select: none;\n  user-select: none;\n  -webkit-tap-highlight-color: transparent;\n}\n.MLK__rows > .row div:hover {\n  background: var(--_keycap-background-hover);\n}\n.MLK__rows > .row div .ML__mathlive {\n  pointer-events: none;\n  touch-action: none;\n}\n.MLK__rows > .row div svg.svg-glyph {\n  margin: 8px 0;\n  width: 20px;\n  height: 20px;\n  min-height: 20px;\n}\n.MLK__rows > .row div svg.svg-glyph-lg {\n  margin: 8px 0;\n  width: 24px;\n  height: 24px;\n  min-height: 24px;\n}\n.MLK__rows > .row div.MLK__tex-math {\n  font-size: 25px;\n}\n.MLK__rows > .row div.is-pressed {\n  background: var(--_keycap-background-pressed);\n  color: var(--_keycap-text-pressed);\n}\n.MLK__rows > .row div.MLK__keycap.is-active,\n.MLK__rows > .row div.action.is-active,\n.MLK__rows > .row div.MLK__keycap.is-pressed,\n.MLK__rows > .row div.action.is-pressed {\n  z-index: calc(var(--_keyboard-zindex) - 5);\n}\n.MLK__rows > .row div.MLK__keycap.is-active aside,\n.MLK__rows > .row div.action.is-active aside,\n.MLK__rows > .row div.MLK__keycap.is-pressed aside,\n.MLK__rows > .row div.action.is-pressed aside {\n  display: none;\n}\n.MLK__rows > .row div.MLK__keycap.is-active .MLK__shift,\n.MLK__rows > .row div.action.is-active .MLK__shift,\n.MLK__rows > .row div.MLK__keycap.is-pressed .MLK__shift,\n.MLK__rows > .row div.action.is-pressed .MLK__shift {\n  display: none;\n}\n.MLK__rows > .row div.shift.is-pressed,\n.MLK__rows > .row div.MLK__keycap.is-pressed,\n.MLK__rows > .row div.action.is-pressed {\n  background: var(--_keycap-background-pressed);\n  color: var(--_keycap-text-pressed);\n}\n.MLK__rows > .row div.shift.is-active,\n.MLK__rows > .row div.MLK__keycap.is-active,\n.MLK__rows > .row div.action.is-active {\n  background: var(--_keycap-background-active);\n  color: var(--_keycap-text-active);\n}\n.MLK__rows > .row div small {\n  color: var(--_keycap-secondary-text);\n}\n.MLK__rows > .row div aside {\n  font-family: system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen', 'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue', sans-serif;\n  font-size: 10px;\n  line-height: 10px;\n  color: var(--_keycap-secondary-text);\n}\n/* Add an attribute 'data-tooltip' to display a tooltip on hover.\nNote there are a different set of tooltip rules for the keyboard toggle\n(it's in a different CSS tree) */\n.MLK__tooltip {\n  position: relative;\n}\n.MLK__tooltip::after {\n  position: absolute;\n  display: inline-table;\n  content: attr(data-tooltip);\n  top: inherit;\n  bottom: 100%;\n  width: max-content;\n  max-width: 200px;\n  padding: 8px 8px;\n  background: #616161;\n  color: #fff;\n  text-align: center;\n  z-index: 2;\n  box-shadow: 0 2px 2px 0 rgba(0, 0, 0, 0.14), 0 1px 5px 0 rgba(0, 0, 0, 0.12), 0 3px 1px -2px rgba(0, 0, 0, 0.2);\n  border-radius: 2px;\n  font-family: system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen', 'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue', sans-serif;\n  font-weight: 400;\n  font-size: 12px;\n  transition: all 0.15s cubic-bezier(0.4, 0, 1, 1) 1s;\n  opacity: 0;\n  transform: scale(0.5);\n}\n.MLK__tooltip:hover {\n  position: relative;\n}\n.MLK__tooltip:hover::after {\n  opacity: 1;\n  transform: scale(1);\n}\n.MLK__toolbar {\n  align-self: center;\n  display: flex;\n  flex-flow: row;\n  justify-content: space-between;\n  width: 100%;\n  max-width: 996px;\n  min-height: 32px;\n  /* Icons for undo/redo, etc. */\n}\n.MLK__toolbar svg {\n  height: 20px;\n  width: 20px;\n}\n.MLK__toolbar > .left {\n  position: relative;\n  display: flex;\n  justify-content: flex-start;\n  flex-flow: row;\n}\n.MLK__toolbar > .right {\n  display: flex;\n  justify-content: flex-end;\n  flex-flow: row;\n}\n.MLK__toolbar > div > div {\n  /* \"button\" in the toolbar */\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  color: var(--_toolbar-text);\n  fill: currentColor;\n  background: var(--_toolbar-background);\n  font-size: var(--_toolbar-font-size);\n  padding: 4px 15px;\n  cursor: pointer;\n  width: max-content;\n  min-width: 42px;\n  min-height: 22px;\n  border: none;\n  padding-left: 10px;\n  padding-right: 10px;\n  padding-bottom: 8px;\n  padding-top: 8px;\n  margin-top: 7px;\n  margin-bottom: 8px;\n  margin-left: 4px;\n  margin-right: 4px;\n  border-radius: 8px;\n  box-shadow: none;\n  border-bottom: 2px solid transparent;\n}\n.MLK__toolbar > div > div:not(.disabled):not(.selected):hover {\n  background: var(--_toolbar-background-hover);\n}\n.MLK__toolbar > div > div.disabled svg,\n.MLK__toolbar > div > div.disabled:hover svg,\n.MLK__toolbar > div > div.disabled.is-pressed svg {\n  color: var(--_toolbar-text);\n  opacity: 0.2;\n}\n.MLK__toolbar > div > div:hover,\n.MLK__toolbar > div > div:active,\n.MLK__toolbar > div > div.is-pressed,\n.MLK__toolbar > div > div.is-active {\n  color: var(--_toolbar-text-active);\n}\n.MLK__toolbar > div > div.selected {\n  color: var(--_toolbar-text-active);\n  background: var(--_toolbar-background-selected);\n  border-radius: 0;\n  border-bottom-color: var(--_toolbar-text-active);\n  padding-bottom: 4px;\n  margin-bottom: 12px;\n}\n/* This is the element that displays variants on press+hold */\n.MLK__variant-panel {\n  visibility: hidden;\n  position: fixed;\n  display: flex;\n  flex-flow: row wrap-reverse;\n  justify-content: center;\n  align-content: center;\n  margin: 0;\n  padding: 0;\n  bottom: auto;\n  top: 0;\n  box-sizing: content-box;\n  transform: none;\n  z-index: calc(var(--_keyboard-zindex) + 1);\n  touch-action: none;\n  max-width: 350px;\n  background: var(--_variant-panel-background);\n  text-align: center;\n  border-radius: 6px;\n  padding: 6px;\n  box-shadow: 0 14px 28px rgba(0, 0, 0, 0.25), 0 10px 10px rgba(0, 0, 0, 0.22);\n  transition: none;\n}\n.MLK__variant-panel.is-visible {\n  visibility: visible;\n}\n.MLK__variant-panel.compact {\n  --_variant-keycap-length: var(--variant-keycap-length, 50px);\n  --_variant-keycap-font-size: var(--variant-keycap-font-size, 24px);\n  --_variant-keycap-aside-font-size: var(--variant-keycap-aside-font-size, 10px);\n}\n.MLK__variant-panel .item {\n  display: flex;\n  flex-flow: column;\n  align-items: center;\n  justify-content: center;\n  font-size: var(--_variant-keycap-font-size);\n  height: var(--_variant-keycap-length);\n  width: var(--_variant-keycap-length);\n  margin: 0;\n  box-sizing: border-box;\n  border-radius: 5px;\n  border: 1px solid transparent;\n  background: transparent;\n  pointer-events: all;\n  cursor: pointer;\n  color: var(--_variant-keycap-text);\n  fill: currentColor;\n}\n@media (max-height: 412px) {\n  .MLK__variant-panel .item {\n    --_variant-keycap-font-size: var(--variant-keycap-font-size, 24px);\n    --_variant-keycap-length: var(--variant-keycap-length, 50px);\n  }\n}\n.MLK__variant-panel .item .ML__mathlive {\n  pointer-events: none;\n}\n.MLK__variant-panel .item.is-active {\n  background: var(--_variant-keycap-background-active);\n  color: var(--_variant-keycap-text-active);\n}\n.MLK__variant-panel .item.is-pressed {\n  background: var(--_variant-keycap-background-pressed);\n  color: var(--_variant-keycap-text-pressed);\n}\n.MLK__variant-panel .item.small {\n  font-size: var(--_keycap-small-font-size);\n}\n.MLK__variant-panel .item.swatch-button {\n  box-sizing: border-box;\n  background: #fbfbfb;\n}\n.MLK__variant-panel .item.swatch-button > span {\n  display: inline-block;\n  margin: 6px;\n  width: calc(100% - 12px);\n  height: calc(100% - 12px);\n  border-radius: 50%;\n}\n.MLK__variant-panel .item.swatch-button:hover {\n  background: #f0f0f0;\n}\n.MLK__variant-panel .item.swatch-button:hover > span {\n  border-radius: 2px;\n}\n.MLK__variant-panel .item.box > div,\n.MLK__variant-panel .item.box > span {\n  border: 1px dashed rgba(0, 0, 0, 0.24);\n}\n.MLK__variant-panel .item .warning {\n  min-height: 60px;\n  min-width: 60px;\n  background: #cd0030;\n  color: white;\n  padding: 5px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  border-radius: 5px;\n}\n.MLK__variant-panel .item .warning.is-pressed,\n.MLK__variant-panel .item .warning.is-active {\n  background: red;\n}\n.MLK__variant-panel .item .warning svg.svg-glyph {\n  width: 50px;\n  height: 50px;\n}\n.MLK__variant-panel .item aside {\n  font-size: var(--_variant-keycap-aside-font-size);\n  line-height: 12px;\n  opacity: 0.78;\n  padding-top: 2px;\n}\n.MLK__keycap {\n  position: relative;\n}\n.MLK__shift {\n  display: block;\n  position: absolute;\n  right: 4px;\n  top: 4px;\n  font-size: var(--_keycap-shift-font-size);\n  color: var(--_keycap-shift-color);\n}\n.hide-shift .MLK__shift {\n  display: none;\n}\n@media (max-width: 414px) {\n  .MLK__variant-panel {\n    max-width: 350px;\n    --_variant-keycap-font-size: var(--variant-keycap-font-size, 24px);\n    --_variant-keycap-length: var(--variant-keycap-length, 50px);\n  }\n}\n/* @xs breakpoint: iPhone 5 */\n@container (max-width: 414px) {\n  .MLK__rows {\n    --_keycap-gap: min(var(--_keycap-gap, 2px), 2px);\n    --_keycap-height: min(var(--_keycap-height, 42px), 42px);\n    --_keycap-max-width: min(var(--_keycap-max-width, 62px), 62px);\n  }\n  .MLK__toolbar > div > div {\n    font-size: 100%;\n    padding: 0;\n    margin-left: 2px;\n    margin-right: 2px;\n  }\n  .MLK__rows .shift,\n  .MLK__rows .action {\n    font-size: 65%;\n  }\n  .MLK__rows .warning svg.svg-glyph {\n    width: 14px;\n    height: 14px;\n    min-height: 14px;\n  }\n}\n@container (max-width: 744px) {\n  .MLK__rows {\n    --_keycap-gap: min(var(--keycap-gap, 2px), 2px);\n    --_keycap-height: min(var(--keycap-height, 52px), 52px);\n    --_keycap-max-width: min(var(--keycap-max-width, 62px), 62px);\n  }\n  .MLK__toolbar > div > div {\n    padding-left: 0;\n    padding-right: 0;\n  }\n  .MLK__tooltip::after {\n    padding: 8px 16px;\n    font-size: 16px;\n  }\n  .MLK__rows > .row > div.fnbutton {\n    font-size: 16px;\n  }\n  .MLK__rows > .row > div.bigfnbutton {\n    font-size: calc(var(--_keycap-extra-small-font-size) / 1.55);\n  }\n  .MLK__rows > .row > div.small {\n    font-size: 13px;\n  }\n  .MLK__rows > .row > div > aside {\n    display: none;\n  }\n  .MLK__shift {\n    display: none;\n  }\n}\n/* Medium breakpoint: larger phones */\n@container (max-width: 768px) {\n  .MLK__rows {\n    --_keycap-height: min(var(--keycap-height, 42px), 42px);\n  }\n  .MLK__rows > .row > div > small {\n    font-size: 14px;\n  }\n}\n@container (max-width: 1444px) {\n  .MLK__rows .if-wide {\n    display: none;\n  }\n}\n@media (prefers-color-scheme: dark) {\n  .ML__keyboard {\n    --_accent-color: var(--keyboard-accent-color, #0b5c9c);\n    --_background: var(--keyboard-background, #151515);\n    --_border: var(--keyboard-border, transparent);\n    --_toolbar-text: var(--keyboard-toolbar-text, #e3e4e8);\n    --_toolbar-background-hover: var(--keyboard-toolbar-background-hover, #303030);\n    --keyboard-toolbar-background-hover: #303030;\n    --_horizontal-rule: var(--keyboard-horizontal-rule, 1px solid #303030);\n    --_keycap-background: var(--keycap-background, #1f2022);\n    --_keycap-background-hover: var(--keycap-background, #2f3032);\n    --_keycap-border: var(--_keycap-border, transparent);\n    --_keycap-border-bottom: var(--_keycap-border-bottom, transparent);\n    --_keycap-text: var(--keycap-text, #e3e4e8);\n    --_keycap-secondary-background: var(--keycap-secondary-background, #3d4144);\n    --_keycap-secondary-background-hover: var(--keycap-secondary-background-hover, #4d5154);\n    --_keycap-secondary-text: var(--keycap-secondary-text, #e7ebee);\n    --keycap-secondary-border: transparent;\n    --keycap-secondary-border-bottom: transparent;\n    --_keycap-secondary-border: var(--keycap-secondary-border, transparent);\n    --_keycap-secondary-border-bottom: var(--keycap-secondary-border-bottom, transparent);\n    --_variant-panel-background: var(--variant-panel-background, #303030);\n    --_variant-keycap-text-active: var(--variant-keycap-text-active, #fff);\n  }\n}\n/* Same as the media query, but with a class */\n[theme='dark'] .ML__keyboard .ML__keyboard {\n  --_accent-color: var(--keyboard-accent-color, #0b5c9c);\n  --_background: var(--keyboard-background, #151515);\n  --_border: var(--keyboard-border, transparent);\n  --_toolbar-text: var(--keyboard-toolbar-text, #e3e4e8);\n  --_toolbar-background-hover: var(--keyboard-toolbar-background-hover, #303030);\n  --keyboard-toolbar-background-hover: #303030;\n  --_horizontal-rule: var(--keyboard-horizontal-rule, 1px solid #303030);\n  --_keycap-background: var(--keycap-background, #1f2022);\n  --_keycap-background-hover: var(--keycap-background, #2f3032);\n  --_keycap-border: var(--_keycap-border, transparent);\n  --_keycap-border-bottom: var(--_keycap-border-bottom, transparent);\n  --_keycap-text: var(--keycap-text, #e3e4e8);\n  --_keycap-secondary-background: var(--keycap-secondary-background, #3d4144);\n  --_keycap-secondary-background-hover: var(--keycap-secondary-background-hover, #4d5154);\n  --_keycap-secondary-text: var(--keycap-secondary-text, #e7ebee);\n  --keycap-secondary-border: transparent;\n  --keycap-secondary-border-bottom: transparent;\n  --_keycap-secondary-border: var(--keycap-secondary-border, transparent);\n  --_keycap-secondary-border-bottom: var(--keycap-secondary-border-bottom, transparent);\n  --_variant-panel-background: var(--variant-panel-background, #303030);\n  --_variant-keycap-text-active: var(--variant-keycap-text-active, #fff);\n}\n[theme='light'] .ML__keyboard {\n  --_accent-color: var(--keyboard-accent-color, #0c75d8);\n  --_background: var(--keyboard-background, #cacfd7);\n  --_border: var(--keyboard-border, #ddd);\n  --_toolbar-text: var(--keyboard-toolbar-text, #2c2e2f);\n  --_toolbar-background: var(--keyboard-toolbar-background, transparent);\n  --_toolbar-background-hover: var(--keyboard-toolbar-background-hover, #eee);\n  --_toolbar-background-selected: var(--keyboard-toolbar-background-selected, transparent);\n  --_horizontal-rule: var(--keyboard-horizontal-rule, 1px solid #fff);\n  --_keycap-background: var(--keycap-background, white);\n  --_keycap-background-hover: var(--keycap-background, #f5f5f7);\n  --_keycap-background-active: var(--keycap-background-active, var(--_accent-color));\n  --_keycap-background-pressed: var(--keycap-background-pressed, var(--_accent-color));\n  --_keycap-border: var(--_keycap-border, #e5e6e9);\n  --_keycap-border-bottom: var(--_keycap-border-bottom, #8d8f92);\n  --_keycap-text: var(--keycap-text, #000);\n  --_keycap-text-active: var(--keycap-text-active, #fff);\n  --_keycap-text-hover: var(--keycap-text-hover, var(--_keycap-text));\n  --_keycap-text-pressed: var(--keycap-text-pressed, #fff);\n  --_keycap-shift-text: var(--keycap-shift-text, var(--_accent-color));\n  --_keycap-secondary-background: var(--keycap-secondary-background, #a0a9b8);\n  --_keycap-secondary-background-hover: var(--keycap-secondary-background-hover, #7d8795);\n  --_keycap-secondary-text: var(--keycap-secondary-text, #060707);\n  --_keycap-secondary-border: var(--keycap-secondary-border, #c5c9d0);\n  --_keycap-secondary-border-bottom: var(--keycap-secondary-border-bottom, #989da6);\n  --_variant-panel-background: var(--variant-panel-background, #fff);\n  --_variant-keycap-text: var(--variant-keycap-textvar, var(--_keycap-text));\n  --_variant-keycap-text-active: var(--variant-keycap-text-active, var(--_keycap-text-active));\n  --_variant-keycap-background-active: var(--variant-keycap-background-active, var(--_accent-color));\n}\n";
        }
        return t;
      }
      function cs(e) {
        return (
          os || (os = {}),
          os[e] || ((os[e] = new CSSStyleSheet()), os[e].replaceSync(ls(e))),
          os[e]
        );
      }
      function ds(e) {
        var t;
        if (!("adoptedStyleSheets" in document)) {
          if (window.document.getElementById(`mathlive-style-${e}`)) return;
          let t = window.document.createElement("style");
          return (
            (t.id = `mathlive-style-${e}`),
            t.append(window.document.createTextNode(ls(e))),
            void window.document.head.appendChild(t)
          );
        }
        if ((ss || (ss = {}), 0 !== (null != (t = ss[e]) ? t : 0))) ss[e] += 1;
        else {
          let t = cs(e);
          (document.adoptedStyleSheets = [...document.adoptedStyleSheets, t]),
            (ss[e] = 1);
        }
      }
      function us(e) {
        if (
          "adoptedStyleSheets" in document &&
          null != ss &&
          ss[e] &&
          ((ss[e] -= 1), ss[e] <= 0)
        ) {
          let t = os[e];
          document.adoptedStyleSheets = document.adoptedStyleSheets.filter(
            (e) => e !== t
          );
        }
      }
      var hs = class e extends Eo {
          constructor(e) {
            var t;
            super(
              u(d({}, e), {
                type: "accent",
                body: null != (t = e.body) ? t : void 0,
              })
            ),
              e.accentChar
                ? (this.accent = e.accentChar)
                : (this.svgAccent = null == e ? void 0 : e.svgAccent),
              (this.skipBoundary = !0),
              (this.captureSelection = !0);
          }
          static fromJson(t) {
            return new e(t);
          }
          toJson() {
            return u(d({}, super.toJson()), {
              accentChar: this.accent,
              svgAccent: this.svgAccent,
            });
          }
          render(e) {
            var t;
            let n = new Lo({ parent: e, mathstyle: "cramp" }, this.style),
              i =
                null != (t = Eo.createBox(n, this.body))
                  ? t
                  : new oo("\u25a2", { style: this.style }),
              r = 0;
            !this.hasEmptyBranch("body") &&
              2 === this.body.length &&
              this.body[1].isCharacterBox() &&
              (r = i.skew);
            let a,
              o = Math.min(i.height, Ka);
            if (this.svgAccent)
              (a = ho(this.svgAccent)), (o = n.metrics.bigOpSpacing1 - o);
            else if (this.accent) {
              let e = new oo(this.accent, { fontFamily: "Main-Regular" });
              e.italic = 0;
              let t = 8407 === this.accent ? " ML__accent-vec" : "";
              a = new oo(new oo(e), { classes: "ML__accent-body" + t });
            }
            a = new mo({
              shift: 0,
              children: [
                { box: new oo(i) },
                -o,
                { box: a, marginLeft: i.left + 2 * r, classes: ["ML__center"] },
              ],
            });
            let s = new oo(a, { type: "lift" });
            return (
              this.caret && (s.caret = this.caret),
              this.bind(n, s.wrap(n)),
              this.attachSupsub(n, { base: s })
            );
          }
        },
        ps = {
          "(": ")",
          "{": "}",
          "[": "]",
          "|": "|",
          "\\lbrace": "\\rbrace",
          "\\lparen": "\\rparen",
          "\\{": "\\}",
          "\\langle": "\\rangle",
          "\\lfloor": "\\rfloor",
          "\\lceil": "\\rceil",
          "\\vert": "\\vert",
          "\\lvert": "\\rvert",
          "\\Vert": "\\Vert",
          "\\lVert": "\\rVert",
          "\\lbrack": "\\rbrack",
          "\\ulcorner": "\\urcorner",
          "\\llcorner": "\\lrcorner",
          "\\lgroup": "\\rgroup",
          "\\lmoustache": "\\rmoustache",
        },
        ms = Object.fromEntries(Object.entries(ps).map(([e, t]) => [t, e]));
      function fs(e) {
        var t;
        return null !=
          (t = {
            "[": 91,
            "]": 93,
            "(": 40,
            ")": 41,
            "\\mid": 8739,
            "|": 8739,
            "\u2223": 8739,
            "\u2225": 8741,
            "\\|": 8739,
            "\\{": 123,
            "\\}": 125,
            "\\lbrace": 123,
            "\\rbrace": 125,
            "\\lparen": 40,
            "\\rparen": 41,
            "\\lbrack": 91,
            "\\rbrack": 93,
            "\\vert": 8739,
            "\\lvert": 8739,
            "\\mvert": 8739,
            "\\rvert": 8739,
            "\\Vert": 8741,
            "\\lVert": 8741,
            "\\mVert": 8741,
            "\\rVert": 8741,
            "\\parallel": 8741,
            "\\shortparallel": 8741,
            "\\langle": 10216,
            "\\rangle": 10217,
            "\\lfloor": 8970,
            "\\rfloor": 8971,
            "\\lceil": 8968,
            "\\rceil": 8969,
            "\\ulcorner": 9484,
            "\\urcorner": 9488,
            "\\llcorner": 9492,
            "\\lrcorner": 9496,
            "\\lgroup": 10222,
            "\\rgroup": 10223,
            "\\lmoustache": 9136,
            "\\rmoustache": 9137,
            "\\surd": 8730,
          }[e])
          ? t
          : e.codePointAt(0);
      }
      function ys(e, t, n, i, r) {
        var a, o;
        let s = new Lo(
            { parent: i, mathstyle: "textstyle" },
            null == r ? void 0 : r.style
          ),
          l = new oo(fs(e), {
            fontFamily: `Size${t}-Regular`,
            isSelected: r.isSelected,
            classes: (null != (a = r.classes) ? a : "") + ` ML__delim-size${t}`,
            type: null != (o = r.type) ? o : "ignore",
          }).wrap(s);
        return n && l.setTop((1 - s.scalingFactor) * Ea), l;
      }
      function gs(e, t, n, i, r) {
        var a;
        let o, s, l, c;
        (o = l = c = fs(e)), (s = null);
        let h = "Size1-Regular";
        "\\vert" === e ||
        "\\lvert" === e ||
        "\\rvert" === e ||
        "\\mvert" === e ||
        "\\mid" === e
          ? (l = o = c = 8739)
          : "\\Vert" === e ||
            "\\lVert" === e ||
            "\\rVert" === e ||
            "\\mVert" === e ||
            "\\|" === e
          ? (l = o = c = 8741)
          : "\\uparrow" === e
          ? (l = c = 9168)
          : "\\Uparrow" === e
          ? (l = c = 8214)
          : "\\downarrow" === e
          ? (o = l = 9168)
          : "\\Downarrow" === e
          ? (o = l = 8214)
          : "\\updownarrow" === e
          ? ((o = 8593), (l = 9168), (c = 8595))
          : "\\Updownarrow" === e
          ? ((o = 8657), (l = 8214), (c = 8659))
          : "[" === e || "\\lbrack" === e
          ? ((o = 9121), (l = 9122), (c = 9123), (h = "Size4-Regular"))
          : "]" === e || "\\rbrack" === e
          ? ((o = 9124), (l = 9125), (c = 9126), (h = "Size4-Regular"))
          : "\\lfloor" === e || "\u230a" === e
          ? ((l = o = 9122), (c = 9123), (h = "Size4-Regular"))
          : "\\lceil" === e || "\u2308" === e
          ? ((o = 9121), (l = c = 9122), (h = "Size4-Regular"))
          : "\\rfloor" === e || "\u230b" === e
          ? ((l = o = 9125), (c = 9126), (h = "Size4-Regular"))
          : "\\rceil" === e || "\u2309" === e
          ? ((o = 9124), (l = c = 9125), (h = "Size4-Regular"))
          : "(" === e || "\\lparen" === e
          ? ((o = 9115), (l = 9116), (c = 9117), (h = "Size4-Regular"))
          : ")" === e || "\\rparen" === e
          ? ((o = 9118), (l = 9119), (c = 9120), (h = "Size4-Regular"))
          : "\\{" === e || "\\lbrace" === e
          ? ((o = 9127),
            (s = 9128),
            (c = 9129),
            (l = 9130),
            (h = "Size4-Regular"))
          : "\\}" === e || "\\rbrace" === e
          ? ((o = 9131),
            (s = 9132),
            (c = 9133),
            (l = 9130),
            (h = "Size4-Regular"))
          : "\\lgroup" === e || "\u27ee" === e
          ? ((o = 9127), (c = 9129), (l = 9130), (h = "Size4-Regular"))
          : "\\rgroup" === e || "\u27ef" === e
          ? ((o = 9131), (c = 9133), (l = 9130), (h = "Size4-Regular"))
          : "\\lmoustache" === e || "\u23b0" === e
          ? ((o = 9127), (c = 9133), (l = 9130), (h = "Size4-Regular"))
          : "\\rmoustache" === e || "\u23b1" === e
          ? ((o = 9131), (c = 9129), (l = 9130), (h = "Size4-Regular"))
          : "\\surd" === e
          ? ((o = 57345), (c = 9143), (l = 57344), (h = "Size4-Regular"))
          : "\\ulcorner" === e
          ? ((o = 9484), (l = c = 32))
          : "\\urcorner" === e
          ? ((o = 9488), (l = c = 32))
          : "\\llcorner" === e
          ? ((c = 9492), (l = o = 32))
          : "\\lrcorner" === e && ((o = 9496), (l = o = 32));
        let p = $a(o, h),
          m = p.height + p.depth,
          f = $a(l, h),
          y = f.height + f.depth,
          g = $a(c, h),
          b = g.height + g.depth,
          v = 0,
          x = 1;
        if (null !== s) {
          let e = $a(s, h);
          (v = e.height + e.depth), (x = 2);
        }
        let w = m + b + v,
          k = Math.max(0, Math.ceil((t - w) / (x * y))),
          _ = w + k * x * y,
          S = Ea;
        n && (S *= i.scalingFactor);
        let M = _ / 2 - S,
          L = 0.008,
          C = [];
        C.push({ box: new oo(c, { fontFamily: h }) }), C.push(-L);
        let z = new oo(l, { fontFamily: h });
        if (null === s) for (let d = 0; d < k; d++) C.push({ box: z });
        else {
          for (let e = 0; e < k; e++) C.push({ box: z });
          C.push(-L), C.push({ box: new oo(s, { fontFamily: h }) }), C.push(-L);
          for (let e = 0; e < k; e++) C.push({ box: z });
        }
        C.push(-L), C.push({ box: new oo(o, { fontFamily: h }) });
        let A = "";
        "Size1-Regular" === h
          ? (A = " delim-size1")
          : "Size4-Regular" === h && (A = " delim-size4");
        let E = new mo({ bottom: M, children: C }, { classes: A });
        return new oo(
          E,
          u(d({}, null != r ? r : {}), {
            classes:
              (null != (a = null == r ? void 0 : r.classes) ? a : "") +
              " ML__delim-mult",
          })
        );
      }
      var bs = new Set([
          "(",
          ")",
          "\\lparen",
          "\\rparen",
          "[",
          "]",
          "\\lbrack",
          "\\rbrack",
          "\\{",
          "\\}",
          "\\lbrace",
          "\\rbrace",
          "\\lfloor",
          "\\rfloor",
          "\\lceil",
          "\\rceil",
          "\\surd",
          "\u230a",
          "\u230b",
          "\u2308",
          "\u2309",
        ]),
        vs = new Set([
          "\\uparrow",
          "\\downarrow",
          "\\updownarrow",
          "\\Uparrow",
          "\\Downarrow",
          "\\Updownarrow",
          "|",
          "\\|",
          "\\vert",
          "\\Vert",
          "\\lvert",
          "\\rvert",
          "\\lVert",
          "\\rVert",
          "\\mvert",
          "\\mid",
          "\\lgroup",
          "\\rgroup",
          "\\lmoustache",
          "\\rmoustache",
          "\u27ee",
          "\u27ef",
          "\u23b0",
          "\u23b1",
        ]),
        xs = new Set([
          "<",
          ">",
          "\\langle",
          "\\rangle",
          "/",
          "\\backslash",
          "\\lt",
          "\\gt",
        ]),
        ws = [0, 1.2, 1.8, 2.4, 3];
      var ks = [
          { type: "small", mathstyle: "scriptscriptstyle" },
          { type: "small", mathstyle: "scriptstyle" },
          { type: "small", mathstyle: "textstyle" },
          { type: "large", size: 1 },
          { type: "large", size: 2 },
          { type: "large", size: 3 },
          { type: "large", size: 4 },
        ],
        _s = [
          { type: "small", mathstyle: "scriptscriptstyle" },
          { type: "small", mathstyle: "scriptscriptstyle" },
          { type: "small", mathstyle: "textstyle" },
          { type: "stack" },
        ],
        Ss = [
          { type: "small", mathstyle: "scriptscriptstyle" },
          { type: "small", mathstyle: "scriptstyle" },
          { type: "small", mathstyle: "textstyle" },
          { type: "large", size: 1 },
          { type: "large", size: 2 },
          { type: "large", size: 3 },
          { type: "large", size: 4 },
          { type: "stack" },
        ];
      function Ms(e) {
        return "small" === e.type
          ? "Main-Regular"
          : "large" === e.type
          ? "Size" + e.size + "-Regular"
          : (e.type, "Size4-Regular");
      }
      function Ls(e, t, n, i, r, a) {
        if (!t || 0 === t.length || "." === t) return zs(r);
        let o;
        "<" === t || "\\lt" === t
          ? (t = "\\langle")
          : (">" === t || "\\gt" === t) && (t = "\\rangle"),
          (o = xs.has(t) ? ks : bs.has(t) ? Ss : _s);
        let s = (function (e, t, n, i) {
            for (
              let r = { "-4": 0, "-3": 1, 0: 2 }[i.mathstyle.sizeDelta];
              r < n.length && "stack" !== n[r].type;
              r++
            ) {
              let a = $a(e, Ms(n[r]));
              if (a.defaultMetrics)
                return { type: "small", mathstyle: "scriptstyle" };
              let o = a.height + a.depth;
              if (
                ("small" === n[r].type &&
                  ("scriptscriptstyle" === n[r].mathstyle
                    ? (o *= Math.max(
                        Ta[Math.max(1, i.size - 2)],
                        i.minFontScale
                      ))
                    : "scriptstyle" === n[r].mathstyle &&
                      (o *= Math.max(
                        Ta[Math.max(1, i.size - 1)],
                        i.minFontScale
                      ))),
                o > t)
              )
                return n[r];
            }
            return n[n.length - 1];
          })(fs(t), n, o, r),
          l = new Lo(
            { parent: r, mathstyle: s.mathstyle },
            null == a ? void 0 : a.style
          );
        return "small" === s.type
          ? (function (e, t, n, i) {
              var r;
              let a = new oo(fs(e), {
                fontFamily: "Main-Regular",
                isSelected: i.isSelected,
                classes:
                  "ML__small-delim " + (null != (r = i.classes) ? r : ""),
              }).wrap(t);
              return n && a.setTop((1 - t.scalingFactor) * Ea), a;
            })(t, l, i, u(d({}, a), { type: e }))
          : "large" === s.type
          ? ys(t, s.size, i, l, u(d({}, a), { type: e }))
          : (s.type, gs(t, n, i, l, u(d({}, a), { type: e })));
      }
      function Cs(e, t, n, i, r, a) {
        if ("." === t) return zs(r, null == a ? void 0 : a.classes);
        let o = Ea * r.scalingFactor,
          s = Math.max(n - o, i + o);
        return Ls(e, t, Math.max((s / 500) * 901, 2 * s - 0.5), !0, r, a);
      }
      function zs(e, t) {
        return new oo(null, {
          classes: " nulldelimiter " + (null != t ? t : ""),
          type: "ignore",
          width: e.getRegisterAsEm("nulldelimiterspace"),
        }).wrap(new Lo({ parent: e, mathstyle: "textstyle" }));
      }
      var As = class e extends Eo {
          constructor(e) {
            var t;
            super({
              type: "placeholder",
              command: "\\placeholder",
              mode: null != (t = null == e ? void 0 : e.mode) ? t : "math",
              style: null == e ? void 0 : e.style,
            }),
              (this.captureSelection = !0);
          }
          static fromJson(t) {
            return new e(t);
          }
          toJson() {
            return super.toJson();
          }
          render(e) {
            let t;
            return (
              (this.value = e.placeholderSymbol),
              (t =
                "function" == typeof e.renderPlaceholder
                  ? e.renderPlaceholder(e)
                  : this.createBox(e)),
              this.caret && (t.classes += " ML__placeholder-selected"),
              t
            );
          }
          _serialize() {
            return "\\placeholder{}";
          }
        },
        Es = [
          "matrix",
          "matrix*",
          "pmatrix",
          "pmatrix*",
          "bmatrix",
          "bmatrix*",
          "Bmatrix",
          "Bmatrix*",
          "vmatrix",
          "vmatrix*",
          "Vmatrix",
          "Vmatrix*",
        ],
        Ks = ["cases", "dcases", "rcases"],
        Ds = ["align", "align*", "aligned", "gather", "gathered", "split"],
        Ts = ["array", "subequations", "eqnarray"];
      function Bs(e) {
        return Es.includes(e);
      }
      var $s = class e extends Eo {
        constructor(e, t, n, i = {}) {
          var r;
          super({ type: "array" }),
            (this.environmentName = e),
            (this.rowGaps = n),
            i.mathstyleName && (this.mathstyleName = i.mathstyleName),
            i.columns &&
              (0 === i.columns.length
                ? (this.colFormat = [{ align: "l" }])
                : (this.colFormat = i.columns)),
            this.colFormat ||
              (this.colFormat = [
                { align: "l" },
                { align: "l" },
                { align: "l" },
                { align: "l" },
                { align: "l" },
                { align: "l" },
                { align: "l" },
                { align: "l" },
                { align: "l" },
                { align: "l" },
              ]),
            (this.array = (function (e, t, n) {
              let i = 0;
              for (let c of n) "align" in c && (i += 1);
              let r = 0,
                a = [];
              for (let c of t) {
                let t = 0;
                for (r = Math.max(r, Math.min(c.length, i)); t < c.length; ) {
                  let n = [],
                    r = Math.min(c.length, t + i);
                  for (; t < r; ) {
                    let i = c[t];
                    0 === i.length
                      ? n.push([new Eo({ type: "first", mode: e.mode })])
                      : "first" !== i[0].type
                      ? n.push([new Eo({ type: "first", mode: e.mode }), ...i])
                      : (i.slice(1).some((e) => "first" === e.type), n.push(i)),
                      (t += 1);
                  }
                  a.push(n);
                }
              }
              a.length > 0 &&
                1 === a[a.length - 1].length &&
                1 === a[a.length - 1][0].length &&
                "first" === a[a.length - 1][0][0].type &&
                a.pop();
              let o = [];
              for (let c of a) {
                if (c.length !== r)
                  for (let t = c.length; t < r; t++)
                    c.push([new Eo({ type: "first", mode: e.mode }), new As()]);
                o.push(c);
              }
              let s = 0,
                l = 0;
              for (let c of o) {
                l = 0;
                for (let t of c) {
                  for (let n of t) (n.parent = e), (n.parentBranch = [s, l]);
                  l += 1;
                }
                s += 1;
              }
              return (e.isDirty = !0), o;
            })(this, t, this.colFormat)),
            i.leftDelim && (this.leftDelim = i.leftDelim),
            i.rightDelim && (this.rightDelim = i.rightDelim),
            void 0 !== i.arraycolsep && (this.arraycolsep = i.arraycolsep),
            (this.colSeparationType = i.colSeparationType),
            void 0 !== i.arraystretch && (this.arraystretch = i.arraystretch),
            (this.minColumns = null != (r = i.minColumns) ? r : 1);
        }
        static fromJson(t) {
          return new e(t.environmentName, t.array, t.rowGaps, t);
        }
        toJson() {
          let e = u(d({}, super.toJson()), {
            environmentName: this.environmentName,
            array: this.array.map((e) =>
              e.map((e) => e.map((e) => e.toJson()))
            ),
            rowGaps: this.rowGaps,
            columns: this.colFormat,
            colSeparationType: this.colSeparationType,
          });
          return (
            void 0 !== this.arraystretch &&
              (e.arraystretch = this.arraystretch),
            void 0 !== this.arraycolsep && (e.arraycolsep = this.arraycolsep),
            this.leftDelim && (e.leftDelim = this.leftDelim),
            this.rightDelim && (e.rightDelim = this.rightDelim),
            e
          );
        }
        branch(e) {
          var t;
          if (Ao(e)) return null != (t = this.array[e[0]][e[1]]) ? t : void 0;
        }
        createBranch(e) {
          var t;
          return Ao(e)
            ? ((this.isDirty = !0), null != (t = this.branch(e)) ? t : [])
            : [];
        }
        get rowCount() {
          return this.array.length;
        }
        get colCount() {
          return this.array[0].length;
        }
        get maxColumns() {
          return this.colFormat.filter((e) => !!e.align).length;
        }
        removeBranch(e) {
          if (zo(e)) return super.removeBranch(e);
          let t = this.branch(e);
          return (
            (this.array[e[0]][e[1]] = void 0),
            t.forEach((e) => {
              (e.parent = void 0), (e.parentBranch = void 0);
            }),
            t[0].type,
            t.shift(),
            (this.isDirty = !0),
            t
          );
        }
        get hasChildren() {
          return this.children.length > 0;
        }
        get children() {
          let e = [];
          for (let t of this.array)
            for (let n of t)
              if (n) for (let t of n) e.push(...t.children), e.push(t);
          return [...e, ...super.children];
        }
        render(e) {
          var t, n, i, r, a, o;
          let s = new Lo(
              { parent: e, mathstyle: this.mathstyleName },
              this.style
            ),
            l = s.getRegisterAsEm("arrayrulewidth"),
            c = s.getRegisterAsEm("arraycolsep"),
            d = s.getRegisterAsEm("doublerulesep"),
            u =
              null !=
              (n =
                null != (t = this.arraystretch)
                  ? t
                  : s.getRegisterAsNumber("arraystretch"))
                ? n
                : 1,
            h = "number" == typeof this.arraycolsep ? this.arraycolsep : c;
          "small" === this.colSeparationType &&
            (h =
              (new Lo({ parent: e, mathstyle: "scriptstyle" }).scalingFactor /
                e.scalingFactor) *
              0.2778);
          let p = 1.2 * u,
            m = 0.7 * p,
            f = 0.3 * p,
            y = 0,
            g = [],
            b = 0,
            v = this.array.length;
          for (let D = 0; D < v; ++D) {
            let e = this.array[D];
            b = Math.max(b, e.length);
            let t = new Lo(
                { parent: s, mathstyle: this.mathstyleName },
                this.style
              ),
              n = m / t.scalingFactor,
              a = f / t.scalingFactor,
              o = { cells: [], height: 0, depth: 0, pos: 0 };
            for (let r of e) {
              let e =
                null != (i = Eo.createBox(t, r, { type: "ignore" }))
                  ? i
                  : new oo(null, { type: "ignore" });
              (a = Math.max(a, e.depth)),
                (n = Math.max(n, e.height)),
                o.cells.push(e);
            }
            let l = null != (r = vo(this.rowGaps[D])) ? r : 0;
            l > 0 && ((l += f), (a = Math.max(a, l)), (l = 0)),
              D < v - 1 &&
                !Bs(this.environmentName) &&
                "cases" !== this.environmentName &&
                "array" !== this.environmentName &&
                (a += s.getRegisterAsEm("jot")),
              (o.height = n),
              (o.depth = a),
              (y += n),
              (o.pos = y),
              (y += a + l),
              g.push(o);
          }
          let x = y / 2 + Ea,
            w = [];
          for (let D = 0; D < b; D++) {
            let e = [];
            for (let t of g) {
              let n = t.cells[D];
              (n.depth = t.depth),
                (n.height = t.height),
                e.push({ box: n, shift: t.pos - x });
            }
            e.length > 0 && w.push(new mo({ individualShift: e }));
          }
          let k = [],
            _ = !1,
            S = !1,
            M = 0,
            L = !this.leftDelim,
            { colFormat: C } = this;
          for (let D of C) {
            if ("align" in D && M >= w.length) break;
            if ("align" in D)
              _ ? k.push(Os(2 * h)) : (S || L) && k.push(Os(h)),
                k.push(new oo(w[M], { classes: "col-align-" + D.align })),
                M++,
                (_ = !0),
                (S = !1),
                (L = !1);
            else if ("gap" in D) {
              if ("number" == typeof D.gap) k.push(Os(D.gap));
              else {
                let t = Fs(e, g, x, D.gap);
                t && k.push(t);
              }
              (_ = !1), (S = !1), (L = !1);
            } else if ("separator" in D) {
              let e = new oo(null, { classes: "vertical-separator" });
              e.setStyle("height", y, "em"),
                e.setStyle(
                  "border-right",
                  `${l}em ${D.separator} currentColor`
                ),
                e.setStyle("vertical-align", -(y - x), "em");
              let t = 0;
              S ? (t = d - l) : _ && (t = h - l),
                (e.left = t),
                k.push(e),
                (_ = !1),
                (S = !0),
                (L = !1);
            }
          }
          _ && !this.rightDelim && k.push(Os(h));
          let z = new oo(k, { classes: "mtable" });
          if (
            (!this.leftDelim || "." === this.leftDelim) &&
            (!this.rightDelim || "." === this.rightDelim)
          )
            return this.caret && (z.caret = this.caret), this.bind(e, z);
          let A = z.height,
            E = z.depth,
            K = this.bind(
              e,
              new oo(
                [
                  this.bind(
                    e,
                    Cs(
                      "open",
                      null != (a = this.leftDelim) ? a : ".",
                      A,
                      E,
                      s,
                      { isSelected: this.isSelected }
                    )
                  ),
                  z,
                  this.bind(
                    e,
                    Cs(
                      "close",
                      null != (o = this.rightDelim) ? o : ".",
                      A,
                      E,
                      s,
                      { isSelected: this.isSelected }
                    )
                  ),
                ],
                { type: "ord" }
              )
            );
          return K
            ? (this.caret && (K.caret = this.caret),
              this.bind(e, this.attachSupsub(e, { base: K })))
            : null;
        }
        _serialize(e) {
          var t;
          let n = [`\\begin{${this.environmentName}}`];
          if ("array" === this.environmentName) {
            if ((n.push("{"), void 0 !== this.colFormat))
              for (let e of this.colFormat)
                "align" in e && "string" == typeof e.align
                  ? n.push(e.align)
                  : "separator" in e && "solid" === e.separator
                  ? n.push("|")
                  : "separator" in e && "dashed" === e.separator && n.push(":");
            n.push("}");
          }
          for (let i = 0; i < this.array.length; i++) {
            for (let t = 0; t < this.array[i].length; t++)
              t > 0 && n.push(" & "), n.push(Eo.serialize(this.array[i][t], e));
            if (i < this.array.length - 1) {
              let e = this.rowGaps[i];
              null != e && e.dimension
                ? n.push(
                    `\\\\[${e.dimension} ${null != (t = e.unit) ? t : "pt"}] `
                  )
                : n.push("\\\\ ");
            }
          }
          return n.push(`\\end{${this.environmentName}}`), Ja(n);
        }
        getCell(e, t) {
          return this.array[e][t];
        }
        setCell(e, t, n) {
          "array" === this.type &&
            Array.isArray(this.array) &&
            this.array[e][t];
          for (let r of this.array[e][t])
            (r.parent = void 0), (r.parentBranch = void 0);
          let i = n;
          (0 === n.length || "first" !== n[0].type) &&
            (i = [new Eo({ type: "first", mode: this.mode }), ...n]),
            (this.array[e][t] = i);
          for (let r of i) (r.parent = this), (r.parentBranch = [e, t]);
          this.isDirty = !0;
        }
        addRowBefore(e) {
          "array" === this.type && Array.isArray(this.array);
          let t = [];
          for (let n = 0; n < this.colCount; n++) t.push(Ps(this));
          this.array.splice(e, 0, t);
          for (let n = e; n < this.rowCount; n++)
            for (let e = 0; e < this.colCount; e++) {
              let t = this.array[n][e];
              if (t) for (let i of t) i.parentBranch = [n, e];
            }
          this.isDirty = !0;
        }
        addRowAfter(e) {
          "array" === this.type && Array.isArray(this.array);
          let t = [];
          for (let n = 0; n < this.colCount; n++) t.push(Ps(this));
          this.array.splice(e + 1, 0, t);
          for (let n = e + 1; n < this.rowCount; n++)
            for (let e = 0; e < this.colCount; e++) {
              let t = this.array[n][e];
              if (t) for (let i of t) i.parentBranch = [n, e];
            }
          this.isDirty = !0;
        }
        removeRow(e) {
          "array" === this.type && Array.isArray(this.array) && this.rowCount;
          let t = this.array.splice(e, 1);
          for (let n of t)
            for (let e of n)
              if (e)
                for (let t of e) (t.parent = void 0), (t.parentBranch = void 0);
          for (let n = e; n < this.rowCount; n++)
            for (let e = 0; e < this.colCount; e++) {
              let t = this.array[n][e];
              if (t) for (let i of t) i.parentBranch = [n, e];
            }
          this.isDirty = !0;
        }
        addColumnBefore(e) {
          "array" === this.type && Array.isArray(this.array);
          for (let t of this.array) t.splice(e, 0, Ps(this));
          for (let t = 0; t < this.rowCount; t++)
            for (let n = e; n < this.colCount; n++) {
              let e = this.array[t][n];
              if (e) for (let i of e) i.parentBranch = [t, n];
            }
          this.isDirty = !0;
        }
        addColumnAfter(e) {
          "array" === this.type && Array.isArray(this.array);
          for (let t of this.array) t.splice(e + 1, 0, Ps(this));
          for (let t = 0; t < this.rowCount; t++)
            for (let n = e + 1; n < this.colCount; n++) {
              let e = this.array[t][n];
              if (e) for (let i of e) i.parentBranch = [t, n];
            }
          this.isDirty = !0;
        }
        addColumn() {
          this.addColumnAfter(this.colCount - 1);
        }
        removeColumn(e) {
          "array" === this.type && Array.isArray(this.array) && this.colCount;
          for (let t of this.array) {
            let n = t.splice(e, 1);
            for (let e of n)
              if (e)
                for (let t of e) (t.parent = void 0), (t.parentBranch = void 0);
          }
          for (let t = 0; t < this.rowCount; t++)
            for (let n = e; n < this.colCount; n++) {
              let e = this.array[t][n];
              if (e) for (let i of e) i.parentBranch = [t, n];
            }
          this.isDirty = !0;
        }
        get cells() {
          let e = [];
          for (let t of this.array)
            for (let n of t) n && e.push(n.filter((e) => "first" !== e.type));
          return e;
        }
      };
      function Ps(e) {
        let t = new Eo({ type: "first", mode: e.mode });
        t.parent = e;
        let n = new As();
        return (n.parent = e), [t, n];
      }
      function Os(e) {
        return new oo(null, { classes: "arraycolsep", width: e });
      }
      function Fs(e, t, n, i) {
        if (!i) return null;
        let r = [];
        for (let a of t) {
          let t = Eo.createBox(e, i, { type: "ignore" });
          t &&
            ((t.depth = a.depth),
            (t.height = a.height),
            r.push({ box: t, shift: a.pos - n }));
        }
        return new mo({ individualShift: r }).wrap(e);
      }
      var Ns = class e extends Eo {
          constructor(e) {
            super({
              mode: e.mode,
              command: e.command,
              style: e.style,
              body: e.body,
              type: "box",
            }),
              (this.framecolor = e.framecolor),
              (this.backgroundcolor = e.backgroundcolor),
              (this.padding = e.padding),
              (this.offset = e.offset),
              (this.border = e.border);
          }
          static fromJson(t) {
            return new e(t);
          }
          toJson() {
            return u(d({}, super.toJson()), {
              framecolor: this.framecolor,
              backgroundcolor: this.backgroundcolor,
              padding: this.padding,
              offset: this.offset,
              border: this.border,
            });
          }
          render(e) {
            var t, n, i, r;
            let a = Eo.createBox(e, this.body, { type: "lift" });
            if (!a) return null;
            let o = e.toEm(null != (t = this.offset) ? t : { dimension: 0 });
            a.depth += o;
            let s = new Lo({ parent: e }, this.style),
              l = s.toEm(
                null != (n = this.padding) ? n : { register: "fboxsep" }
              ),
              c = new oo(null, { classes: "ML__box" });
            (c.height = a.height + l),
              (c.depth = a.depth + l),
              c.setStyle("box-sizing", "border-box"),
              c.setStyle("position", "absolute"),
              c.setStyle("top", 0.3 - l, "em"),
              c.setStyle("height", c.height + c.depth, "em"),
              c.setStyle("left", 0),
              c.setStyle("width", "100%"),
              this.backgroundcolor &&
                c.setStyle(
                  "background-color",
                  null != (i = s.toColor(this.backgroundcolor))
                    ? i
                    : "transparent"
                ),
              this.framecolor &&
                c.setStyle(
                  "border",
                  `${s.getRegisterAsEm("fboxrule", 2)}em solid ${
                    null != (r = s.toColor(this.framecolor)) ? r : "black"
                  }`
                ),
              this.border && c.setStyle("border", this.border),
              a.setStyle("display", "inline-block"),
              a.setStyle("position", "relative"),
              a.setStyle("height", a.height + a.depth, "em"),
              a.setStyle("vertical-align", -a.height, "em");
            let d = new oo([c, a], { type: "lift" });
            return (
              d.setStyle("display", "inline-block"),
              d.setStyle("position", "relative"),
              d.setStyle("line-height", 0),
              (d.height = a.height + l + (o > 0 ? o : 0)),
              (d.depth = a.depth + l + (o < 0 ? -o : 0)),
              d.setStyle("padding-left", l, "em"),
              d.setStyle("padding-right", l, "em"),
              d.setStyle(
                "height",
                a.height + a.depth + 2 * l + Math.abs(o),
                "em"
              ),
              d.setStyle("margin-top", -l, "em"),
              d.setStyle("top", a.depth - a.height + 2 * l - o, "em"),
              d.setStyle("vertical-align", a.depth + 2 * l, "em"),
              this.caret && (d.caret = this.caret),
              this.attachSupsub(e, { base: d })
            );
          }
          _serialize(e) {
            return e.skipStyles
              ? Ja([this.bodyToLatex(e), this.supsubToLatex(e)])
              : super._serialize(e);
          }
        },
        qs = class e extends Eo {
          constructor(e, t) {
            var n;
            super({
              type: "composition",
              mode: null != (n = null == t ? void 0 : t.mode) ? n : "math",
              value: e,
            });
          }
          static fromJson(t) {
            return new e(t.value, t);
          }
          toJson() {
            return super.toJson();
          }
          get computedStyle() {
            return {};
          }
          render(e) {
            let t = new oo(this.value, {
              classes: "ML__composition",
              type: "composition",
            });
            return this.bind(e, t), this.caret && (t.caret = this.caret), t;
          }
          _serialize(e) {
            return "";
          }
        },
        Rs = class e extends Eo {
          constructor(e) {
            super({ type: "error", value: e, command: e, mode: "math" }),
              (this.verbatimLatex = e);
          }
          static fromJson(t) {
            return new e(t.command);
          }
          toJson() {
            return super.toJson();
          }
          render(e) {
            let t = this.createBox(e, { classes: "ML__error" });
            return this.caret && (t.caret = this.caret), t;
          }
        },
        Is = class e extends Eo {
          constructor(e, t, n) {
            super({ type: "group", mode: t, style: n }),
              (this.body = e),
              (this.boxType = e.length > 1 ? "ord" : "ignore"),
              (this.skipBoundary = !0),
              (this.displayContainsHighlight = !1),
              e &&
                1 === e.length &&
                "," === e[0].command &&
                (this.captureSelection = !0);
          }
          static fromJson(t) {
            return new e(t.body, t.mode, t.style);
          }
          render(e) {
            let t = Eo.createBox(e, this.body, { type: this.boxType });
            return t
              ? (this.caret && (t.caret = this.caret), this.bind(e, t))
              : null;
          }
          _serialize(e) {
            if (
              !e.expandMacro &&
              !e.skipStyles &&
              "string" == typeof this.verbatimLatex
            )
              return this.verbatimLatex;
            let t = ne(this.command, this.mode);
            return null != t && t.serialize
              ? t.serialize(this, e)
              : `{${this.bodyToLatex(e)}}`;
          }
        },
        Vs = class e extends Eo {
          constructor(e, t, n) {
            super({
              type: "leftright",
              style: n.style,
              displayContainsHighlight: !0,
            }),
              (this.variant = e),
              (this.body = t),
              (this.leftDelim = n.leftDelim),
              (this.rightDelim = n.rightDelim);
          }
          static fromJson(t) {
            var n;
            return new e(null != (n = t.variant) ? n : "", t.body, t);
          }
          toJson() {
            let e = super.toJson();
            return (
              this.variant && (e.variant = this.variant),
              this.leftDelim && (e.leftDelim = this.leftDelim),
              this.rightDelim && (e.rightDelim = this.rightDelim),
              e
            );
          }
          _serialize(e) {
            var t, n;
            let i = this.matchingRightDelim();
            return "left...right" === this.variant
              ? Ja([
                  "\\left",
                  null != (t = this.leftDelim) ? t : ".",
                  this.bodyToLatex(e),
                  "\\right",
                  i,
                ])
              : "mleft...mright" === this.variant
              ? Ja([
                  "\\mleft",
                  null != (n = this.leftDelim) ? n : ".",
                  this.bodyToLatex(e),
                  "\\mright",
                  i,
                ])
              : Ja([
                  this.leftDelim && "." !== this.leftDelim
                    ? this.leftDelim
                    : "",
                  this.bodyToLatex(e),
                  i,
                ]);
          }
          matchingRightDelim() {
            var e, t;
            if (this.rightDelim && "?" !== this.rightDelim)
              return this.rightDelim;
            let n = null != (e = this.leftDelim) ? e : ".";
            return null != (t = ps[n]) ? t : n;
          }
          render(e) {
            var t, n, i;
            let r = new Lo({ parent: e }, this.style);
            this.body;
            let a = new Lo({ parent: e, mathstyle: "textstyle" }, this.style),
              o =
                null != (t = Eo.createBox(r, this.body, { type: "inner" }))
                  ? t
                  : new oo(null, { type: "inner" }),
              s = o.height / a.scalingFactor,
              l = o.depth / a.scalingFactor,
              c = [];
            if (
              (this.leftDelim &&
                c.push(
                  this.bind(
                    a,
                    Cs("open", this.leftDelim, s, l, a, {
                      isSelected: this.isSelected,
                      classes:
                        "ML__open" +
                        (this.containsCaret ? " ML__contains-caret" : ""),
                      mode: this.mode,
                      style: this.style,
                    })
                  )
                ),
              o && (js(o.children, this, r, s, l), c.push(o)),
              this.rightDelim)
            ) {
              let e = this.containsCaret ? " ML__contains-caret" : "",
                t = this.rightDelim;
              "?" === t &&
                (r.smartFence
                  ? ((t = this.matchingRightDelim()),
                    (e += " ML__smart-fence__close"))
                  : (t = ".")),
                c.push(
                  this.bind(
                    a,
                    Cs("close", t, s, l, a, {
                      isSelected: this.isSelected,
                      classes: e + " ML__close",
                      mode: this.mode,
                      style: this.style,
                    })
                  )
                );
            }
            let d =
                null !=
                  (i =
                    "mleft...mright" === this.variant ||
                    (null == (n = this.leftSibling) ? void 0 : n.isFunction)) &&
                i,
              u = new oo(c, {
                type: d ? "close" : "inner",
                classes: "left-right",
              });
            return (
              this.caret && (u.caret = this.caret), this.bind(r, u.wrap(r))
            );
          }
        };
      function js(e, t, n, i, r) {
        if (e)
          for (let a = 0; a < e.length; a++) {
            let o = e[a];
            "middle" === o.type
              ? ((e[a] = t.bind(
                  n,
                  Cs("inner", o.value, i, r, n, { isSelected: t.isSelected })
                )),
                (e[a].caret = o.caret),
                (e[a].isSelected = o.isSelected),
                (e[a].cssId = o.cssId),
                (e[a].htmlData = o.htmlData),
                (e[a].htmlStyle = o.htmlStyle),
                (e[a].attributes = o.attributes),
                (e[a].cssProperties = o.cssProperties))
              : o.children && js(o.children, t, n, i, r);
          }
      }
      var Hs = class e extends Eo {
          constructor(e, t) {
            var n;
            super({ type: "macro", command: e, style: t.style }),
              (this.body = t.body),
              void 0 === t.captureSelection
                ? t.args
                  ? (this.captureSelection = !1)
                  : (this.captureSelection = !0)
                : (this.captureSelection = t.captureSelection),
              (this.macroArgs = t.args),
              (this.expand = null != (n = t.expand) && n);
          }
          static fromJson(t) {
            return new e(t.command, t);
          }
          toJson() {
            let e = super.toJson();
            return (
              this.expand && (e.expand = !0),
              void 0 !== this.captureSelection &&
                (e.captureSelection = this.captureSelection),
              this.macroArgs && (e.args = this.macroArgs),
              e
            );
          }
          _serialize(e) {
            var t;
            return e.expandMacro && this.expand
              ? this.bodyToLatex(e)
              : this.command + (null != (t = this.macroArgs) ? t : "");
          }
          render(e) {
            let t = Eo.createBox(e, this.body);
            return t
              ? (this.caret && (t.caret = this.caret), this.bind(e, t))
              : null;
          }
        },
        Ws = class e extends Eo {
          constructor() {
            super({ type: "macro-argument" });
          }
          static fromJson(t) {
            return new e();
          }
          toJson() {
            return super.toJson();
          }
          _serialize(e) {
            return "";
          }
          render(e) {
            return null;
          }
        },
        Us = class e extends Eo {
          constructor(e, t, n = !1, i, r) {
            var a;
            super({
              type: "prompt",
              mode: null != (a = null == r ? void 0 : r.mode) ? a : "math",
              style: null == r ? void 0 : r.style,
              command: "\\placeholder",
            }),
              (this.body = i),
              (this.correctness = t),
              (this.placeholderId = e),
              (this.locked = n),
              (this.captureSelection = this.locked);
          }
          static fromJson(t) {
            return new e(t.placeholderId, t.correctness, t.locked, t.body, t);
          }
          toJson() {
            let e = super.toJson();
            return (
              this.placeholderId && (e.placeholderId = this.placeholderId),
              this.body || delete e.body,
              this.body &&
                (e.body = this.body
                  .filter((e) => "first" !== e.type)
                  .map((e) => e.toJson())),
              this.correctness && (e.correctness = this.correctness),
              (e.locked = this.locked),
              e
            );
          }
          render(e) {
            let t = new Lo({ parent: e }),
              n = t.getRegisterAsEm("fboxsep"),
              i = n,
              r = Eo.createBox(e, this.body);
            if (!r) return null;
            r.height || (r.height = 0.5),
              r.setStyle("vertical-align", -r.height, "em"),
              "correct" === this.correctness
                ? r.setStyle(
                    "color",
                    "var(--correct-color, var(--ML__correct-color))"
                  )
                : "incorrect" === this.correctness &&
                  r.setStyle(
                    "color",
                    "var(--incorrect-color, var(--ML__incorrect-color))"
                  );
            let a = new oo(r, { type: "ord" }),
              o = "ML__prompt ";
            this.locked
              ? (o += " ML__lockedPromptBox ")
              : (o += " ML__editablePromptBox "),
              "correct" === this.correctness
                ? (o += " ML__correctPromptBox ")
                : "incorrect" === this.correctness &&
                  (o += " ML__incorrectPromptBox "),
              this.containsCaret && (o += " ML__focusedPromptBox ");
            let s = new oo(null, { classes: o });
            (s.height = a.height + i),
              (s.depth = a.depth + i),
              s.setStyle("box-sizing", "border-box"),
              s.setStyle("position", "absolute"),
              s.setStyle("height", a.height + a.depth + 2 * i, "em"),
              0 === i
                ? s.setStyle("width", "100%")
                : (s.setStyle("width", `calc(100% + ${2 * i}em)`),
                  s.setStyle("top", n, "em"),
                  s.setStyle("left", -i, "em")),
              (!this.body || 1 === this.body.length) &&
                (s.setStyle("width", `calc(100% + ${3 * i}em)`),
                s.setStyle("left", -1.5 * i, "em"));
            let l = "";
            "incorrect" === this.correctness &&
              (l +=
                '<line x1="3%"  y1="97%" x2="97%" y2="3%" stroke-width="0.5" stroke="var(--incorrect-color, var(--ML__incorrect-color))" stroke-linecap="round" />'),
              l && uo(s, l, ""),
              a.setStyle("display", "inline-block"),
              a.setStyle("height", r.height + r.depth, "em"),
              a.setStyle("vertical-align", -i, "em");
            let c = new oo([s, a], { classes: "ML__prompt-atom" });
            return (
              c.setStyle("position", "relative"),
              c.setStyle("display", "inline-block"),
              c.setStyle("line-height", 0),
              (c.height = a.height + i + 0.2),
              (c.depth = a.depth + i),
              (c.left = i),
              (c.right = i),
              c.setStyle("height", a.height + i, "em"),
              c.setStyle("top", a.depth - a.height, "em"),
              c.setStyle("vertical-align", a.depth + i, "em"),
              c.setStyle("margin-left", 0.5, "em"),
              c.setStyle("margin-right", 0.5, "em"),
              this.caret && (c.caret = this.caret),
              this.bind(t, this.attachSupsub(e, { base: c }))
            );
          }
          _serialize(e) {
            var t;
            let n = null != (t = this.bodyToLatex(e)) ? t : "",
              i = "\\placeholder";
            return (
              this.placeholderId && (i += `[${this.placeholderId}]`),
              "correct" === this.correctness
                ? (i += "[correct]")
                : "incorrect" === this.correctness && (i += "[incorrect]"),
              this.locked && (i += "[locked]"),
              Xa(i, n)
            );
          }
        },
        Js = class e extends Eo {
          constructor(e) {
            super({ type: "subsup", style: null == e ? void 0 : e.style }),
              (this.subsupPlacement = "auto");
          }
          static fromJson(t) {
            let n = new e(t);
            for (let e of Co) t[e] && n.setChildren(t[e], e);
            return n;
          }
          render(e) {
            var t;
            let n = new Lo({ parent: e, isPhantom: !0 }),
              i = this.leftSibling,
              r = null != (t = i.render(n)) ? t : new oo(null),
              a = new oo(null, { height: r.height, depth: r.depth });
            return this.attachSupsub(e, {
              base: a,
              isCharacterBox: i.isCharacterBox(),
              type: "ignore",
            });
          }
          _serialize(e) {
            return this.supsubToLatex(e);
          }
        };
      function Xs(e) {
        return !!e && !/^(<$$>|<$>|<space>|<{>|<}>|#[0-9\?]|\\.+)$/.test(e);
      }
      var Gs = class {
        constructor(e, t, n) {
          var i, r, a, o;
          (this.errors = []),
            (this.index = 0),
            (this.endCount = 0),
            null != n || (n = {}),
            (this.tokens = e),
            (this.context =
              !(t instanceof Lo) || (null != n && n.parseMode) || n.mathstyle
                ? new Lo({ from: t, mathstyle: n.mathstyle }, n.style)
                : t),
            (this.args = null != (i = n.args) ? i : void 0),
            (this.smartFence = this.context.smartFence),
            (this.parsingContext = {
              parent: void 0,
              mathlist: [],
              style: null != (r = n.style) ? r : {},
              parseMode: null != (a = n.parseMode) ? a : "math",
              mathstyle: null != (o = n.mathstyle) ? o : "displaystyle",
              tabular: !1,
            });
        }
        beginContext(e) {
          var t, n, i;
          let r = this.parsingContext,
            a = {
              parent: r,
              mathlist: [],
              style: d({}, r.style),
              parseMode:
                null != (t = null == e ? void 0 : e.mode) ? t : r.parseMode,
              mathstyle:
                null != (n = null == e ? void 0 : e.mathstyle)
                  ? n
                  : r.mathstyle,
              tabular: null != (i = null == e ? void 0 : e.tabular) && i,
            };
          this.parsingContext = a;
        }
        endContext() {
          this.parsingContext = this.parsingContext.parent;
        }
        onError(e) {
          this.errors.push(
            d(
              {
                before: Ga(this.tokens.slice(this.index, this.index + 10)),
                after: Ga(
                  this.tokens.slice(Math.max(0, this.index - 10), this.index)
                ),
              },
              e
            )
          );
        }
        get mathlist() {
          return this.parsingContext.mathlist;
        }
        set mathlist(e) {
          this.parsingContext.mathlist = e;
        }
        get parseMode() {
          return this.parsingContext.parseMode;
        }
        set parseMode(e) {
          this.parsingContext.parseMode = e;
        }
        get tabularMode() {
          return this.parsingContext.tabular;
        }
        get style() {
          let e = this.parsingContext;
          for (; e; ) {
            if (e.style) return d({}, e.style);
            e = e.parent;
          }
          return {};
        }
        set style(e) {
          this.parsingContext.style = e;
        }
        end() {
          return (
            this.endCount++,
            this.index >= this.tokens.length || this.endCount > 1e3
          );
        }
        next() {
          this.index += 1;
        }
        get() {
          return (
            (this.endCount = 0),
            this.index < this.tokens.length ? this.tokens[this.index++] : ""
          );
        }
        peek() {
          return this.tokens[this.index];
        }
        match(e) {
          return this.tokens[this.index] === e && (this.index++, !0);
        }
        lastSubsupAtom() {
          let e;
          return (
            (this.mathlist.length > 0 &&
              ((e = this.mathlist[this.mathlist.length - 1]),
              "subsup" === e.type || void 0 !== e.subsupPlacement)) ||
              ((e = new Js({ style: this.style })), this.mathlist.push(e)),
            e
          );
        }
        hasPattern(e) {
          return e.test(this.tokens[this.index]);
        }
        hasInfixCommand() {
          var e;
          let { index: t } = this;
          if (t < this.tokens.length && this.tokens[t].startsWith("\\")) {
            let n = ne(this.tokens[t], this.parseMode);
            return (
              !(
                !n ||
                "symbol" === n.definitionType ||
                (n.ifMode && !n.ifMode.includes(this.parseMode))
              ) &&
              null != (e = n.infix) &&
              e
            );
          }
          return !1;
        }
        matchColumnSeparator() {
          return (
            !(!this.tabularMode || "&" !== this.peek()) && (this.index++, !0)
          );
        }
        matchRowSeparator() {
          if (!this.tabularMode) return !1;
          let e = this.peek();
          return (
            ("\\\\" === e || "\\cr" === e || "\\tabularnewline" === e) &&
            (this.index++, !0)
          );
        }
        placeholder() {
          var e;
          let t = null == (e = this.args) ? void 0 : e.call(this, "?");
          return t
            ? Zs(t, { parseMode: this.parseMode, mathstyle: "textstyle" })
            : [new As({ mode: this.parseMode, style: this.style })];
        }
        skipWhitespace() {
          for (; this.match("<space>"); );
        }
        skipUntilToken(e) {
          let t = this.tokens[this.index];
          for (; t && t !== e; ) t = this.tokens[++this.index];
          t === e && this.index++;
        }
        skipFiller() {
          for (; this.match("\\relax") || this.match("<space>"); );
        }
        matchKeyword(e) {
          let t = this.index,
            n = this.end(),
            i = "";
          for (; !n; ) {
            let t = this.get();
            Xs(t)
              ? ((i += t), (n = this.end() || i.length >= e.length))
              : (n = !0);
          }
          let r = e.toUpperCase() === i.toUpperCase();
          return r || (this.index = t), r;
        }
        scanString() {
          let e = "";
          for (; !this.end(); ) {
            let t = this.peek();
            if ("]" === t) return e;
            if ("<space>" === t) e += " ";
            else if (t.startsWith("\\"))
              this.onError({ code: "unexpected-command-in-string" }),
                (e += t.substring(1));
            else {
              if (!Xs(t)) return e;
              e += t;
            }
            this.next();
          }
          return e;
        }
        scanBalancedString() {
          let e = "",
            t = this.end(),
            n = 1;
          for (; !t; ) {
            let i = this.get();
            "<space>" === i
              ? (e += " ")
              : "<{>" === i
              ? ((e += "{"), (n += 1))
              : "<}>" === i
              ? ((n -= 1), n > 0 ? (e += "}") : (this.index -= 1))
              : (e += "<$>" === i ? "$" : "<$$>" === i ? "$$" : i),
              (t = 0 === n || this.end());
          }
          return e;
        }
        scanLiteralGroup() {
          var e;
          if (!this.match("<{>")) return "";
          let t = "",
            n = 1;
          for (; n > 0 && !this.end(); ) {
            let i = this.get();
            "<}>" === i
              ? ((n -= 1), n > 0 && (t += "}"))
              : "<{>" === i
              ? ((n += 1), (t += "{"))
              : (/\\[a-zA-Z]+$/.test(t) && /^[a-zA-Z]/.test(i) && (t += " "),
                (t +=
                  null != (e = { "<space>": " ", "<$$>": "$$", "<$>": "$" }[i])
                    ? e
                    : i));
          }
          return t;
        }
        scanNumber(e = !0) {
          var t, n;
          let i = !1,
            r = this.peek();
          for (; "<space>" === r || "+" === r || "-" === r; )
            this.get(), "-" === r && (i = !i), (r = this.peek());
          e = !!e;
          let a = 10,
            o = /\d/;
          if (this.match("'")) (a = 8), (o = /[0-7]/), (e = !0);
          else if (this.match('"')) (a = 16), (o = /[\dA-F]/), (e = !0);
          else if (this.match("x")) (a = 16), (o = /[\dA-Fa-f]/), (e = !0);
          else if (this.match("`"))
            return (
              (r = this.get()),
              r
                ? 2 === r.length && r.startsWith("\\")
                  ? {
                      number:
                        (i ? -1 : 1) * (null != (t = r.codePointAt(1)) ? t : 0),
                      base: "alpha",
                    }
                  : {
                      number:
                        (i ? -1 : 1) * (null != (n = r.codePointAt(0)) ? n : 0),
                      base: "alpha",
                    }
                : null
            );
          let s = "";
          for (; this.hasPattern(o); ) s += this.get();
          if (!e && (this.match(".") || this.match(",")))
            for (s += "."; this.hasPattern(o); ) s += this.get();
          let l = e ? Number.parseInt(s, a) : Number.parseFloat(s);
          return Number.isNaN(l)
            ? null
            : {
                number: i ? -l : l,
                base: 16 === a ? "hexadecimal" : 8 === a ? "octal" : "decimal",
              };
        }
        scanRegister() {
          var e;
          let t = this.index,
            n = this.scanNumber(!1);
          if ((this.skipWhitespace(), this.match("\\relax"))) return n;
          let i = !1;
          if (null === n)
            for (;;) {
              let e = this.peek();
              if ("-" === e) i = !i;
              else if ("+" !== e) break;
              this.next(), this.skipWhitespace();
            }
          if (this.match("\\global")) {
            this.skipWhitespace();
            let e = this.get();
            return e.startsWith("\\")
              ? n
                ? { register: e, global: !0, factor: (i ? -1 : 1) * n.number }
                : i
                ? { register: e, global: !0, factor: -1 }
                : { register: e, global: !0 }
              : ((this.index = t), null);
          }
          let r = this.get();
          return null != r && r.startsWith("\\")
            ? ((r = r.substring(1)),
              this.context.registers[r]
                ? i && null === n
                  ? { register: r }
                  : {
                      register: r,
                      factor:
                        (i ? -1 : 1) *
                        (null != (e = null == n ? void 0 : n.number) ? e : 1),
                    }
                : ((this.index = t), null))
            : ((this.index = t), null);
        }
        scanValue() {
          let e = this.scanRegister();
          if (e) return e;
          let t = this.index,
            n = this.scanGlueOrDimen();
          if (n && ("unit" in n || ("glue" in n && "unit" in n.glue))) return n;
          this.index = t;
          let i = this.scanNumber();
          if (i) return i;
          if (this.end() || !Xs(this.peek())) return null;
          let r = this.scanString();
          return r.length > 0 ? { string: r } : null;
        }
        scanDimen() {
          let e = this.scanNumber(!1);
          if (null === e) return null;
          let t,
            n = e.number;
          return (
            this.skipWhitespace(),
            this.matchKeyword("true"),
            this.skipWhitespace(),
            this.matchKeyword("pt")
              ? (t = "pt")
              : this.matchKeyword("mm")
              ? (t = "mm")
              : this.matchKeyword("cm")
              ? (t = "cm")
              : this.matchKeyword("ex")
              ? (t = "ex")
              : this.matchKeyword("px")
              ? (t = "px")
              : this.matchKeyword("em")
              ? (t = "em")
              : this.matchKeyword("bp")
              ? (t = "bp")
              : this.matchKeyword("dd")
              ? (t = "dd")
              : this.matchKeyword("pc")
              ? (t = "pc")
              : this.matchKeyword("in")
              ? (t = "in")
              : this.matchKeyword("mu") && (t = "mu"),
            t ? { dimension: n, unit: t } : { dimension: n }
          );
        }
        scanGlueOrDimen() {
          let e = this.scanDimen();
          if (null === e) return null;
          if ((this.skipWhitespace(), this.match("\\relax"))) return e;
          let t = { glue: e };
          if (this.matchKeyword("plus")) {
            let e = this.scanDimen();
            if (!e) return t;
            t.grow = e;
          }
          if ((this.skipWhitespace(), this.match("\\relax"))) return t;
          if ((this.skipWhitespace(), this.matchKeyword("minus"))) {
            let e = this.scanDimen();
            if (!e) return t;
            t.shrink = e;
          }
          return t.grow || t.shrink ? t : e;
        }
        scanColspec() {
          this.skipWhitespace();
          let e = [];
          for (
            ;
            !this.end() && "<}>" !== this.peek() && "]" !== this.peek();

          ) {
            let t = this.get();
            "c" === t || "r" === t || "l" === t
              ? e.push({ align: t })
              : "|" === t
              ? e.push({ separator: "solid" })
              : ":" === t
              ? e.push({ separator: "dashed" })
              : "@" === t &&
                (this.match("<{>") &&
                  (this.beginContext({ mode: "math" }),
                  e.push({ gap: this.scan((e) => "<}>" === e) }),
                  this.endContext()),
                this.match("<}>") ||
                  this.onError({ code: "unbalanced-braces" }));
          }
          return e;
        }
        scanModeSet() {
          let e;
          if (
            (this.match("\\(") && (e = "textstyle"),
            !e && this.match("\\[") && (e = "displaystyle"),
            !e)
          )
            return null;
          this.beginContext({ mode: "math", mathstyle: e });
          let t = this.scan(
            (t) => t === ("displaystyle" === e ? "\\]" : "\\)")
          );
          return (
            this.match("displaystyle" === e ? "\\]" : "\\)") ||
              this.onError({ code: "unbalanced-mode-shift" }),
            this.endContext(),
            t
          );
        }
        scanModeShift() {
          let e = "";
          if (
            (this.match("<$>") && (e = "<$>"),
            !e && this.match("<$$>") && (e = "<$$>"),
            !e)
          )
            return null;
          this.beginContext({ mode: "math", mathstyle: "textstyle" });
          let t = this.scan((t) => t === e);
          return (
            this.match(e) || this.onError({ code: "unbalanced-mode-shift" }),
            this.endContext(),
            t
          );
        }
        scanEnvironment() {
          if (!this.match("\\begin")) return null;
          let e = this.scanArgument("string");
          if (!e) return null;
          let t = (function (e) {
            var t;
            return null != (t = q[e]) ? t : null;
          })(e);
          if (!t)
            return this.onError({ code: "unknown-environment", arg: e }), null;
          let n = [];
          if (t.params)
            for (let s of t.params)
              if (s.isOptional) n.push(this.scanOptionalArgument(s.type));
              else {
                let t = this.scanArgument(s.type);
                t || this.onError({ code: "missing-argument", arg: e }),
                  n.push(t);
              }
          this.beginContext({ tabular: t.tabular });
          let i = [],
            r = [],
            a = [],
            o = !1;
          do {
            if (
              (this.end() &&
                (this.onError({ code: "unbalanced-environment", arg: e }),
                (o = !0)),
              !o &&
                this.match("\\end") &&
                (this.scanArgument("string") !== e &&
                  this.onError({ code: "unbalanced-environment", arg: e }),
                (o = !0)),
              !o)
            )
              if (this.matchColumnSeparator())
                a.push(this.mathlist), (this.mathlist = []);
              else if (this.matchRowSeparator()) {
                a.push(this.mathlist), (this.mathlist = []);
                let e = null;
                this.skipWhitespace(),
                  this.match("[") &&
                    ((e = this.scanDimen()),
                    this.skipWhitespace(),
                    this.match("]")),
                  r.push(null != e ? e : { dimension: 0 }),
                  i.push(a),
                  (a = []);
              } else
                this.mathlist.push(
                  ...this.scan((e) =>
                    [
                      "<}>",
                      "&",
                      "\\end",
                      "\\cr",
                      "\\\\",
                      "\\tabularnewline",
                    ].includes(e)
                  )
                );
          } while (!o);
          return (
            a.push(this.mathlist),
            a.length > 0 && i.push(a),
            this.endContext(),
            t.createAtom(e, i, r, n)
          );
        }
        scanExpression() {
          let e = this.mathlist;
          if (((this.mathlist = []), this.parseExpression())) {
            let t = this.mathlist;
            return (this.mathlist = e), t;
          }
          return (this.mathlist = e), null;
        }
        scan(e) {
          this.beginContext(), e || (e = (e) => "<}>" === e);
          let t,
            n = "",
            i = null,
            r = [],
            a = null;
          for (; !this.end() && !e(this.peek()); )
            this.hasInfixCommand() && !n
              ? ((n = this.get()),
                (i = ne(n, "math")),
                i && (r = this.scanArguments(i)[1]),
                (a = this.mathlist),
                (this.mathlist = []))
              : this.parseExpression();
          return (
            n
              ? (r.unshift(this.mathlist),
                a && r.unshift(a),
                (t = [
                  i.createAtom({
                    command: n,
                    args: r,
                    style: this.style,
                    mode: this.parseMode,
                  }),
                ]))
              : (t = this.mathlist),
            this.endContext(),
            t
          );
        }
        scanGroup() {
          let e = this.index;
          if (!this.match("<{>")) return null;
          let t = this.scan((e) => "<}>" === e);
          this.match("<}>") || this.onError({ code: "unbalanced-braces" });
          let n = new Is(t, this.parseMode, this.style);
          return (n.verbatimLatex = Ga(this.tokens.slice(e, this.index))), n;
        }
        scanSmartFence() {
          if ((this.skipWhitespace(), !this.match("("))) return null;
          this.beginContext();
          let e = 1;
          for (; !this.end() && 0 !== e; )
            this.match("(") && (e += 1),
              this.match(")") && (e -= 1),
              0 !== e && this.parseExpression();
          0 === e && this.match(")");
          let t = new Vs("", this.mathlist, {
            leftDelim: "(",
            rightDelim: 0 === e ? ")" : "?",
          });
          return this.endContext(), t;
        }
        scanDelim() {
          this.skipWhitespace();
          let e = this.peek();
          if (!e)
            return this.onError({ code: "unexpected-end-of-string" }), null;
          if (!Xs(e) && !e.startsWith("\\")) return null;
          this.next();
          let t = ne(e, "math");
          return t
            ? "function" === t.definitionType &&
              t.ifMode &&
              !t.ifMode.includes(this.parseMode)
              ? (this.onError({ code: "unexpected-delimiter", arg: e }), null)
              : ("symbol" === t.definitionType &&
                  ("mopen" === t.type || "mclose" === t.type)) ||
                /^(\.|\?|\||<|>|\\vert|\\Vert|\\\||\\surd|\\uparrow|\\downarrow|\\Uparrow|\\Downarrow|\\updownarrow|\\Updownarrow|\\mid|\\mvert|\\mVert)$/.test(
                  e
                )
              ? e
              : (this.onError({ code: "unexpected-delimiter", arg: e }), null)
            : (this.onError({ code: "unknown-command", arg: e }), null);
        }
        scanLeftRight() {
          var e;
          if (this.match("\\right"))
            return (
              this.onError({ code: "unbalanced-braces" }), new Rs("\\right")
            );
          if (this.match("\\mright"))
            return (
              this.onError({ code: "unbalanced-braces" }), new Rs("\\mright")
            );
          let t = "\\right";
          if (!this.match("\\left")) {
            if (!this.match("\\mleft")) return null;
            t = "\\mright";
          }
          let n = this.scanDelim();
          if (!n)
            return (
              this.onError({ code: "unexpected-delimiter" }),
              new Rs("\\right" === t ? "\\left" : "\\mleft")
            );
          for (this.beginContext(); !this.end() && !this.match(t); )
            this.parseExpression();
          let i = this.mathlist;
          this.endContext();
          let r = null != (e = this.scanDelim()) ? e : ".";
          return new Vs(
            "\\right" === t ? "left...right" : "mleft...mright",
            i,
            { leftDelim: n, rightDelim: r, style: this.style }
          );
        }
        parseSupSub() {
          if ("math" !== this.parseMode) return !1;
          let e = this.peek();
          if ("^" !== e && "_" !== e && "'" !== e) return !1;
          let t = this.lastSubsupAtom();
          for (; "^" === e || "_" === e || "'" === e; )
            this.match("'")
              ? this.match("'")
                ? t.addChild(
                    new Eo({
                      type: "mord",
                      command: "\\doubleprime",
                      mode: "math",
                      value: "\u2032\u2032",
                    }),
                    "superscript"
                  )
                : t.addChild(
                    new Eo({
                      type: "mord",
                      command: "\\prime",
                      mode: "math",
                      value: "\u2032",
                    }),
                    "superscript"
                  )
              : (this.match("^") || this.match("_")) &&
                t.addChildren(
                  T(this.scanArgument("expression")),
                  "_" === e ? "subscript" : "superscript"
                ),
              (e = this.peek());
          return !0;
        }
        parseLimits() {
          if ("math" !== this.parseMode) return !1;
          let e = this.match("\\limits"),
            t = !e && this.match("\\nolimits"),
            n = !t && !e && this.match("\\displaylimits");
          if (!e && !t && !n) return !1;
          let i =
            this.mathlist.length > 0
              ? this.mathlist[this.mathlist.length - 1]
              : null;
          return (
            null !== i &&
            "mop" === i.type &&
            ((i.explicitSubsupPlacement = !0),
            e && (i.subsupPlacement = "over-under"),
            t && (i.subsupPlacement = "adjacent"),
            n && (i.subsupPlacement = "auto"),
            !0)
          );
        }
        scanArguments(e) {
          if (null == e || !e.params) return [void 0, []];
          let t,
            n = [],
            i = e.infix ? 2 : 0;
          for (; i < e.params.length; ) {
            let r = e.params[i];
            "rest" === r.type
              ? n.push(
                  this.scan((e) =>
                    [
                      "<}>",
                      "&",
                      "\\end",
                      "\\cr",
                      "\\\\",
                      "\\tabularnewline",
                    ].includes(e)
                  )
                )
              : r.isOptional
              ? n.push(this.scanOptionalArgument(r.type))
              : r.type.endsWith("*")
              ? (t = r.type.slice(0, -1))
              : n.push(this.scanArgument(r.type)),
              (i += 1);
          }
          return [t, n];
        }
        scanSymbolOrLiteral() {
          let e,
            t = this.peek();
          if (!t) return null;
          if ((this.next(), Xs(t))) {
            let e = Ya.createAtom(this.parseMode, t, d({}, this.style));
            return e ? [e] : null;
          }
          if (((e = this.scanMacro(t)), e)) return [e];
          if (t.startsWith("\\")) {
            let n = ne(t, this.parseMode);
            if (!n)
              return (
                this.onError({ code: "unknown-command", arg: t }), [new Rs(t)]
              );
            if ("symbol" === n.definitionType) {
              let i = d({}, this.style);
              n.variant && (i.variant = n.variant),
                (e = new Eo({
                  type: n.type,
                  command: t,
                  style: i,
                  value: String.fromCodePoint(n.codepoint),
                  mode: this.parseMode,
                  verbatimLatex: t,
                }));
            } else {
              if (n.applyMode || n.applyStyle || n.infix)
                return (
                  this.onError({ code: "invalid-command", arg: t }), [new Rs(t)]
                );
              n.createAtom &&
                (e = n.createAtom({
                  command: t,
                  args: [],
                  style: this.style,
                  mode: this.parseMode,
                }));
            }
          }
          return e ? [e] : null;
        }
        scanArgument(e) {
          var t;
          this.skipFiller();
          let n = this.parseMode;
          if (("auto" === e && (e = n), !this.match("<{>"))) {
            if ("string" === e) return this.scanString();
            if ("value" === e) return this.scanValue();
            if ("delim" === e) return null != (t = this.scanDelim()) ? t : ".";
            if ("expression" === e) return this.scanExpression();
            if ("math" === e) {
              e !== n && this.beginContext({ mode: "math" });
              let t = this.scanSymbolOrLiteral();
              return e !== n && this.endContext(), t;
            }
            if ("text" === e) {
              e !== n && this.beginContext({ mode: "text" });
              let t = this.scanSymbolOrLiteral();
              return e !== n && this.endContext(), t;
            }
            return null;
          }
          if ("text" === e) {
            this.beginContext({ mode: "text" });
            do {
              this.mathlist.push(...this.scan());
            } while (!this.match("<}>") && !this.end());
            let e = this.mathlist;
            return this.endContext(), { group: e };
          }
          if ("math" === e) {
            this.beginContext({ mode: "math" });
            do {
              this.mathlist.push(...this.scan());
            } while (!this.match("<}>") && !this.end());
            let e = this.mathlist;
            return this.endContext(), { group: e };
          }
          let i = null;
          if ("expression" === e) {
            this.beginContext({ mode: "math" });
            do {
              this.mathlist.push(...this.scan());
            } while (!this.match("<}>") && !this.end());
            let e = this.mathlist;
            return this.endContext(), { group: e };
          }
          return (
            "string" === e
              ? (i = this.scanString())
              : "balanced-string" === e
              ? (i = this.scanBalancedString())
              : "colspec" === e
              ? (i = this.scanColspec())
              : "value" === e && (i = this.scanValue()),
            this.skipUntilToken("<}>"),
            i
          );
        }
        scanOptionalArgument(e) {
          if (
            ((e = "auto" === e ? this.parseMode : e),
            this.skipFiller(),
            !this.match("["))
          )
            return null;
          let t = null;
          for (; !this.end() && !this.match("]"); )
            if ("string" === e) t = this.scanString();
            else if ("value" === e) t = this.scanValue();
            else if ("colspec" === e) t = this.scanColspec();
            else if ("bbox" === e) {
              let e = {},
                n = this.scanString()
                  .toLowerCase()
                  .trim()
                  .split(/,(?![^(]*\)(?:(?:[^(]*\)){2})*[^"]*$)/);
              for (let t of n) {
                let n = t.match(/^\s*([\d.]+)\s*([a-z]{2})/);
                if (n) e.padding = { dimension: parseInt(n[1]), unit: n[2] };
                else {
                  let n = t.match(/^\s*border\s*:\s*(.*)/);
                  n ? (e.border = n[1]) : (e.backgroundcolor = { string: t });
                }
              }
              t = e;
            } else
              "math" === e &&
                (this.beginContext({ mode: "math" }),
                (t = this.mathlist.concat(this.scan((e) => "]" === e))),
                this.endContext());
          return t;
        }
        scanSymbolOrCommand(e) {
          var t, n;
          if ("\\placeholder" === e) {
            let e,
              t = this.scanOptionalArgument("string"),
              n = this.scanOptionalArgument("math"),
              i = Eo.serialize(n, { defaultMode: "math" }),
              r = [];
            e || "correct" !== i
              ? e || "incorrect" !== i
                ? "" !== i && (r = n)
                : (e = "incorrect")
              : (e = "correct");
            let a,
              o = "locked" === this.scanOptionalArgument("string"),
              s = this.scanArgument("auto");
            return (
              (a =
                s && Array.isArray(s) && s.length > 0
                  ? s
                  : s && "object" == typeof s && "group" in s
                  ? s.group
                  : r),
              t
                ? [
                    new Us(t, e, o, null != a ? a : r, {
                      mode: this.parseMode,
                      style: this.style,
                    }),
                  ]
                : [new As({ mode: this.parseMode, style: this.style })]
            );
          }
          let i = this.scanMacro(e);
          if (i) return [i];
          let r = ne(e, this.parseMode);
          if (!r)
            return (
              this.onError({ code: "unknown-command", arg: e }),
              "text" === this.parseMode
                ? [...e].map(
                    (e) =>
                      new Eo({
                        type: "text",
                        value: e,
                        mode: "text",
                        style: this.style,
                      })
                  )
                : [new Rs(e)]
            );
          let a = this.index;
          if ("symbol" === r.definitionType) {
            let t = d({}, this.style);
            r.variant && (t.variant = r.variant),
              (i = new Eo({
                type: r.type,
                command: e,
                style: t,
                value: String.fromCodePoint(r.codepoint),
                mode: this.parseMode,
              }));
          } else {
            if (r.ifMode && !r.ifMode.includes(this.parseMode)) return [];
            let a = this.parseMode;
            r.applyMode && (this.parseMode = r.applyMode);
            let [o, s] = this.scanArguments(r);
            if (
              ((this.parseMode = a),
              r.applyMode && !r.applyStyle && !r.createAtom)
            )
              return T(s[0]);
            if (r.infix)
              return (
                this.onError({ code: "too-many-infix-commands", arg: e }), null
              );
            if ("function" == typeof r.createAtom)
              (i = r.createAtom({
                command: e,
                args: s,
                style: this.style,
                mode: this.parseMode,
              })),
                o && (i.body = T(this.scanArgument(o)));
            else if ("function" == typeof r.applyStyle) {
              let t = d(d({}, this.style), r.applyStyle(e, s, this.context)),
                n = this.parseMode;
              if ((r.applyMode && (this.parseMode = r.applyMode), o)) {
                let e = this.style;
                this.style = t;
                let i = this.scanArgument(o);
                return (this.style = e), (this.parseMode = n), T(i);
              }
              this.style = t;
            } else
              i = new Eo({
                type: "mord",
                command: null != (t = r.command) ? t : e,
                style: d({}, this.style),
                value: e,
                mode: null != (n = r.applyMode) ? n : this.parseMode,
              });
          }
          if (!i) return null;
          if (
            i instanceof Eo &&
            void 0 === i.verbatimLatex &&
            !/^\\(llap|rlap|class|cssId|htmlData)$/.test(e)
          ) {
            let t = Ja([e, Ga(this.tokens.slice(a, this.index))]);
            t && (i.verbatimLatex = t);
          }
          if (
            (null === i.verbatimLatex && (i.verbatimLatex = void 0),
            i.isFunction && this.smartFence)
          ) {
            let e = this.scanSmartFence();
            if (e) return [i, e];
          }
          return [i];
        }
        scanSymbolCommandOrLiteral() {
          let e = this.get();
          if (!e) return null;
          if (Xs(e)) {
            let t = Ya.createAtom(this.parseMode, e, d({}, this.style));
            if (!t) return null;
            if (t.isFunction && this.smartFence) {
              let e = this.scanSmartFence();
              if (e) return [t, e];
            }
            return [t];
          }
          return e.startsWith("\\")
            ? this.scanSymbolOrCommand(e)
            : "<space>" === e
            ? "text" === this.parseMode
              ? [new To(" ", " ", this.style)]
              : null
            : ("<}>" === e
                ? this.onError({ latex: "", code: "unbalanced-braces" })
                : this.onError({ latex: "", code: "unexpected-token", arg: e }),
              null);
        }
        scanMacro(e) {
          var t;
          let n = this.context.getMacro(e);
          if (!n) return null;
          let i = this.index,
            r = n.args,
            a = { "?": null == (t = this.args) ? void 0 : t.call(this, "?") };
          for (let o = 1; o <= r; o++) a[o] = this.scanLiteralGroup();
          return new Hs(e, {
            expand: n.expand,
            captureSelection: n.captureSelection,
            args:
              i === this.index ? null : Ga(this.tokens.slice(i, this.index)),
            style: this.parsingContext.style,
            body: Zs(n.def, {
              context: this.context,
              parseMode: this.parseMode,
              args: (e) => a[e],
              mathstyle: this.parsingContext.mathstyle,
              style: this.parsingContext.style,
            }),
          });
        }
        parseExpression() {
          var e, t, n, i;
          let r =
            null !=
            (i =
              null !=
              (n =
                null !=
                (t =
                  null != (e = this.scanEnvironment())
                    ? e
                    : this.scanModeShift())
                  ? t
                  : this.scanModeSet())
                ? n
                : this.scanGroup())
              ? i
              : this.scanLeftRight();
          if (null === r) {
            if (this.parseSupSub() || this.parseLimits()) return !0;
            r = this.scanSymbolCommandOrLiteral();
          }
          return (
            !!r &&
            (Array.isArray(r)
              ? this.mathlist.push(...r)
              : this.mathlist.push(r),
            !0)
          );
        }
      };
      function Zs(e, t) {
        var n, i, r, a;
        let o = null != (n = null == t ? void 0 : t.args) ? n : void 0,
          s = new Gs(Ua(e, o), null == t ? void 0 : t.context, {
            args: o,
            mathstyle:
              null != (i = null == t ? void 0 : t.mathstyle)
                ? i
                : "displaystyle",
            parseMode:
              null != (r = null == t ? void 0 : t.parseMode) ? r : "math",
            style: null != (a = null == t ? void 0 : t.style) ? a : {},
          }),
          l = [];
        for (; !s.end(); ) l.push(...s.scan(() => !1));
        return l;
      }
      function Ys(e, t) {
        var n;
        let i = new Gs(Ua(e, null), null == t ? void 0 : t.context, {
          mathstyle: "displaystyle",
          parseMode:
            null != (n = null == t ? void 0 : t.parseMode) ? n : "math",
        });
        for (; !i.end(); ) i.scan();
        return i.errors;
      }
      var Qs = class e extends Eo {
        constructor(e, t) {
          super({ type: "chem" }, { command: e, mode: "math" });
          let n = tl.go(el.go(t, "\\pu" === e ? "pu" : "ce"), !1);
          (this.body = Zs(n)),
            (this.verbatimLatex = e + "{" + t + "}"),
            (this.arg = t),
            (this.captureSelection = !0);
        }
        static fromJson(t) {
          return new e(t.command, t.arg);
        }
        toJson() {
          return u(d({}, super.toJson()), { arg: this.arg });
        }
        render(e) {
          let t = Eo.createBox(e, this.body, { type: "inner" });
          return this.caret && (t.caret = this.caret), this.bind(e, t);
        }
        _serialize(e) {
          return this.verbatimLatex;
        }
      };
      Y(["ce", "pu"], "{chemformula:balanced-string}", {
        createAtom: (e) => {
          var t;
          return new Qs(e.command, null != (t = e.args[0]) ? t : "");
        },
      });
      var el = {
        go: function (e, t) {
          if (!e) return [];
          void 0 === t && (t = "ce");
          var n = "0",
            i = { parenthesisLevel: 0 };
          e = (e = (e = e.replace(/\n/g, " ")).replace(
            /[\u2212\u2013\u2014\u2010]/g,
            "-"
          )).replace(/[\u2026]/g, "...");
          for (var r, a = 10, o = []; ; ) {
            r !== e ? ((a = 10), (r = e)) : a--;
            var s = el.stateMachines[t],
              l = s.transitions[n] || s.transitions["*"];
            e: for (var c = 0; c < l.length; c++) {
              var d = el.patterns.match_(l[c].pattern, e);
              if (d) {
                for (var u = l[c].task, h = 0; h < u.action_.length; h++) {
                  var p;
                  if (s.actions[u.action_[h].type_])
                    p = s.actions[u.action_[h].type_](
                      i,
                      d.match_,
                      u.action_[h].option
                    );
                  else {
                    if (!el.actions[u.action_[h].type_])
                      throw [
                        "MhchemBugA",
                        "mhchem bug A. Please report. (" +
                          u.action_[h].type_ +
                          ")",
                      ];
                    p = el.actions[u.action_[h].type_](
                      i,
                      d.match_,
                      u.action_[h].option
                    );
                  }
                  el.concatArray(o, p);
                }
                if (((n = u.nextState || n), !(e.length > 0))) return o;
                if ((u.revisit || (e = d.remainder), !u.toContinue)) break e;
              }
            }
            if (a <= 0) throw ["MhchemBugU", "mhchem bug U. Please report."];
          }
        },
        concatArray: function (e, t) {
          if (t)
            if ("[object Array]" === Object.prototype.toString.call(t))
              for (var n = 0; n < t.length; n++) e.push(t[n]);
            else e.push(t);
        },
        patterns: {
          patterns: {
            empty: /^$/,
            else: /^./,
            else2: /^./,
            space: /^\s/,
            "space A": /^\s(?=[A-Z\\$])/,
            space$: /^\s$/,
            "a-z": /^[a-z]/,
            x: /^x/,
            x$: /^x$/,
            i$: /^i$/,
            letters:
              /^(?:[a-zA-Z\u03B1-\u03C9\u0391-\u03A9?@]|(?:\\(?:alpha|beta|gamma|delta|epsilon|zeta|eta|theta|iota|kappa|lambda|mu|nu|xi|omicron|pi|rho|sigma|tau|upsilon|phi|chi|psi|omega|Gamma|Delta|Theta|Lambda|Xi|Pi|Sigma|Upsilon|Phi|Psi|Omega)(?:\s+|\{\}|(?![a-zA-Z]))))+/,
            "\\greek":
              /^\\(?:alpha|beta|gamma|delta|epsilon|zeta|eta|theta|iota|kappa|lambda|mu|nu|xi|omicron|pi|rho|sigma|tau|upsilon|phi|chi|psi|omega|Gamma|Delta|Theta|Lambda|Xi|Pi|Sigma|Upsilon|Phi|Psi|Omega)(?:\s+|\{\}|(?![a-zA-Z]))/,
            "one lowercase latin letter $": /^(?:([a-z])(?:$|[^a-zA-Z]))$/,
            "$one lowercase latin letter$ $":
              /^\$(?:([a-z])(?:$|[^a-zA-Z]))\$$/,
            "one lowercase greek letter $":
              /^(?:\$?[\u03B1-\u03C9]\$?|\$?\\(?:alpha|beta|gamma|delta|epsilon|zeta|eta|theta|iota|kappa|lambda|mu|nu|xi|omicron|pi|rho|sigma|tau|upsilon|phi|chi|psi|omega)\s*\$?)(?:\s+|\{\}|(?![a-zA-Z]))$/,
            digits: /^[0-9]+/,
            "-9.,9": /^[+\-]?(?:[0-9]+(?:[,.][0-9]+)?|[0-9]*(?:\.[0-9]+))/,
            "-9.,9 no missing 0": /^[+\-]?[0-9]+(?:[.,][0-9]+)?/,
            "(-)(9.,9)(e)(99)": function (e) {
              var t = e.match(
                /^(\+\-|\+\/\-|\+|\-|\\pm\s?)?([0-9]+(?:[,.][0-9]+)?|[0-9]*(?:\.[0-9]+))?(\((?:[0-9]+(?:[,.][0-9]+)?|[0-9]*(?:\.[0-9]+))\))?(?:(?:([eE])|\s*(\*|x|\\times|\u00D7)\s*10\^)([+\-]?[0-9]+|\{[+\-]?[0-9]+\}))?/
              );
              return t && t[0]
                ? { match_: t.slice(1), remainder: e.substr(t[0].length) }
                : null;
            },
            "(-)(9)^(-9)": function (e) {
              var t = e.match(
                /^(\+\-|\+\/\-|\+|\-|\\pm\s?)?([0-9]+(?:[,.][0-9]+)?|[0-9]*(?:\.[0-9]+)?)\^([+\-]?[0-9]+|\{[+\-]?[0-9]+\})/
              );
              return t && t[0]
                ? { match_: t.slice(1), remainder: e.substr(t[0].length) }
                : null;
            },
            "state of aggregation $": function (e) {
              var t = el.patterns.findObserveGroups(
                e,
                "",
                /^\([a-z]{1,3}(?=[\),])/,
                ")",
                ""
              );
              if (t && t.remainder.match(/^($|[\s,;\)\]\}])/)) return t;
              var n = e.match(/^(?:\((?:\\ca\s?)?\$[amothc]\$\))/);
              return n
                ? { match_: n[0], remainder: e.substr(n[0].length) }
                : null;
            },
            "_{(state of aggregation)}$": /^_\{(\([a-z]{1,3}\))\}/,
            "{[(": /^(?:\\\{|\[|\()/,
            ")]}": /^(?:\)|\]|\\\})/,
            ", ": /^[,;]\s*/,
            ",": /^[,;]/,
            ".": /^[.]/,
            ". ": /^([.\u22C5\u00B7\u2022])\s*/,
            "...": /^\.\.\.(?=$|[^.])/,
            "* ": /^([*])\s*/,
            "^{(...)}": function (e) {
              return el.patterns.findObserveGroups(e, "^{", "", "", "}");
            },
            "^($...$)": function (e) {
              return el.patterns.findObserveGroups(e, "^", "$", "$", "");
            },
            "^a": /^\^([0-9]+|[^\\_])/,
            "^\\x{}{}": function (e) {
              return el.patterns.findObserveGroups(
                e,
                "^",
                /^\\[a-zA-Z]+\{/,
                "}",
                "",
                "",
                "{",
                "}",
                "",
                !0
              );
            },
            "^\\x{}": function (e) {
              return el.patterns.findObserveGroups(
                e,
                "^",
                /^\\[a-zA-Z]+\{/,
                "}",
                ""
              );
            },
            "^\\x": /^\^(\\[a-zA-Z]+)\s*/,
            "^(-1)": /^\^(-?\d+)/,
            "'": /^'/,
            "_{(...)}": function (e) {
              return el.patterns.findObserveGroups(e, "_{", "", "", "}");
            },
            "_($...$)": function (e) {
              return el.patterns.findObserveGroups(e, "_", "$", "$", "");
            },
            _9: /^_([+\-]?[0-9]+|[^\\])/,
            "_\\x{}{}": function (e) {
              return el.patterns.findObserveGroups(
                e,
                "_",
                /^\\[a-zA-Z]+\{/,
                "}",
                "",
                "",
                "{",
                "}",
                "",
                !0
              );
            },
            "_\\x{}": function (e) {
              return el.patterns.findObserveGroups(
                e,
                "_",
                /^\\[a-zA-Z]+\{/,
                "}",
                ""
              );
            },
            "_\\x": /^_(\\[a-zA-Z]+)\s*/,
            "^_": /^(?:\^(?=_)|\_(?=\^)|[\^_]$)/,
            "{}": /^\{\}/,
            "{...}": function (e) {
              return el.patterns.findObserveGroups(e, "", "{", "}", "");
            },
            "{(...)}": function (e) {
              return el.patterns.findObserveGroups(e, "{", "", "", "}");
            },
            "$...$": function (e) {
              return el.patterns.findObserveGroups(e, "", "$", "$", "");
            },
            "${(...)}$": function (e) {
              return el.patterns.findObserveGroups(e, "${", "", "", "}$");
            },
            "$(...)$": function (e) {
              return el.patterns.findObserveGroups(e, "$", "", "", "$");
            },
            "=<>": /^[=<>]/,
            "#": /^[#\u2261]/,
            "+": /^\+/,
            "-$": /^-(?=[\s_},;\]/]|$|\([a-z]+\))/,
            "-9": /^-(?=[0-9])/,
            "- orbital overlap": /^-(?=(?:[spd]|sp)(?:$|[\s,;\)\]\}]))/,
            "-": /^-/,
            "pm-operator": /^(?:\\pm|\$\\pm\$|\+-|\+\/-)/,
            operator:
              /^(?:\+|(?:[\-=<>]|<<|>>|\\approx|\$\\approx\$)(?=\s|$|-?[0-9]))/,
            arrowUpDown: /^(?:v|\(v\)|\^|\(\^\))(?=$|[\s,;\)\]\}])/,
            "\\bond{(...)}": function (e) {
              return el.patterns.findObserveGroups(e, "\\bond{", "", "", "}");
            },
            "->": /^(?:<->|<-->|->|<-|<=>>|<<=>|<=>|[\u2192\u27F6\u21CC])/,
            CMT: /^[CMT](?=\[)/,
            "[(...)]": function (e) {
              return el.patterns.findObserveGroups(e, "[", "", "", "]");
            },
            "1st-level escape": /^(&|\\\\|\\hline)\s*/,
            "\\,": /^(?:\\[,\ ;:])/,
            "\\x{}{}": function (e) {
              return el.patterns.findObserveGroups(
                e,
                "",
                /^\\[a-zA-Z]+\{/,
                "}",
                "",
                "",
                "{",
                "}",
                "",
                !0
              );
            },
            "\\x{}": function (e) {
              return el.patterns.findObserveGroups(
                e,
                "",
                /^\\[a-zA-Z]+\{/,
                "}",
                ""
              );
            },
            "\\ca": /^\\ca(?:\s+|(?![a-zA-Z]))/,
            "\\x": /^(?:\\[a-zA-Z]+\s*|\\[_&{}%])/,
            orbital: /^(?:[0-9]{1,2}[spdfgh]|[0-9]{0,2}sp)(?=$|[^a-zA-Z])/,
            others: /^[\/~|]/,
            "\\frac{(...)}": function (e) {
              return el.patterns.findObserveGroups(
                e,
                "\\frac{",
                "",
                "",
                "}",
                "{",
                "",
                "",
                "}"
              );
            },
            "\\overset{(...)}": function (e) {
              return el.patterns.findObserveGroups(
                e,
                "\\overset{",
                "",
                "",
                "}",
                "{",
                "",
                "",
                "}"
              );
            },
            "\\underset{(...)}": function (e) {
              return el.patterns.findObserveGroups(
                e,
                "\\underset{",
                "",
                "",
                "}",
                "{",
                "",
                "",
                "}"
              );
            },
            "\\underbrace{(...)}": function (e) {
              return el.patterns.findObserveGroups(
                e,
                "\\underbrace{",
                "",
                "",
                "}_",
                "{",
                "",
                "",
                "}"
              );
            },
            "\\color{(...)}0": function (e) {
              return el.patterns.findObserveGroups(e, "\\color{", "", "", "}");
            },
            "\\color{(...)}{(...)}1": function (e) {
              return el.patterns.findObserveGroups(
                e,
                "\\color{",
                "",
                "",
                "}",
                "{",
                "",
                "",
                "}"
              );
            },
            "\\color(...){(...)}2": function (e) {
              return el.patterns.findObserveGroups(
                e,
                "\\color",
                "\\",
                "",
                /^(?=\{)/,
                "{",
                "",
                "",
                "}"
              );
            },
            "\\ce{(...)}": function (e) {
              return el.patterns.findObserveGroups(e, "\\ce{", "", "", "}");
            },
            oxidation$: /^(?:[+-][IVX]+|\\pm\s*0|\$\\pm\$\s*0)$/,
            "d-oxidation$": /^(?:[+-]?\s?[IVX]+|\\pm\s*0|\$\\pm\$\s*0)$/,
            "roman numeral": /^[IVX]+/,
            "1/2$":
              /^[+\-]?(?:[0-9]+|\$[a-z]\$|[a-z])\/[0-9]+(?:\$[a-z]\$|[a-z])?$/,
            amount: function (e) {
              var t;
              if (
                (t = e.match(
                  /^(?:(?:(?:\([+\-]?[0-9]+\/[0-9]+\)|[+\-]?(?:[0-9]+|\$[a-z]\$|[a-z])\/[0-9]+|[+\-]?[0-9]+[.,][0-9]+|[+\-]?\.[0-9]+|[+\-]?[0-9]+)(?:[a-z](?=\s*[A-Z]))?)|[+\-]?[a-z](?=\s*[A-Z])|\+(?!\s))/
                ))
              )
                return { match_: t[0], remainder: e.substr(t[0].length) };
              var n = el.patterns.findObserveGroups(e, "", "$", "$", "");
              return n &&
                (t = n.match_.match(
                  /^\$(?:\(?[+\-]?(?:[0-9]*[a-z]?[+\-])?[0-9]*[a-z](?:[+\-][0-9]*[a-z]?)?\)?|\+|-)\$$/
                ))
                ? { match_: t[0], remainder: e.substr(t[0].length) }
                : null;
            },
            amount2: function (e) {
              return this.amount(e);
            },
            "(KV letters),": /^(?:[A-Z][a-z]{0,2}|i)(?=,)/,
            formula$: function (e) {
              if (e.match(/^\([a-z]+\)$/)) return null;
              var t = e.match(
                /^(?:[a-z]|(?:[0-9\ \+\-\,\.\(\)]+[a-z])+[0-9\ \+\-\,\.\(\)]*|(?:[a-z][0-9\ \+\-\,\.\(\)]+)+[a-z]?)$/
              );
              return t
                ? { match_: t[0], remainder: e.substr(t[0].length) }
                : null;
            },
            uprightEntities: /^(?:pH|pOH|pC|pK|iPr|iBu)(?=$|[^a-zA-Z])/,
            "/": /^\s*(\/)\s*/,
            "//": /^\s*(\/\/)\s*/,
            "*": /^\s*[*.]\s*/,
          },
          findObserveGroups: function (e, t, n, i, r, a, o, s, l, c) {
            var d = function (e, t) {
                if ("string" == typeof t) return 0 !== e.indexOf(t) ? null : t;
                var n = e.match(t);
                return n ? n[0] : null;
              },
              u = d(e, t);
            if (
              null === u ||
              ((e = e.substr(u.length)), null === (u = d(e, n)))
            )
              return null;
            var h = (function (e, t, n) {
              for (var i = 0; t < e.length; ) {
                var r = e.charAt(t),
                  a = d(e.substr(t), n);
                if (null !== a && 0 === i)
                  return { endMatchBegin: t, endMatchEnd: t + a.length };
                if ("{" === r) i++;
                else if ("}" === r) {
                  if (0 === i)
                    throw [
                      "ExtraCloseMissingOpen",
                      "Extra close brace or missing open brace",
                    ];
                  i--;
                }
                t++;
              }
              return null;
            })(e, u.length, i || r);
            if (null === h) return null;
            var p = e.substring(0, i ? h.endMatchEnd : h.endMatchBegin);
            if (a || o) {
              var m = this.findObserveGroups(
                e.substr(h.endMatchEnd),
                a,
                o,
                s,
                l
              );
              if (null === m) return null;
              var f = [p, m.match_];
              return { match_: c ? f.join("") : f, remainder: m.remainder };
            }
            return { match_: p, remainder: e.substr(h.endMatchEnd) };
          },
          match_: function (e, t) {
            var n = el.patterns.patterns[e];
            if (void 0 === n)
              throw ["MhchemBugP", "mhchem bug P. Please report. (" + e + ")"];
            if ("function" == typeof n) return el.patterns.patterns[e](t);
            var i = t.match(n);
            return i
              ? {
                  match_: i[2] ? [i[1], i[2]] : i[1] ? i[1] : i[0],
                  remainder: t.substr(i[0].length),
                }
              : null;
          },
        },
        actions: {
          "a=": function (e, t) {
            e.a = (e.a || "") + t;
          },
          "b=": function (e, t) {
            e.b = (e.b || "") + t;
          },
          "p=": function (e, t) {
            e.p = (e.p || "") + t;
          },
          "o=": function (e, t) {
            e.o = (e.o || "") + t;
          },
          "q=": function (e, t) {
            e.q = (e.q || "") + t;
          },
          "d=": function (e, t) {
            e.d = (e.d || "") + t;
          },
          "rm=": function (e, t) {
            e.rm = (e.rm || "") + t;
          },
          "text=": function (e, t) {
            e.text_ = (e.text_ || "") + t;
          },
          insert: function (e, t, n) {
            return { type_: n };
          },
          "insert+p1": function (e, t, n) {
            return { type_: n, p1: t };
          },
          "insert+p1+p2": function (e, t, n) {
            return { type_: n, p1: t[0], p2: t[1] };
          },
          copy: function (e, t) {
            return t;
          },
          rm: function (e, t) {
            return { type_: "rm", p1: t || "" };
          },
          text: function (e, t) {
            return el.go(t, "text");
          },
          "{text}": function (e, t) {
            var n = ["{"];
            return el.concatArray(n, el.go(t, "text")), n.push("}"), n;
          },
          "tex-math": function (e, t) {
            return el.go(t, "tex-math");
          },
          "tex-math tight": function (e, t) {
            return el.go(t, "tex-math tight");
          },
          bond: function (e, t, n) {
            return { type_: "bond", kind_: n || t };
          },
          "color0-output": function (e, t) {
            return { type_: "color0", color: t[0] };
          },
          ce: function (e, t) {
            return el.go(t);
          },
          "1/2": function (e, t) {
            var n = [];
            t.match(/^[+\-]/) && (n.push(t.substr(0, 1)), (t = t.substr(1)));
            var i = t.match(
              /^([0-9]+|\$[a-z]\$|[a-z])\/([0-9]+)(\$[a-z]\$|[a-z])?$/
            );
            return (
              (i[1] = i[1].replace(/\$/g, "")),
              n.push({ type_: "frac", p1: i[1], p2: i[2] }),
              i[3] &&
                ((i[3] = i[3].replace(/\$/g, "")),
                n.push({ type_: "tex-math", p1: i[3] })),
              n
            );
          },
          "9,9": function (e, t) {
            return el.go(t, "9,9");
          },
        },
        createTransitions: function (e) {
          var t,
            n,
            i,
            r,
            a = {};
          for (t in e)
            for (n in e[t])
              for (
                i = n.split("|"), e[t][n].stateArray = i, r = 0;
                r < i.length;
                r++
              )
                a[i[r]] = [];
          for (t in e)
            for (n in e[t])
              for (i = e[t][n].stateArray || [], r = 0; r < i.length; r++) {
                var o = e[t][n];
                if (o.action_) {
                  o.action_ = [].concat(o.action_);
                  for (var s = 0; s < o.action_.length; s++)
                    "string" == typeof o.action_[s] &&
                      (o.action_[s] = { type_: o.action_[s] });
                } else o.action_ = [];
                for (var l = t.split("|"), c = 0; c < l.length; c++)
                  if ("*" === i[r])
                    for (var d in a) a[d].push({ pattern: l[c], task: o });
                  else a[i[r]].push({ pattern: l[c], task: o });
              }
          return a;
        },
        stateMachines: {},
      };
      el.stateMachines = {
        ce: {
          transitions: el.createTransitions({
            empty: { "*": { action_: "output" } },
            else: {
              "0|1|2": {
                action_: "beginsWithBond=false",
                revisit: !0,
                toContinue: !0,
              },
            },
            oxidation$: { 0: { action_: "oxidation-output" } },
            CMT: {
              r: { action_: "rdt=", nextState: "rt" },
              rd: { action_: "rqt=", nextState: "rdt" },
            },
            arrowUpDown: {
              "0|1|2|as": {
                action_: ["sb=false", "output", "operator"],
                nextState: "1",
              },
            },
            uprightEntities: {
              "0|1|2": { action_: ["o=", "output"], nextState: "1" },
            },
            orbital: { "0|1|2|3": { action_: "o=", nextState: "o" } },
            "->": {
              "0|1|2|3": { action_: "r=", nextState: "r" },
              "a|as": { action_: ["output", "r="], nextState: "r" },
              "*": { action_: ["output", "r="], nextState: "r" },
            },
            "+": {
              o: { action_: "d= kv", nextState: "d" },
              "d|D": { action_: "d=", nextState: "d" },
              q: { action_: "d=", nextState: "qd" },
              "qd|qD": { action_: "d=", nextState: "qd" },
              dq: { action_: ["output", "d="], nextState: "d" },
              3: {
                action_: ["sb=false", "output", "operator"],
                nextState: "0",
              },
            },
            amount: { "0|2": { action_: "a=", nextState: "a" } },
            "pm-operator": {
              "0|1|2|a|as": {
                action_: [
                  "sb=false",
                  "output",
                  { type_: "operator", option: "\\pm" },
                ],
                nextState: "0",
              },
            },
            operator: {
              "0|1|2|a|as": {
                action_: ["sb=false", "output", "operator"],
                nextState: "0",
              },
            },
            "-$": {
              "o|q": { action_: ["charge or bond", "output"], nextState: "qd" },
              d: { action_: "d=", nextState: "d" },
              D: {
                action_: ["output", { type_: "bond", option: "-" }],
                nextState: "3",
              },
              q: { action_: "d=", nextState: "qd" },
              qd: { action_: "d=", nextState: "qd" },
              "qD|dq": {
                action_: ["output", { type_: "bond", option: "-" }],
                nextState: "3",
              },
            },
            "-9": {
              "3|o": {
                action_: ["output", { type_: "insert", option: "hyphen" }],
                nextState: "3",
              },
            },
            "- orbital overlap": {
              o: {
                action_: ["output", { type_: "insert", option: "hyphen" }],
                nextState: "2",
              },
              d: {
                action_: ["output", { type_: "insert", option: "hyphen" }],
                nextState: "2",
              },
            },
            "-": {
              "0|1|2": {
                action_: [
                  { type_: "output", option: 1 },
                  "beginsWithBond=true",
                  { type_: "bond", option: "-" },
                ],
                nextState: "3",
              },
              3: { action_: { type_: "bond", option: "-" } },
              a: {
                action_: ["output", { type_: "insert", option: "hyphen" }],
                nextState: "2",
              },
              as: {
                action_: [
                  { type_: "output", option: 2 },
                  { type_: "bond", option: "-" },
                ],
                nextState: "3",
              },
              b: { action_: "b=" },
              o: {
                action_: { type_: "- after o/d", option: !1 },
                nextState: "2",
              },
              q: {
                action_: { type_: "- after o/d", option: !1 },
                nextState: "2",
              },
              "d|qd|dq": {
                action_: { type_: "- after o/d", option: !0 },
                nextState: "2",
              },
              "D|qD|p": {
                action_: ["output", { type_: "bond", option: "-" }],
                nextState: "3",
              },
            },
            amount2: { "1|3": { action_: "a=", nextState: "a" } },
            letters: {
              "0|1|2|3|a|as|b|p|bp|o": { action_: "o=", nextState: "o" },
              "q|dq": { action_: ["output", "o="], nextState: "o" },
              "d|D|qd|qD": { action_: "o after d", nextState: "o" },
            },
            digits: {
              o: { action_: "q=", nextState: "q" },
              "d|D": { action_: "q=", nextState: "dq" },
              q: { action_: ["output", "o="], nextState: "o" },
              a: { action_: "o=", nextState: "o" },
            },
            "space A": { "b|p|bp": {} },
            space: {
              a: { nextState: "as" },
              0: { action_: "sb=false" },
              "1|2": { action_: "sb=true" },
              "r|rt|rd|rdt|rdq": { action_: "output", nextState: "0" },
              "*": { action_: ["output", "sb=true"], nextState: "1" },
            },
            "1st-level escape": {
              "1|2": {
                action_: [
                  "output",
                  { type_: "insert+p1", option: "1st-level escape" },
                ],
              },
              "*": {
                action_: [
                  "output",
                  { type_: "insert+p1", option: "1st-level escape" },
                ],
                nextState: "0",
              },
            },
            "[(...)]": {
              "r|rt": { action_: "rd=", nextState: "rd" },
              "rd|rdt": { action_: "rq=", nextState: "rdq" },
            },
            "...": {
              "o|d|D|dq|qd|qD": {
                action_: ["output", { type_: "bond", option: "..." }],
                nextState: "3",
              },
              "*": {
                action_: [
                  { type_: "output", option: 1 },
                  { type_: "insert", option: "ellipsis" },
                ],
                nextState: "1",
              },
            },
            ". |* ": {
              "*": {
                action_: [
                  "output",
                  { type_: "insert", option: "addition compound" },
                ],
                nextState: "1",
              },
            },
            "state of aggregation $": {
              "*": {
                action_: ["output", "state of aggregation"],
                nextState: "1",
              },
            },
            "{[(": {
              "a|as|o": {
                action_: ["o=", "output", "parenthesisLevel++"],
                nextState: "2",
              },
              "0|1|2|3": {
                action_: ["o=", "output", "parenthesisLevel++"],
                nextState: "2",
              },
              "*": {
                action_: ["output", "o=", "output", "parenthesisLevel++"],
                nextState: "2",
              },
            },
            ")]}": {
              "0|1|2|3|b|p|bp|o": {
                action_: ["o=", "parenthesisLevel--"],
                nextState: "o",
              },
              "a|as|d|D|q|qd|qD|dq": {
                action_: ["output", "o=", "parenthesisLevel--"],
                nextState: "o",
              },
            },
            ", ": { "*": { action_: ["output", "comma"], nextState: "0" } },
            "^_": { "*": {} },
            "^{(...)}|^($...$)": {
              "0|1|2|as": { action_: "b=", nextState: "b" },
              p: { action_: "b=", nextState: "bp" },
              "3|o": { action_: "d= kv", nextState: "D" },
              q: { action_: "d=", nextState: "qD" },
              "d|D|qd|qD|dq": { action_: ["output", "d="], nextState: "D" },
            },
            "^a|^\\x{}{}|^\\x{}|^\\x|'": {
              "0|1|2|as": { action_: "b=", nextState: "b" },
              p: { action_: "b=", nextState: "bp" },
              "3|o": { action_: "d= kv", nextState: "d" },
              q: { action_: "d=", nextState: "qd" },
              "d|qd|D|qD": { action_: "d=" },
              dq: { action_: ["output", "d="], nextState: "d" },
            },
            "_{(state of aggregation)}$": {
              "d|D|q|qd|qD|dq": { action_: ["output", "q="], nextState: "q" },
            },
            "_{(...)}|_($...$)|_9|_\\x{}{}|_\\x{}|_\\x": {
              "0|1|2|as": { action_: "p=", nextState: "p" },
              b: { action_: "p=", nextState: "bp" },
              "3|o": { action_: "q=", nextState: "q" },
              "d|D": { action_: "q=", nextState: "dq" },
              "q|qd|qD|dq": { action_: ["output", "q="], nextState: "q" },
            },
            "=<>": {
              "0|1|2|3|a|as|o|q|d|D|qd|qD|dq": {
                action_: [{ type_: "output", option: 2 }, "bond"],
                nextState: "3",
              },
            },
            "#": {
              "0|1|2|3|a|as|o": {
                action_: [
                  { type_: "output", option: 2 },
                  { type_: "bond", option: "#" },
                ],
                nextState: "3",
              },
            },
            "{}": {
              "*": { action_: { type_: "output", option: 1 }, nextState: "1" },
            },
            "{...}": {
              "0|1|2|3|a|as|b|p|bp": { action_: "o=", nextState: "o" },
              "o|d|D|q|qd|qD|dq": { action_: ["output", "o="], nextState: "o" },
            },
            "$...$": {
              a: { action_: "a=" },
              "0|1|2|3|as|b|p|bp|o": { action_: "o=", nextState: "o" },
              "as|o": { action_: "o=" },
              "q|d|D|qd|qD|dq": { action_: ["output", "o="], nextState: "o" },
            },
            "\\bond{(...)}": {
              "*": {
                action_: [{ type_: "output", option: 2 }, "bond"],
                nextState: "3",
              },
            },
            "\\frac{(...)}": {
              "*": {
                action_: [{ type_: "output", option: 1 }, "frac-output"],
                nextState: "3",
              },
            },
            "\\overset{(...)}": {
              "*": {
                action_: [{ type_: "output", option: 2 }, "overset-output"],
                nextState: "3",
              },
            },
            "\\underset{(...)}": {
              "*": {
                action_: [{ type_: "output", option: 2 }, "underset-output"],
                nextState: "3",
              },
            },
            "\\underbrace{(...)}": {
              "*": {
                action_: [{ type_: "output", option: 2 }, "underbrace-output"],
                nextState: "3",
              },
            },
            "\\color{(...)}{(...)}1|\\color(...){(...)}2": {
              "*": {
                action_: [{ type_: "output", option: 2 }, "color-output"],
                nextState: "3",
              },
            },
            "\\color{(...)}0": {
              "*": {
                action_: [{ type_: "output", option: 2 }, "color0-output"],
              },
            },
            "\\ce{(...)}": {
              "*": {
                action_: [{ type_: "output", option: 2 }, "ce"],
                nextState: "3",
              },
            },
            "\\,": {
              "*": {
                action_: [{ type_: "output", option: 1 }, "copy"],
                nextState: "1",
              },
            },
            "\\x{}{}|\\x{}|\\x": {
              "0|1|2|3|a|as|b|p|bp|o|c0": {
                action_: ["o=", "output"],
                nextState: "3",
              },
              "*": { action_: ["output", "o=", "output"], nextState: "3" },
            },
            others: {
              "*": {
                action_: [{ type_: "output", option: 1 }, "copy"],
                nextState: "3",
              },
            },
            else2: {
              a: { action_: "a to o", nextState: "o", revisit: !0 },
              as: {
                action_: ["output", "sb=true"],
                nextState: "1",
                revisit: !0,
              },
              "r|rt|rd|rdt|rdq": {
                action_: ["output"],
                nextState: "0",
                revisit: !0,
              },
              "*": { action_: ["output", "copy"], nextState: "3" },
            },
          }),
          actions: {
            "o after d": function (e, t) {
              var n;
              if ((e.d || "").match(/^[0-9]+$/)) {
                var i = e.d;
                (e.d = void 0), (n = this.output(e)), (e.b = i);
              } else n = this.output(e);
              return el.actions["o="](e, t), n;
            },
            "d= kv": function (e, t) {
              (e.d = t), (e.dType = "kv");
            },
            "charge or bond": function (e, t) {
              if (e.beginsWithBond) {
                var n = [];
                return (
                  el.concatArray(n, this.output(e)),
                  el.concatArray(n, el.actions.bond(e, t, "-")),
                  n
                );
              }
              e.d = t;
            },
            "- after o/d": function (e, t, n) {
              var i = el.patterns.match_("orbital", e.o || ""),
                r = el.patterns.match_(
                  "one lowercase greek letter $",
                  e.o || ""
                ),
                a = el.patterns.match_(
                  "one lowercase latin letter $",
                  e.o || ""
                ),
                o = el.patterns.match_(
                  "$one lowercase latin letter$ $",
                  e.o || ""
                ),
                s = "-" === t && ((i && "" === i.remainder) || r || a || o);
              s &&
                !e.a &&
                !e.b &&
                !e.p &&
                !e.d &&
                !e.q &&
                !i &&
                a &&
                (e.o = "$" + e.o + "$");
              var l = [];
              return (
                s
                  ? (el.concatArray(l, this.output(e)),
                    l.push({ type_: "hyphen" }))
                  : ((i = el.patterns.match_("digits", e.d || "")),
                    n && i && "" === i.remainder
                      ? (el.concatArray(l, el.actions["d="](e, t)),
                        el.concatArray(l, this.output(e)))
                      : (el.concatArray(l, this.output(e)),
                        el.concatArray(l, el.actions.bond(e, t, "-")))),
                l
              );
            },
            "a to o": function (e) {
              (e.o = e.a), (e.a = void 0);
            },
            "sb=true": function (e) {
              e.sb = !0;
            },
            "sb=false": function (e) {
              e.sb = !1;
            },
            "beginsWithBond=true": function (e) {
              e.beginsWithBond = !0;
            },
            "beginsWithBond=false": function (e) {
              e.beginsWithBond = !1;
            },
            "parenthesisLevel++": function (e) {
              e.parenthesisLevel++;
            },
            "parenthesisLevel--": function (e) {
              e.parenthesisLevel--;
            },
            "state of aggregation": function (e, t) {
              return { type_: "state of aggregation", p1: el.go(t, "o") };
            },
            comma: function (e, t) {
              var n = t.replace(/\s*$/, "");
              return n !== t && 0 === e.parenthesisLevel
                ? { type_: "comma enumeration L", p1: n }
                : { type_: "comma enumeration M", p1: n };
            },
            output: function (e, t, n) {
              var i, r, a;
              e.r
                ? ((r =
                    "M" === e.rdt
                      ? el.go(e.rd, "tex-math")
                      : "T" === e.rdt
                      ? [{ type_: "text", p1: e.rd || "" }]
                      : el.go(e.rd)),
                  (a =
                    "M" === e.rqt
                      ? el.go(e.rq, "tex-math")
                      : "T" === e.rqt
                      ? [{ type_: "text", p1: e.rq || "" }]
                      : el.go(e.rq)),
                  (i = { type_: "arrow", r: e.r, rd: r, rq: a }))
                : ((i = []),
                  (!e.a && !e.b && !e.p && !e.o && !e.q && !e.d && !n) ||
                    (e.sb && i.push({ type_: "entitySkip" }),
                    e.o || e.q || e.d || e.b || e.p || 2 === n
                      ? e.o || e.q || e.d || (!e.b && !e.p)
                        ? e.o &&
                          "kv" === e.dType &&
                          el.patterns.match_("d-oxidation$", e.d || "")
                          ? (e.dType = "oxidation")
                          : e.o &&
                            "kv" === e.dType &&
                            !e.q &&
                            (e.dType = void 0)
                        : ((e.o = e.a),
                          (e.d = e.b),
                          (e.q = e.p),
                          (e.a = e.b = e.p = void 0))
                      : ((e.o = e.a), (e.a = void 0)),
                    i.push({
                      type_: "chemfive",
                      a: el.go(e.a, "a"),
                      b: el.go(e.b, "bd"),
                      p: el.go(e.p, "pq"),
                      o: el.go(e.o, "o"),
                      q: el.go(e.q, "pq"),
                      d: el.go(
                        e.d,
                        "oxidation" === e.dType ? "oxidation" : "bd"
                      ),
                      dType: e.dType,
                    })));
              for (var o in e)
                "parenthesisLevel" !== o &&
                  "beginsWithBond" !== o &&
                  delete e[o];
              return i;
            },
            "oxidation-output": function (e, t) {
              var n = ["{"];
              return el.concatArray(n, el.go(t, "oxidation")), n.push("}"), n;
            },
            "frac-output": function (e, t) {
              return { type_: "frac-ce", p1: el.go(t[0]), p2: el.go(t[1]) };
            },
            "overset-output": function (e, t) {
              return { type_: "overset", p1: el.go(t[0]), p2: el.go(t[1]) };
            },
            "underset-output": function (e, t) {
              return { type_: "underset", p1: el.go(t[0]), p2: el.go(t[1]) };
            },
            "underbrace-output": function (e, t) {
              return { type_: "underbrace", p1: el.go(t[0]), p2: el.go(t[1]) };
            },
            "color-output": function (e, t) {
              return { type_: "color", color1: t[0], color2: el.go(t[1]) };
            },
            "r=": function (e, t) {
              e.r = t;
            },
            "rdt=": function (e, t) {
              e.rdt = t;
            },
            "rd=": function (e, t) {
              e.rd = t;
            },
            "rqt=": function (e, t) {
              e.rqt = t;
            },
            "rq=": function (e, t) {
              e.rq = t;
            },
            operator: function (e, t, n) {
              return { type_: "operator", kind_: n || t };
            },
          },
        },
        a: {
          transitions: el.createTransitions({
            empty: { "*": {} },
            "1/2$": { 0: { action_: "1/2" } },
            else: { 0: { nextState: "1", revisit: !0 } },
            "$(...)$": { "*": { action_: "tex-math tight", nextState: "1" } },
            ",": {
              "*": { action_: { type_: "insert", option: "commaDecimal" } },
            },
            else2: { "*": { action_: "copy" } },
          }),
          actions: {},
        },
        o: {
          transitions: el.createTransitions({
            empty: { "*": {} },
            "1/2$": { 0: { action_: "1/2" } },
            else: { 0: { nextState: "1", revisit: !0 } },
            letters: { "*": { action_: "rm" } },
            "\\ca": { "*": { action_: { type_: "insert", option: "circa" } } },
            "\\x{}{}|\\x{}|\\x": { "*": { action_: "copy" } },
            "${(...)}$|$(...)$": { "*": { action_: "tex-math" } },
            "{(...)}": { "*": { action_: "{text}" } },
            else2: { "*": { action_: "copy" } },
          }),
          actions: {},
        },
        text: {
          transitions: el.createTransitions({
            empty: { "*": { action_: "output" } },
            "{...}": { "*": { action_: "text=" } },
            "${(...)}$|$(...)$": { "*": { action_: "tex-math" } },
            "\\greek": { "*": { action_: ["output", "rm"] } },
            "\\,|\\x{}{}|\\x{}|\\x": { "*": { action_: ["output", "copy"] } },
            else: { "*": { action_: "text=" } },
          }),
          actions: {
            output: function (e) {
              if (e.text_) {
                var t = { type_: "text", p1: e.text_ };
                for (var n in e) delete e[n];
                return t;
              }
            },
          },
        },
        pq: {
          transitions: el.createTransitions({
            empty: { "*": {} },
            "state of aggregation $": {
              "*": { action_: "state of aggregation" },
            },
            i$: { 0: { nextState: "!f", revisit: !0 } },
            "(KV letters),": { 0: { action_: "rm", nextState: "0" } },
            formula$: { 0: { nextState: "f", revisit: !0 } },
            "1/2$": { 0: { action_: "1/2" } },
            else: { 0: { nextState: "!f", revisit: !0 } },
            "${(...)}$|$(...)$": { "*": { action_: "tex-math" } },
            "{(...)}": { "*": { action_: "text" } },
            "a-z": { f: { action_: "tex-math" } },
            letters: { "*": { action_: "rm" } },
            "-9.,9": { "*": { action_: "9,9" } },
            ",": {
              "*": {
                action_: { type_: "insert+p1", option: "comma enumeration S" },
              },
            },
            "\\color{(...)}{(...)}1|\\color(...){(...)}2": {
              "*": { action_: "color-output" },
            },
            "\\color{(...)}0": { "*": { action_: "color0-output" } },
            "\\ce{(...)}": { "*": { action_: "ce" } },
            "\\,|\\x{}{}|\\x{}|\\x": { "*": { action_: "copy" } },
            else2: { "*": { action_: "copy" } },
          }),
          actions: {
            "state of aggregation": function (e, t) {
              return {
                type_: "state of aggregation subscript",
                p1: el.go(t, "o"),
              };
            },
            "color-output": function (e, t) {
              return {
                type_: "color",
                color1: t[0],
                color2: el.go(t[1], "pq"),
              };
            },
          },
        },
        bd: {
          transitions: el.createTransitions({
            empty: { "*": {} },
            x$: { 0: { nextState: "!f", revisit: !0 } },
            formula$: { 0: { nextState: "f", revisit: !0 } },
            else: { 0: { nextState: "!f", revisit: !0 } },
            "-9.,9 no missing 0": { "*": { action_: "9,9" } },
            ".": {
              "*": { action_: { type_: "insert", option: "electron dot" } },
            },
            "a-z": { f: { action_: "tex-math" } },
            x: { "*": { action_: { type_: "insert", option: "KV x" } } },
            letters: { "*": { action_: "rm" } },
            "'": { "*": { action_: { type_: "insert", option: "prime" } } },
            "${(...)}$|$(...)$": { "*": { action_: "tex-math" } },
            "{(...)}": { "*": { action_: "text" } },
            "\\color{(...)}{(...)}1|\\color(...){(...)}2": {
              "*": { action_: "color-output" },
            },
            "\\color{(...)}0": { "*": { action_: "color0-output" } },
            "\\ce{(...)}": { "*": { action_: "ce" } },
            "\\,|\\x{}{}|\\x{}|\\x": { "*": { action_: "copy" } },
            else2: { "*": { action_: "copy" } },
          }),
          actions: {
            "color-output": function (e, t) {
              return {
                type_: "color",
                color1: t[0],
                color2: el.go(t[1], "bd"),
              };
            },
          },
        },
        oxidation: {
          transitions: el.createTransitions({
            empty: { "*": {} },
            "roman numeral": { "*": { action_: "roman-numeral" } },
            "${(...)}$|$(...)$": { "*": { action_: "tex-math" } },
            else: { "*": { action_: "copy" } },
          }),
          actions: {
            "roman-numeral": function (e, t) {
              return { type_: "roman numeral", p1: t || "" };
            },
          },
        },
        "tex-math": {
          transitions: el.createTransitions({
            empty: { "*": { action_: "output" } },
            "\\ce{(...)}": { "*": { action_: ["output", "ce"] } },
            "{...}|\\,|\\x{}{}|\\x{}|\\x": { "*": { action_: "o=" } },
            else: { "*": { action_: "o=" } },
          }),
          actions: {
            output: function (e) {
              if (e.o) {
                var t = { type_: "tex-math", p1: e.o };
                for (var n in e) delete e[n];
                return t;
              }
            },
          },
        },
        "tex-math tight": {
          transitions: el.createTransitions({
            empty: { "*": { action_: "output" } },
            "\\ce{(...)}": { "*": { action_: ["output", "ce"] } },
            "{...}|\\,|\\x{}{}|\\x{}|\\x": { "*": { action_: "o=" } },
            "-|+": { "*": { action_: "tight operator" } },
            else: { "*": { action_: "o=" } },
          }),
          actions: {
            "tight operator": function (e, t) {
              e.o = (e.o || "") + "{" + t + "}";
            },
            output: function (e) {
              if (e.o) {
                var t = { type_: "tex-math", p1: e.o };
                for (var n in e) delete e[n];
                return t;
              }
            },
          },
        },
        "9,9": {
          transitions: el.createTransitions({
            empty: { "*": {} },
            ",": { "*": { action_: "comma" } },
            else: { "*": { action_: "copy" } },
          }),
          actions: {
            comma: function () {
              return { type_: "commaDecimal" };
            },
          },
        },
        pu: {
          transitions: el.createTransitions({
            empty: { "*": { action_: "output" } },
            space$: { "*": { action_: ["output", "space"] } },
            "{[(|)]}": { "0|a": { action_: "copy" } },
            "(-)(9)^(-9)": { 0: { action_: "number^", nextState: "a" } },
            "(-)(9.,9)(e)(99)": { 0: { action_: "enumber", nextState: "a" } },
            space: { "0|a": {} },
            "pm-operator": {
              "0|a": {
                action_: { type_: "operator", option: "\\pm" },
                nextState: "0",
              },
            },
            operator: { "0|a": { action_: "copy", nextState: "0" } },
            "//": { d: { action_: "o=", nextState: "/" } },
            "/": { d: { action_: "o=", nextState: "/" } },
            "{...}|else": {
              "0|d": { action_: "d=", nextState: "d" },
              a: { action_: ["space", "d="], nextState: "d" },
              "/|q": { action_: "q=", nextState: "q" },
            },
          }),
          actions: {
            enumber: function (e, t) {
              var n = [];
              return (
                "+-" === t[0] || "+/-" === t[0]
                  ? n.push("\\pm ")
                  : t[0] && n.push(t[0]),
                t[1] &&
                  (el.concatArray(n, el.go(t[1], "pu-9,9")),
                  t[2] &&
                    (t[2].match(/[,.]/)
                      ? el.concatArray(n, el.go(t[2], "pu-9,9"))
                      : n.push(t[2])),
                  (t[3] || t[4]) &&
                    ("e" === t[3] || "*" === t[4]
                      ? n.push({ type_: "cdot" })
                      : n.push({ type_: "times" }))),
                t[5] && n.push("10^{" + t[5] + "}"),
                n
              );
            },
            "number^": function (e, t) {
              var n = [];
              return (
                "+-" === t[0] || "+/-" === t[0]
                  ? n.push("\\pm ")
                  : t[0] && n.push(t[0]),
                el.concatArray(n, el.go(t[1], "pu-9,9")),
                n.push("^{" + t[2] + "}"),
                n
              );
            },
            operator: function (e, t, n) {
              return { type_: "operator", kind_: n || t };
            },
            space: function () {
              return { type_: "pu-space-1" };
            },
            output: function (e) {
              var t,
                n = el.patterns.match_("{(...)}", e.d || "");
              n && "" === n.remainder && (e.d = n.match_);
              var i = el.patterns.match_("{(...)}", e.q || "");
              if (
                (i && "" === i.remainder && (e.q = i.match_),
                e.d &&
                  ((e.d = e.d.replace(/\u00B0C|\^oC|\^{o}C/g, "{}^{\\circ}C")),
                  (e.d = e.d.replace(/\u00B0F|\^oF|\^{o}F/g, "{}^{\\circ}F"))),
                e.q)
              ) {
                (e.q = e.q.replace(/\u00B0C|\^oC|\^{o}C/g, "{}^{\\circ}C")),
                  (e.q = e.q.replace(/\u00B0F|\^oF|\^{o}F/g, "{}^{\\circ}F"));
                var r = { d: el.go(e.d, "pu"), q: el.go(e.q, "pu") };
                "//" === e.o
                  ? (t = { type_: "pu-frac", p1: r.d, p2: r.q })
                  : ((t = r.d),
                    r.d.length > 1 || r.q.length > 1
                      ? t.push({ type_: " / " })
                      : t.push({ type_: "/" }),
                    el.concatArray(t, r.q));
              } else t = el.go(e.d, "pu-2");
              for (var a in e) delete e[a];
              return t;
            },
          },
        },
        "pu-2": {
          transitions: el.createTransitions({
            empty: { "*": { action_: "output" } },
            "*": { "*": { action_: ["output", "cdot"], nextState: "0" } },
            "\\x": { "*": { action_: "rm=" } },
            space: { "*": { action_: ["output", "space"], nextState: "0" } },
            "^{(...)}|^(-1)": { 1: { action_: "^(-1)" } },
            "-9.,9": {
              0: { action_: "rm=", nextState: "0" },
              1: { action_: "^(-1)", nextState: "0" },
            },
            "{...}|else": { "*": { action_: "rm=", nextState: "1" } },
          }),
          actions: {
            cdot: function () {
              return { type_: "tight cdot" };
            },
            "^(-1)": function (e, t) {
              e.rm += "^{" + t + "}";
            },
            space: function () {
              return { type_: "pu-space-2" };
            },
            output: function (e) {
              var t = [];
              if (e.rm) {
                var n = el.patterns.match_("{(...)}", e.rm || "");
                t =
                  n && "" === n.remainder
                    ? el.go(n.match_, "pu")
                    : { type_: "rm", p1: e.rm };
              }
              for (var i in e) delete e[i];
              return t;
            },
          },
        },
        "pu-9,9": {
          transitions: el.createTransitions({
            empty: { 0: { action_: "output-0" }, o: { action_: "output-o" } },
            ",": { 0: { action_: ["output-0", "comma"], nextState: "o" } },
            ".": { 0: { action_: ["output-0", "copy"], nextState: "o" } },
            else: { "*": { action_: "text=" } },
          }),
          actions: {
            comma: function () {
              return { type_: "commaDecimal" };
            },
            "output-0": function (e) {
              var t = [];
              if (((e.text_ = e.text_ || ""), e.text_.length > 4)) {
                var n = e.text_.length % 3;
                0 === n && (n = 3);
                for (var i = e.text_.length - 3; i > 0; i -= 3)
                  t.push(e.text_.substr(i, 3)),
                    t.push({ type_: "1000 separator" });
                t.push(e.text_.substr(0, n)), t.reverse();
              } else t.push(e.text_);
              for (var r in e) delete e[r];
              return t;
            },
            "output-o": function (e) {
              var t = [];
              if (((e.text_ = e.text_ || ""), e.text_.length > 4)) {
                for (var n = e.text_.length - 3, i = 0; i < n; i += 3)
                  t.push(e.text_.substr(i, 3)),
                    t.push({ type_: "1000 separator" });
                t.push(e.text_.substr(i));
              } else t.push(e.text_);
              for (var r in e) delete e[r];
              return t;
            },
          },
        },
      };
      var tl = {
          go: function (e, t) {
            if (!e) return "";
            for (var n = "", i = !1, r = 0; r < e.length; r++) {
              var a = e[r];
              "string" == typeof a
                ? (n += a)
                : ((n += tl._go2(a)),
                  "1st-level escape" === a.type_ && (i = !0));
            }
            return !t && !i && n && (n = "{" + n + "}"), n;
          },
          _goInner: function (e) {
            return e && tl.go(e, !0);
          },
          _go2: function (e) {
            var t;
            switch (e.type_) {
              case "chemfive":
                t = "";
                var n = {
                  a: tl._goInner(e.a),
                  b: tl._goInner(e.b),
                  p: tl._goInner(e.p),
                  o: tl._goInner(e.o),
                  q: tl._goInner(e.q),
                  d: tl._goInner(e.d),
                };
                n.a &&
                  (n.a.match(/^[+\-]/) && (n.a = "{" + n.a + "}"),
                  (t += n.a + "\\,")),
                  (n.b || n.p) &&
                    ((t += "{\\vphantom{X}}"),
                    (t +=
                      "^{\\hphantom{" +
                      (n.b || "") +
                      "}}_{\\hphantom{" +
                      (n.p || "") +
                      "}}"),
                    (t += "{\\vphantom{X}}"),
                    (t +=
                      "^{\\smash[t]{\\vphantom{2}}\\llap{" +
                      (n.b || "") +
                      "}}"),
                    (t +=
                      "_{\\vphantom{2}\\llap{\\smash[t]{" +
                      (n.p || "") +
                      "}}}")),
                  n.o &&
                    (n.o.match(/^[+\-]/) && (n.o = "{" + n.o + "}"),
                    (t += n.o)),
                  "kv" === e.dType
                    ? ((n.d || n.q) && (t += "{\\vphantom{X}}"),
                      n.d && (t += "^{" + n.d + "}"),
                      n.q && (t += "_{\\smash[t]{" + n.q + "}}"))
                    : "oxidation" === e.dType
                    ? (n.d &&
                        ((t += "{\\vphantom{X}}"), (t += "^{" + n.d + "}")),
                      n.q &&
                        ((t += "{\\vphantom{X}}"),
                        (t += "_{\\smash[t]{" + n.q + "}}")))
                    : (n.q &&
                        ((t += "{\\vphantom{X}}"),
                        (t += "_{\\smash[t]{" + n.q + "}}")),
                      n.d &&
                        ((t += "{\\vphantom{X}}"), (t += "^{" + n.d + "}")));
                break;
              case "rm":
              case "roman numeral":
                t = "\\mathrm{" + e.p1 + "}";
                break;
              case "text":
                e.p1.match(/[\^_]/)
                  ? ((e.p1 = e.p1.replace(" ", "~").replace("-", "\\text{-}")),
                    (t = "\\mathrm{" + e.p1 + "}"))
                  : (t = "\\text{" + e.p1 + "}");
                break;
              case "state of aggregation":
                t = "\\mskip2mu " + tl._goInner(e.p1);
                break;
              case "state of aggregation subscript":
                t = "\\mskip1mu " + tl._goInner(e.p1);
                break;
              case "bond":
                if (!(t = tl._getBond(e.kind_)))
                  throw [
                    "MhchemErrorBond",
                    "mhchem Error. Unknown bond type (" + e.kind_ + ")",
                  ];
                break;
              case "frac":
                var i = "\\frac{" + e.p1 + "}{" + e.p2 + "}";
                t =
                  "\\mathchoice{\\textstyle" +
                  i +
                  "}{" +
                  i +
                  "}{" +
                  i +
                  "}{" +
                  i +
                  "}";
                break;
              case "pu-frac":
                var r =
                  "\\frac{" +
                  tl._goInner(e.p1) +
                  "}{" +
                  tl._goInner(e.p2) +
                  "}";
                t =
                  "\\mathchoice{\\textstyle" +
                  r +
                  "}{" +
                  r +
                  "}{" +
                  r +
                  "}{" +
                  r +
                  "}";
                break;
              case "tex-math":
              case "1st-level escape":
                t = e.p1 + " ";
                break;
              case "frac-ce":
                t =
                  "\\frac{" +
                  tl._goInner(e.p1) +
                  "}{" +
                  tl._goInner(e.p2) +
                  "}";
                break;
              case "overset":
                t =
                  "\\overset{" +
                  tl._goInner(e.p1) +
                  "}{" +
                  tl._goInner(e.p2) +
                  "}";
                break;
              case "underset":
                t =
                  "\\underset{" +
                  tl._goInner(e.p1) +
                  "}{" +
                  tl._goInner(e.p2) +
                  "}";
                break;
              case "underbrace":
                t =
                  "\\underbrace{" +
                  tl._goInner(e.p1) +
                  "}_{" +
                  tl._goInner(e.p2) +
                  "}";
                break;
              case "color":
                t =
                  "{\\color{" + e.color1 + "}{" + tl._goInner(e.color2) + "}}";
                break;
              case "color0":
                t = "\\color{" + e.color + "}";
                break;
              case "arrow":
                var a = { rd: tl._goInner(e.rd), rq: tl._goInner(e.rq) },
                  o = tl._getArrow(e.r);
                a.rd || a.rq
                  ? "<=>" === e.r ||
                    "<=>>" === e.r ||
                    "<<=>" === e.r ||
                    "<--\x3e" === e.r
                    ? ((o = "\\long" + o),
                      a.rd && (o = "\\overset{" + a.rd + "}{" + o + "}"),
                      a.rq &&
                        (o =
                          "<--\x3e" === e.r
                            ? "\\underset{\\lower2mu{" + a.rq + "}}{" + o + "}"
                            : "\\underset{\\lower6mu{" +
                              a.rq +
                              "}}{" +
                              o +
                              "}"),
                      (o = " {}\\mathrel{" + o + "}{} "))
                    : (a.rq && (o += "[{" + a.rq + "}]"),
                      (o =
                        " {}\\mathrel{\\x" + (o += "{" + a.rd + "}") + "}{} "))
                  : (o = " {}\\mathrel{\\long" + o + "}{} "),
                  (t = o);
                break;
              case "operator":
                t = tl._getOperator(e.kind_);
                break;
              case "space":
                t = " ";
                break;
              case "entitySkip":
              case "pu-space-1":
                t = "~";
                break;
              case "pu-space-2":
                t = "\\mkern3mu ";
                break;
              case "1000 separator":
                t = "\\mkern2mu ";
                break;
              case "commaDecimal":
                t = "{,}";
                break;
              case "comma enumeration L":
                t = "{" + e.p1 + "}\\mkern6mu ";
                break;
              case "comma enumeration M":
                t = "{" + e.p1 + "}\\mkern3mu ";
                break;
              case "comma enumeration S":
                t = "{" + e.p1 + "}\\mkern1mu ";
                break;
              case "hyphen":
                t = "\\text{-}";
                break;
              case "addition compound":
                t = "\\,{\\cdot}\\,";
                break;
              case "electron dot":
                t = "\\mkern1mu \\bullet\\mkern1mu ";
                break;
              case "KV x":
                t = "{\\times}";
                break;
              case "prime":
                t = "\\prime ";
                break;
              case "cdot":
                t = "\\cdot ";
                break;
              case "tight cdot":
                t = "\\mkern1mu{\\cdot}\\mkern1mu ";
                break;
              case "times":
                t = "\\times ";
                break;
              case "circa":
                t = "{\\sim}";
                break;
              case "^":
                t = "uparrow";
                break;
              case "v":
                t = "downarrow";
                break;
              case "ellipsis":
                t = "\\ldots ";
                break;
              case "/":
                t = "/";
                break;
              case " / ":
                t = "\\,/\\,";
                break;
              default:
                throw ["MhchemBugT", "mhchem bug T. Please report."];
            }
            return t;
          },
          _getArrow: function (e) {
            switch (e) {
              case "->":
              case "\u2192":
              case "\u27f6":
                return "rightarrow";
              case "<-":
                return "leftarrow";
              case "<->":
                return "leftrightarrow";
              case "<--\x3e":
                return "leftrightarrows";
              case "<=>":
              case "\u21cc":
                return "rightleftharpoons";
              case "<=>>":
                return "Rightleftharpoons";
              case "<<=>":
                return "Leftrightharpoons";
              default:
                throw ["MhchemBugT", "mhchem bug T. Please report."];
            }
          },
          _getBond: function (e) {
            switch (e) {
              case "-":
              case "1":
                return "{-}";
              case "=":
              case "2":
                return "{=}";
              case "#":
              case "3":
                return "{\\equiv}";
              case "~":
                return "{\\tripledash}";
              case "~-":
                return "{\\rlap{\\lower.1em{-}}\\raise.1em{\\tripledash}}";
              case "~=":
              case "~--":
                return "{\\rlap{\\lower.2em{-}}\\rlap{\\raise.2em{\\tripledash}}-}";
              case "-~-":
                return "{\\rlap{\\lower.2em{-}}\\rlap{\\raise.2em{-}}\\tripledash}";
              case "...":
                return "{{\\cdot}{\\cdot}{\\cdot}}";
              case "....":
                return "{{\\cdot}{\\cdot}{\\cdot}{\\cdot}}";
              case "->":
                return "{\\rightarrow}";
              case "<-":
                return "{\\leftarrow}";
              case "<":
                return "{<}";
              case ">":
                return "{>}";
              default:
                throw ["MhchemBugT", "mhchem bug T. Please report."];
            }
          },
          _getOperator: function (e) {
            switch (e) {
              case "+":
                return " {}+{} ";
              case "-":
                return " {}-{} ";
              case "=":
                return " {}={} ";
              case "<":
                return " {}<{} ";
              case ">":
                return " {}>{} ";
              case "<<":
                return " {}\\ll{} ";
              case ">>":
                return " {}\\gg{} ";
              case "\\pm":
                return " {}\\pm{} ";
              case "\\approx":
              case "$\\approx$":
                return " {}\\approx{} ";
              case "v":
              case "(v)":
                return " \\downarrow{} ";
              case "^":
              case "(^)":
                return " \\uparrow{} ";
              default:
                throw ["MhchemBugT", "mhchem bug T. Please report."];
            }
          },
        },
        nl = class e extends Eo {
          constructor(e) {
            super(u(d({}, e), { type: "delim" })),
              (this.value = e.delim),
              (this.size = e.size);
          }
          static fromJson(t) {
            return new e(t);
          }
          toJson() {
            return u(d({}, super.toJson()), {
              delim: this.value,
              size: this.size,
            });
          }
          render(e) {
            return new oo(this.value, { type: "middle" });
          }
          _serialize(e) {
            if (
              !e.expandMacro &&
              !e.skipStyles &&
              "string" == typeof this.verbatimLatex
            )
              return this.verbatimLatex;
            let t = ne(this.command, this.mode);
            return null != t && t.serialize
              ? t.serialize(this, e)
              : Xa(this.command, this.value);
          }
        },
        il = class e extends Eo {
          constructor(e) {
            super(u(d({}, e), { type: "sizeddelim", value: e.delim })),
              (this.delimType = e.delimType),
              (this.size = e.size);
          }
          static fromJson(t) {
            return new e(t);
          }
          toJson() {
            return u(d({}, super.toJson()), {
              delim: this.value,
              size: this.size,
              delimType: this.delimType,
            });
          }
          render(e) {
            let t = (function (e, t, n, i) {
              return void 0 === e || "." === e
                ? zs(n, i.classes)
                : ("<" === e || "\\lt" === e || "\u27e8" === e
                    ? (e = "\\langle")
                    : (">" === e || "\\gt" === e || "\u27e9" === e) &&
                      (e = "\\rangle"),
                  bs.has(e) || xs.has(e)
                    ? ys(e, t, !1, n, i)
                    : vs.has(e)
                    ? gs(e, ws[t], !1, n, i)
                    : null);
            })(this.value, this.size, e, {
              classes: { open: "mopen", close: "mclose" }[this.delimType],
              type: this.delimType,
              isSelected: this.isSelected,
            });
            return t
              ? ((t = this.bind(e, t)), this.caret && (t.caret = this.caret), t)
              : null;
          }
          _serialize(e) {
            if (
              !e.expandMacro &&
              !e.skipStyles &&
              "string" == typeof this.verbatimLatex
            )
              return this.verbatimLatex;
            let t = ne(this.command, this.mode);
            return null != t && t.serialize
              ? t.serialize(this, e)
              : Xa(this.command, this.value);
          }
        },
        rl = class e extends Eo {
          constructor(e, t, n, i) {
            super({ type: "enclose", command: e, style: i.style }),
              (this.body = t),
              (this.backgroundcolor = i.backgroundcolor),
              n.updiagonalarrow && (n.updiagonalstrike = !1),
              n.box &&
                ((n.left = !1), (n.right = !1), (n.bottom = !1), (n.top = !1)),
              (this.notation = n),
              (this.shadow = i.shadow),
              (this.strokeWidth = i.strokeWidth),
              (this.strokeStyle = i.strokeStyle),
              (this.svgStrokeStyle = i.svgStrokeStyle),
              (this.strokeColor = i.strokeColor),
              (this.borderStyle = i.borderStyle),
              (this.padding = i.padding),
              (this.captureSelection = !0);
          }
          static fromJson(t) {
            return new e(t.command, t.body, t.notation, t);
          }
          toJson() {
            return u(d({}, super.toJson()), {
              notation: this.notation,
              shadow: this.shadow,
              strokeWidth: this.strokeWidth,
              strokeStyle: this.strokeStyle,
              svgStrokeStyle: this.svgStrokeStyle,
              strokeColor: this.strokeColor,
              borderStyle: this.borderStyle,
              padding: this.padding,
            });
          }
          _serialize(e) {
            var t;
            if (
              !e.expandMacro &&
              !e.skipStyles &&
              "string" == typeof this.verbatimLatex
            )
              return this.verbatimLatex;
            let n = ne(this.command, this.mode);
            if (null != n && n.serialize) return n.serialize(this, e);
            let i = null != (t = this.command) ? t : "";
            if ("\\enclose" === this.command) {
              i += "{" + Object.keys(this.notation).join(" ") + "}";
              let e = "",
                t = "";
              this.backgroundcolor &&
                "transparent" !== this.backgroundcolor &&
                ((e += t + 'mathbackground="' + this.backgroundcolor + '"'),
                (t = ",")),
                this.shadow &&
                  "auto" !== this.shadow &&
                  ((e += t + 'shadow="' + this.shadow + '"'), (t = ",")),
                this.strokeWidth || "solid" !== this.strokeStyle
                  ? ((e += t + this.borderStyle), (t = ","))
                  : this.strokeColor &&
                    "currentColor" !== this.strokeColor &&
                    ((e += t + 'mathcolor="' + this.strokeColor + '"'),
                    (t = ",")),
                e && (i += `[${e}]`);
            }
            return Xa(i, this.bodyToLatex(e));
          }
          render(e) {
            var t;
            let n = new Lo({ parent: e }, this.style),
              i = Eo.createBox(n, this.body);
            if (!i) return null;
            let r = n.toEm(
                this.padding && "auto" !== this.padding
                  ? { string: this.padding }
                  : { register: "fboxsep" }
              ),
              a = (function (e) {
                if (!e) return "1px";
                let t = e.match(/([0-9][a-zA-Z\%]+)/);
                return null === t ? "1px" : t[1];
              })(this.borderStyle),
              o = new oo(null, { classes: "ML__notation" });
            o.setStyle("box-sizing", "border-box"),
              o.setStyle("left", `calc(-${a} / 2 - ${r}em)`),
              o.setStyle("height", `calc(${i.height + i.depth + 2 * r}em)`),
              (o.height = i.height + r),
              (o.depth = i.depth + r),
              o.setStyle("width", `calc(100% + ${2 * r}em + 2 * ${a})`),
              this.backgroundcolor &&
                o.setStyle(
                  "background-color",
                  null != (t = this.backgroundcolor) ? t : "transparent"
                ),
              this.notation.box && o.setStyle("border", this.borderStyle),
              this.notation.actuarial &&
                (o.setStyle("border-top", this.borderStyle),
                o.setStyle("border-right", this.borderStyle)),
              this.notation.madruwb &&
                (o.setStyle("border-bottom", this.borderStyle),
                o.setStyle("border-right", this.borderStyle)),
              this.notation.roundedbox &&
                (o.setStyle("border-radius", "8px"),
                o.setStyle("border", this.borderStyle)),
              this.notation.circle &&
                (o.setStyle("border-radius", "50%"),
                o.setStyle("border", this.borderStyle)),
              this.notation.top && o.setStyle("border-top", this.borderStyle),
              this.notation.left && o.setStyle("border-left", this.borderStyle),
              this.notation.right &&
                o.setStyle("border-right", this.borderStyle),
              this.notation.bottom &&
                o.setStyle("border-bottom", this.borderStyle);
            let s = "";
            if (
              (this.notation.horizontalstrike &&
                ((s += '<line x1="3%"  y1="50%" x2="97%" y2="50%"'),
                (s += ` stroke-width="${this.strokeWidth}" stroke="${this.strokeColor}"`),
                (s += ' stroke-linecap="round"'),
                this.svgStrokeStyle &&
                  (s += ` stroke-dasharray="${this.svgStrokeStyle}"`),
                (s += "/>")),
              this.notation.verticalstrike &&
                ((s += '<line x1="50%"  y1="3%" x2="50%" y2="97%"'),
                (s += ` stroke-width="${this.strokeWidth}" stroke="${this.strokeColor}"`),
                (s += ' stroke-linecap="round"'),
                this.svgStrokeStyle &&
                  (s += ` stroke-dasharray="${this.svgStrokeStyle}"`),
                (s += "/>")),
              this.notation.updiagonalstrike &&
                ((s += '<line x1="3%"  y1="97%" x2="97%" y2="3%"'),
                (s += ` stroke-width="${this.strokeWidth}" stroke="${this.strokeColor}"`),
                (s += ' stroke-linecap="round"'),
                this.svgStrokeStyle &&
                  (s += ` stroke-dasharray="${this.svgStrokeStyle}"`),
                (s += "/>")),
              this.notation.downdiagonalstrike &&
                ((s += '<line x1="3%"  y1="3%" x2="97%" y2="97%"'),
                (s += ` stroke-width="${this.strokeWidth}" stroke="${this.strokeColor}"`),
                (s += ' stroke-linecap="round"'),
                this.svgStrokeStyle &&
                  (s += ` stroke-dasharray="${this.svgStrokeStyle}"`),
                (s += "/>")),
              s)
            ) {
              let e;
              "none" !== this.shadow &&
                (e =
                  "auto" === this.shadow
                    ? "filter: drop-shadow(0 0 .5px rgba(255, 255, 255, .7)) drop-shadow(1px 1px 2px #333)"
                    : "filter: drop-shadow(" + this.shadow + ")"),
                uo(o, s, e);
            }
            let l = new oo([o, i]);
            return (
              l.setStyle("position", "relative"),
              l.setStyle("display", "inline"),
              (l.height = i.height + r),
              (l.depth = i.depth + r),
              (l.left = r),
              (l.right = r),
              this.caret && (l.caret = this.caret),
              l.wrap(n)
            );
          }
        };
      var al = class e extends Eo {
          constructor(e, t, n) {
            var i, r;
            super(
              u(d({}, n), { type: "genfrac", displayContainsHighlight: !0 })
            ),
              (this.above = e),
              (this.below = t),
              (this.hasBarLine =
                null == (i = null == n ? void 0 : n.hasBarLine) || i),
              (this.continuousFraction =
                null != (r = null == n ? void 0 : n.continuousFraction) && r),
              (this.numerPrefix = null == n ? void 0 : n.numerPrefix),
              (this.denomPrefix = null == n ? void 0 : n.denomPrefix),
              (this.mathstyleName = null == n ? void 0 : n.mathstyleName),
              (this.leftDelim = null == n ? void 0 : n.leftDelim),
              (this.rightDelim = null == n ? void 0 : n.rightDelim),
              (this.fractionNavigationOrder =
                null == n ? void 0 : n.fractionNavigationOrder);
          }
          static fromJson(t) {
            return new e(t.above, t.below, t);
          }
          toJson() {
            let e = {};
            return (
              this.continuousFraction && (e.continuousFraction = !0),
              this.numerPrefix && (e.numerPrefix = this.numerPrefix),
              this.denomPrefix && (e.denomPrefix = this.denomPrefix),
              this.leftDelim && (e.leftDelim = this.leftDelim),
              this.rightDelim && (e.rightDelim = this.rightDelim),
              this.hasBarLine || (e.hasBarLine = !1),
              this.mathstyleName && (e.mathstyleName = this.mathstyleName),
              this.fractionNavigationOrder &&
                (e.fractionNavigationOrder = this.fractionNavigationOrder),
              d(d({}, super.toJson()), e)
            );
          }
          get children() {
            if (this._children) return this._children;
            let e = [];
            if ("denominator-numerator" === this.fractionNavigationOrder) {
              for (let t of this.below) e.push(...t.children), e.push(t);
              for (let t of this.above) e.push(...t.children), e.push(t);
            } else {
              for (let t of this.above) e.push(...t.children), e.push(t);
              for (let t of this.below) e.push(...t.children), e.push(t);
            }
            return (this._children = e), e;
          }
          render(e) {
            var t, n;
            let i,
              r,
              a = new Lo(
                { parent: e, mathstyle: this.mathstyleName },
                this.style
              ),
              o = a.metrics,
              s = new Lo(
                {
                  parent: a,
                  mathstyle: this.continuousFraction ? "" : "numerator",
                },
                this.style
              ),
              l = this.numerPrefix
                ? new oo(
                    [new oo(this.numerPrefix), Eo.createBox(s, this.above)],
                    { isTight: s.isTight, type: "ignore" }
                  )
                : null != (t = Eo.createBox(s, this.above, { type: "ignore" }))
                ? t
                : new oo(null, { type: "ignore" }),
              c = new Lo(
                {
                  parent: a,
                  mathstyle: this.continuousFraction ? "" : "denominator",
                },
                this.style
              ),
              d = this.denomPrefix
                ? new oo([
                    new oo(this.denomPrefix),
                    Eo.createBox(c, this.below, { type: "ignore" }),
                  ])
                : null != (n = Eo.createBox(c, this.below, { type: "ignore" }))
                ? n
                : new oo(null, { type: "ignore" }),
              u = this.hasBarLine ? o.defaultRuleThickness : 0,
              h = 0;
            a.isDisplayStyle
              ? ((i = s.metrics.num1),
                (h = u > 0 ? 3 * u : 7 * u),
                (r = c.metrics.denom1))
              : (u > 0
                  ? ((i = s.metrics.num2), (h = u))
                  : ((i = s.metrics.num3), (h = 3 * o.defaultRuleThickness)),
                (r = c.metrics.denom2));
            let p = [];
            this.isSelected && p.push("ML__selected");
            let m,
              f = l.depth,
              y = d.height;
            if (u <= 0) {
              let e = i - f - (y - r);
              e < h && ((i += (h - e) / 2), (r += (h - e) / 2)),
                (m = new mo({
                  individualShift: [
                    { box: l, shift: -i, classes: [...p, "ML__center"] },
                    { box: d, shift: r, classes: [...p, "ML__center"] },
                  ],
                }).wrap(a));
            } else {
              let e = Ea + u / 2,
                t = Ea - u / 2;
              i < h + f + e && (i = h + f + e),
                r < h + y - t && (r = h + y - t);
              let n = new oo(null, {
                classes: "ML__frac-line",
                mode: this.mode,
                style: this.style,
              });
              (n.height = u / 2),
                (n.depth = u / 2),
                (m = new mo({
                  individualShift: [
                    { box: d, shift: r, classes: [...p, "ML__center"] },
                    { box: n, shift: -t, classes: p },
                    { box: l, shift: -i, classes: [...p, "ML__center"] },
                  ],
                }).wrap(a));
            }
            let g = a.isDisplayStyle ? o.delim1 : o.delim2,
              b = this.leftDelim
                ? this.bind(
                    e,
                    Ls("open", this.leftDelim, g, !0, e, {
                      style: this.style,
                      mode: this.mode,
                      isSelected: this.isSelected,
                    })
                  )
                : zs(a, "open"),
              v = null;
            v = this.continuousFraction
              ? new oo(null, { type: "close" })
              : this.rightDelim
              ? this.bind(
                  e,
                  Ls("close", this.rightDelim, g, !0, e, {
                    style: this.style,
                    mode: this.mode,
                    isSelected: this.isSelected,
                  })
                )
              : zs(a, "close");
            let x = this.bind(
              e,
              new oo([b, m, v], {
                isTight: a.isTight,
                type: "inner",
                classes: "mfrac",
              })
            );
            return x
              ? (this.caret && (x.caret = this.caret),
                this.attachSupsub(e, { base: x }))
              : null;
          }
        },
        ol = class e extends Eo {
          constructor(e, t) {
            var n;
            super({ type: "latex", value: e, mode: "latex" }),
              (this.isSuggestion =
                null != (n = null == t ? void 0 : t.isSuggestion) && n),
              (this.isError = !1);
          }
          static fromJson(t) {
            let n = new e(t.value);
            return (
              t.isSuggestion && (n.isSuggestion = !0),
              t.isError && (n.isError = !0),
              n
            );
          }
          toJson() {
            let e = {};
            return (
              this.isSuggestion && (e.isSuggestion = !0),
              this.isError && (e.isError = !0),
              d({ type: "latex", value: this.value }, e)
            );
          }
          get computedStyle() {
            return {};
          }
          render(e) {
            let t = new oo(this.value, {
              classes: this.isSuggestion
                ? "ML__suggestion"
                : this.isError
                ? "ML__error"
                : "",
              type: "latex",
              maxFontSize: 1,
            });
            return t
              ? (this.caret && (t.caret = this.caret), this.bind(e, t))
              : null;
          }
        },
        sl = class e extends Eo {
          constructor(e) {
            super({ type: "latexgroup", mode: "latex" }),
              (this.body = [...e].map((e) => new ol(e))),
              (this.skipBoundary = !1);
          }
          static fromJson(t) {
            return new e("");
          }
          toJson() {
            return super.toJson();
          }
          render(e) {
            let t = Eo.createBox(e, this.body);
            return t
              ? (this.caret && (t.caret = this.caret), this.bind(e, t))
              : null;
          }
          _serialize(e) {
            var t, n;
            return null !=
              (n =
                null == (t = this.body)
                  ? void 0
                  : t.map((e) => e.value).join(""))
              ? n
              : "";
          }
        },
        ll = class e extends Eo {
          constructor(e, t) {
            var n, i, r;
            super(
              u(d({}, t), {
                type: null != (n = t.type) ? n : "mop",
                isFunction: null == t ? void 0 : t.isFunction,
              })
            ),
              (this.value = e),
              (this.hasArgument = null != (i = t.hasArgument) && i),
              (this.variant = null == t ? void 0 : t.variant),
              (this.variantStyle = null == t ? void 0 : t.variantStyle),
              (this.subsupPlacement = null == t ? void 0 : t.limits),
              (this.isExtensibleSymbol =
                null != (r = null == t ? void 0 : t.isExtensibleSymbol) && r);
          }
          static fromJson(t) {
            return new e(t.symbol, t);
          }
          toJson() {
            let e = super.toJson();
            return (
              this.hasArgument && (e.hasArgument = !0),
              this.variant && (e.variant = this.variant),
              this.variantStyle && (e.variantStyle = this.variantStyle),
              this.subsupPlacement && (e.limits = this.subsupPlacement),
              this.isExtensibleSymbol && (e.isExtensibleSymbol = !0),
              this.value && (e.symbol = this.value),
              e
            );
          }
          render(e) {
            var t;
            let n,
              i = 0,
              r = 0;
            if (this.isExtensibleSymbol) {
              let t = e.isDisplayStyle && "\\smallint" !== this.value;
              if (
                ((n = new oo(this.value, {
                  fontFamily: t ? "Size2-Regular" : "Size1-Regular",
                  classes: "op-symbol " + (t ? "large-op" : "small-op"),
                  type: "op",
                  maxFontSize: e.scalingFactor,
                  isSelected: this.isSelected,
                })),
                !n)
              )
                return null;
              (n.right = n.italic),
                (i = (n.height - n.depth) / 2 - Ea * e.scalingFactor),
                (r = n.italic),
                n.setTop(i);
            } else
              this.type,
                (n = new oo(this.value, {
                  type: "op",
                  mode: "math",
                  maxFontSize: e.scalingFactor,
                  style: {
                    variant: this.variant,
                    variantStyle: this.variantStyle,
                  },
                  isSelected: this.isSelected,
                  letterShapeStyle: e.letterShapeStyle,
                }));
            let a = n;
            if (this.superscript || this.subscript) {
              let o = null != (t = this.subsupPlacement) ? t : "auto";
              a =
                "over-under" === o || ("auto" === o && e.isDisplayStyle)
                  ? this.attachLimits(e, { base: n, baseShift: i, slant: r })
                  : this.attachSupsub(e, { base: n });
            }
            return new oo(this.bind(e, a), {
              type: "op",
              caret: this.caret,
              isSelected: this.isSelected,
              classes: "op-group",
            }).wrap(e);
          }
          _serialize(e) {
            if (
              !e.expandMacro &&
              !e.skipStyles &&
              "string" == typeof this.verbatimLatex
            )
              return this.verbatimLatex;
            let t = ne(this.command, this.mode);
            if (null != t && t.serialize) return t.serialize(this, e);
            if ("\u200b" === this.value) return this.supsubToLatex(e);
            let n = [];
            return (
              this.hasArgument
                ? n.push(Xa(this.command, this.bodyToLatex(e)))
                : n.push(this.command),
              this.explicitSubsupPlacement &&
                ("over-under" === this.subsupPlacement && n.push("\\limits"),
                "adjacent" === this.subsupPlacement && n.push("\\nolimits"),
                "auto" === this.subsupPlacement && n.push("\\displaylimits")),
              n.push(this.supsubToLatex(e)),
              Ja(n)
            );
          }
        },
        cl = class e extends Eo {
          constructor(e) {
            let t = e.body;
            super(
              u(d({}, e), {
                type: "overlap",
                body: "string" == typeof t ? [new Eo({ value: t })] : t,
                style: null == e ? void 0 : e.style,
              })
            ),
              (this.skipBoundary = !0),
              (this.align = null == e ? void 0 : e.align),
              (this.boxType = null == e ? void 0 : e.boxType);
          }
          static fromJson(t) {
            return new e(t);
          }
          toJson() {
            let e = {};
            return (
              this.align && (e.align = this.align),
              this.boxType && (e.boxType = this.boxType),
              d(d({}, super.toJson()), e)
            );
          }
          render(e) {
            let t = Eo.createBox(e, this.body, { classes: "inner" });
            return t
              ? (this.caret && (t.caret = this.caret),
                this.bind(
                  e,
                  new oo([t, new oo(null, { classes: "fix" })], {
                    classes: "right" === this.align ? "rlap" : "llap",
                    type: this.boxType,
                  })
                ))
              : null;
          }
        },
        dl = class e extends Eo {
          constructor(e) {
            var t, n, i, r;
            super({
              type: "overunder",
              command: e.command,
              style: e.style,
              mode: e.mode,
              body: e.body,
              skipBoundary: null == (t = e.skipBoundary) || t,
            }),
              (this.subsupPlacement = e.supsubPlacement),
              (this.svgAbove = e.svgAbove),
              (this.svgBelow = e.svgBelow),
              (this.svgBody = e.svgBody),
              (this.above = e.above),
              (this.below = e.below),
              (this.boxType = null != (n = e.boxType) ? n : "ord"),
              (this.paddedBody = null != (i = e.paddedBody) && i),
              (this.paddedLabels = null != (r = e.paddedLabels) && r);
          }
          static fromJson(t) {
            return new e(t);
          }
          toJson() {
            let e = super.toJson();
            return (
              this.skipBoundary || (e.skipBoundary = !1),
              this.subsupPlacement &&
                (e.subsupPlacement = this.subsupPlacement),
              this.svgAbove && (e.svgAbove = this.svgAbove),
              this.svgBelow && (e.svgBelow = this.svgBelow),
              this.svgBody && (e.svgBody = this.svgBody),
              "ord" !== this.boxType && (e.boxType = this.boxType),
              this.paddedBody && (e.paddedBody = !0),
              this.paddedLabels && (e.paddedLabels = !0),
              e
            );
          }
          render(e) {
            let t = this.svgBody
                ? ho(this.svgBody)
                : Eo.createBox(e, this.body, { type: "ignore" }),
              n = new Lo({ parent: e, mathstyle: "scriptstyle" }, this.style),
              i = null;
            this.svgAbove
              ? (i = ho(this.svgAbove))
              : this.above &&
                (i = Eo.createBox(n, this.above, { type: "ignore" }));
            let r = null;
            this.svgBelow
              ? (r = ho(this.svgBelow))
              : this.below &&
                (r = Eo.createBox(n, this.below, { type: "ignore" })),
              this.paddedBody &&
                (t = new oo([zs(e, "open"), t, zs(e, "close")], {
                  type: "ignore",
                }));
            let a = (function (e, t) {
              if (!t.base) return null;
              if (!t.above && !t.below) {
                let e = new oo(t.base, { type: t.type });
                return e.setStyle("position", "relative"), e;
              }
              let n = 0;
              t.above && (n = e.metrics.bigOpSpacing5);
              let i = null,
                r = t.base,
                a = 0,
                o = ["ML__center"];
              if (
                (t.paddedAboveBelow && o.push("ML__label_padding"),
                t.below && t.above)
              ) {
                let s =
                  e.metrics.bigOpSpacing5 +
                  t.below.height +
                  t.below.depth +
                  r.depth +
                  a;
                i = new mo({
                  bottom: s,
                  children: [
                    e.metrics.bigOpSpacing5,
                    { box: t.below, classes: o },
                    { box: r, classes: ["ML__center"] },
                    n,
                    { box: t.above, classes: o },
                    e.metrics.bigOpSpacing5,
                  ],
                });
              } else
                t.below
                  ? (i = new mo({
                      top: r.height - a,
                      children: [
                        e.metrics.bigOpSpacing5,
                        { box: t.below, classes: o },
                        { box: r, classes: ["ML__center"] },
                      ],
                    }))
                  : t.above &&
                    (i = new mo({
                      bottom: r.depth + a,
                      children: [
                        { box: r, classes: ["ML__center"] },
                        n,
                        { box: t.above, classes: o },
                        e.metrics.bigOpSpacing5,
                      ],
                    }));
              return new oo(i, { type: t.type });
            })(e, {
              base: t,
              above: i,
              below: r,
              type:
                "bin" === this.boxType || "rel" === this.boxType
                  ? this.boxType
                  : "ord",
              paddedAboveBelow: this.paddedLabels,
            });
            return a
              ? ((a =
                  "over-under" === this.subsupPlacement
                    ? this.attachLimits(e, { base: a, type: a.type })
                    : this.attachSupsub(e, { base: a })),
                this.caret && (a.caret = this.caret),
                this.bind(e, a))
              : null;
          }
        };
      var ul = class e extends Eo {
          constructor(e) {
            var t, n, i, r;
            super(u(d({}, e), { type: "phantom" })),
              (this.captureSelection = !0),
              (this.isInvisible = null != (t = e.isInvisible) && t),
              (this.smashDepth = null != (n = e.smashDepth) && n),
              (this.smashHeight = null != (i = e.smashHeight) && i),
              (this.smashWidth = null != (r = e.smashWidth) && r);
          }
          static fromJson(t) {
            return new e(t);
          }
          toJson() {
            let e = {};
            return (
              this.isInvisible && (e.isInvisible = !0),
              this.smashDepth && (e.smashDepth = !0),
              this.smashHeight && (e.smashHeight = !0),
              this.smashWidth && (e.smashWidth = !0),
              d(d({}, super.toJson()), e)
            );
          }
          render(e) {
            let t = new Lo({ parent: e, isPhantom: !0 });
            if (!this.smashDepth && !this.smashHeight && !this.smashWidth)
              return (
                this.isInvisible,
                Eo.createBox(t, this.body, { classes: "inner" })
              );
            let n = Eo.createBox(this.isInvisible ? t : e, this.body);
            if (!n) return null;
            if (this.smashWidth) {
              let t = new oo(null, { classes: "fix" });
              return new oo([n, t], { classes: "rlap" }).wrap(e);
            }
            if (!this.smashHeight && !this.smashDepth) return n;
            if (
              (this.smashHeight && (n.height = 0),
              this.smashDepth && (n.depth = 0),
              n.children)
            )
              for (let i of n.children)
                this.smashHeight && (i.height = 0),
                  this.smashDepth && (i.depth = 0);
            return new mo(
              { firstBaseline: [{ box: n }] },
              { type: n.type }
            ).wrap(e);
          }
        },
        hl = class e extends Eo {
          constructor(e) {
            var t;
            super(d({ type: "spacing" }, e)),
              (this.width = null == e ? void 0 : e.width),
              (this._braced = null != (t = null == e ? void 0 : e.braced) && t);
          }
          static fromJson(t) {
            return new e(t);
          }
          toJson() {
            let e = super.toJson();
            return (
              void 0 !== this.width && (e.width = this.width),
              this._braced && (e.braced = !0),
              e
            );
          }
          render(e) {
            var t;
            if ("space" === this.command)
              return new oo("math" === this.mode ? null : " ");
            let n;
            if (void 0 !== this.width)
              (n = new oo(null, { classes: "mspace" })),
                (n.left = e.toEm(this.width));
            else {
              let e =
                null !=
                (t = {
                  "\\qquad": "qquad",
                  "\\quad": "quad",
                  "\\enspace": "enspace",
                  "\\;": "thickspace",
                  "\\:": "mediumspace",
                  "\\,": "thinspace",
                  "\\!": "negativethinspace",
                }[this.command])
                  ? t
                  : "mediumspace";
              n = new oo(null, { classes: e });
            }
            return (
              (n = this.bind(e, n)), this.caret && (n.caret = this.caret), n
            );
          }
          _serialize(e) {
            var t;
            if (!e.expandMacro && "string" == typeof this.verbatimLatex)
              return this.verbatimLatex;
            let n = ne(this.command, this.mode);
            if (null != n && n.serialize) return n.serialize(this, e);
            let i = null != (t = this.command) ? t : "";
            return void 0 === this.width
              ? i
              : this._braced && !("register" in this.width)
              ? `${i}{${wo(this.width)}}`
              : `${i}${wo(this.width)}`;
          }
        },
        pl = class e extends Eo {
          constructor(e) {
            var t;
            super(
              u(d({}, e), {
                type: "surd",
                mode: null != (t = e.mode) ? t : "math",
                style: e.style,
                displayContainsHighlight: !0,
                body: e.body,
              })
            ),
              (this.above = e.index);
          }
          static fromJson(t) {
            return new e(u(d({}, t), { index: t.above }));
          }
          _serialize(e) {
            if (
              !e.expandMacro &&
              !e.skipStyles &&
              "string" == typeof this.verbatimLatex
            )
              return this.verbatimLatex;
            let t = ne(this.command, this.mode);
            if (null != t && t.serialize) return t.serialize(this, e);
            let n = this.command,
              i = this.bodyToLatex(e);
            return this.above && !this.hasEmptyBranch("above")
              ? Xa(`${n}[${this.aboveToLatex(e)}]`, i)
              : /^[0-9]$/.test(i)
              ? `${n}${i}`
              : Xa(n, i);
          }
          render(e) {
            var t;
            let n = new Lo({ parent: e, mathstyle: "cramp" }, this.style),
              i =
                null != (t = Eo.createBox(n, this.body, { type: "inner" }))
                  ? t
                  : new oo(null),
              r = n.scalingFactor,
              a = n.metrics.defaultRuleThickness / r,
              o = e.isDisplayStyle ? Ka : a,
              s = new oo(null, {
                classes: "ML__sqrt-line",
                style: this.style,
                height: a,
              }),
              l = r * (a + o / 4),
              c = Math.max(2 * r * o, i.height + i.depth) + l + a,
              d = new Lo({ parent: e }, this.style),
              u = this.bind(
                d,
                new oo(
                  Ls("inner", "\\surd", c, !1, d, {
                    isSelected: this.isSelected,
                  }),
                  {
                    isSelected: this.isSelected,
                    classes: "ML__sqrt-sign",
                    style: this.style,
                  }
                )
              );
            if (!u) return null;
            let h = u.height + u.depth - a;
            h > i.height + i.depth + l &&
              (l = (l + h - (i.height + i.depth)) / 2),
              u.setTop(u.height - i.height - l);
            let p = this.bind(
                e,
                new mo({
                  firstBaseline: [{ box: new oo(i) }, l - 2 * a, { box: s }, a],
                })
              ),
              m = Eo.createBox(
                new Lo({ parent: e, mathstyle: "scriptscriptstyle" }),
                this.above,
                { type: "ignore" }
              );
            if (!m) {
              let t = new oo([u, p], {
                classes: this.containsCaret ? "ML__contains-caret" : "",
                type: "inner",
              });
              return (
                t.setStyle("display", "inline-block"),
                t.setStyle("height", t.height + t.depth, "em"),
                this.caret && (t.caret = this.caret),
                this.bind(e, t)
              );
            }
            let f = new mo({
                shift:
                  -0.6 *
                  (Math.max(u.height, p.height) - Math.max(u.depth, p.depth)),
                children: [{ box: m }],
              }),
              y = new oo(
                [
                  new oo(f, { classes: "ML__sqrt-index", type: "ignore" }),
                  u,
                  p,
                ],
                {
                  type: "inner",
                  classes: this.containsCaret ? "ML__contains-caret" : "",
                }
              );
            return (
              (y.height = u.height),
              (y.depth = u.depth),
              this.caret && (y.caret = this.caret),
              this.bind(e, y)
            );
          }
        },
        ml = class extends oo {
          constructor(e) {
            super(null, { type: "skip", width: e });
          }
          toMarkup() {
            return `<span style="display:inline-block;width:${
              Math.round(100 * this.width) / 100
            }em"></span>`;
          }
        };
      function fl(e, t) {
        if (!e.parent) return;
        let n = e.parent.children,
          i = n.indexOf(e),
          r = i - 1;
        for (; r >= 0 && "ignore" === n[r].type; ) r -= 1;
        r < 0 && e.parent.parent && "lift" === e.parent.type
          ? fl(e.parent, t)
          : i > 0 && "skip" === n[i - 1].type
          ? (n[i - 1].width += t)
          : n.splice(i, 0, new ml(t));
      }
      var yl = {
          ord: { op: 3, bin: 4, rel: 5, inner: 3 },
          op: { ord: 3, op: 3, rel: 5, inner: 3 },
          bin: { ord: 4, op: 4, open: 4, inner: 4 },
          rel: { ord: 5, op: 5, open: 5, inner: 5 },
          close: { op: 3, bin: 4, rel: 5, inner: 3 },
          punct: { ord: 3, op: 3, rel: 3, open: 3, punct: 3, inner: 3 },
          inner: { ord: 3, op: 3, bin: 4, rel: 5, open: 3, punct: 3, inner: 3 },
        },
        gl = {
          ord: { op: 3 },
          op: { ord: 3, op: 3 },
          close: { op: 3 },
          inner: { op: 3 },
        };
      function bl(e, t) {
        if (!e.children) return e;
        let n = e.children;
        !(function (e) {
          vl(e, (e, t) => {
            "bin" === t.type &&
              (!e || /^(middle|bin|op|rel|open|punct)$/.test(e.type)) &&
              (t.type = "ord"),
              "bin" === (null == e ? void 0 : e.type) &&
                /^(rel|close|punct)$/.test(t.type) &&
                (e.type = "ord"),
              "ignore" !== t.type && (e = t);
          });
        })(n);
        let i = t.getRegisterAsEm("thinmuskip"),
          r = t.getRegisterAsEm("medmuskip"),
          a = t.getRegisterAsEm("thickmuskip");
        return (
          vl(n, (e, t) => {
            var n, o, s;
            if (!e) return;
            let l = e.type,
              c = t.isTight
                ? null != (n = gl[l])
                  ? n
                  : null
                : null != (o = yl[l])
                ? o
                : null,
              d = null != (s = null == c ? void 0 : c[t.type]) ? s : null;
            3 === d && fl(t, i), 4 === d && fl(t, r), 5 === d && fl(t, a);
          }),
          e
        );
      }
      function vl(e, t, n) {
        if (!e) return n;
        e = [...e];
        for (let i of e)
          "lift" === i.type
            ? (n = vl(i.children, t, n))
            : "ignore" === i.type
            ? vl(i.children, t)
            : (t(n, i), vl(i.children, t), (n = i));
        return n;
      }
      var xl = class e extends Eo {
        constructor(e) {
          super({
            type: "tooltip",
            command: e.command,
            mode: e.mode,
            style: e.style,
            body: e.body,
            displayContainsHighlight: !0,
          }),
            (this.tooltip = new Eo({
              type: "root",
              mode: e.content,
              body: e.tooltip,
              style: {},
            })),
            (this.skipBoundary = !0),
            (this.captureSelection = !1);
        }
        static fromJson(t) {
          return new e(u(d({}, t), { tooltip: wl(t.tooltip) }));
        }
        toJson() {
          var e;
          let t =
            null == (e = this.tooltip.body)
              ? void 0
              : e.filter((e) => "first" !== e.type).map((e) => e.toJson());
          return u(d({}, super.toJson()), { tooltip: t });
        }
        render(e) {
          let t = Eo.createBox(new Lo(), this.body);
          if (!t) return null;
          let n = new Lo(
              { parent: e, mathstyle: "displaystyle" },
              { fontSize: 5 }
            ),
            i = lo(
              bl(
                new oo(this.tooltip.render(n), {
                  classes: "ML__tooltip-content",
                }),
                n
              )
            ),
            r = new oo([i, t], { classes: "ML__tooltip-container" });
          return this.caret && (r.caret = this.caret), this.bind(e, r);
        }
      };
      function wl(e) {
        if (m(e)) return e.map((e) => wl(e));
        if ("string" == typeof e) return Eo.fromJson(e);
        e = d({}, e);
        for (let i of Co) e[i] && (e[i] = wl(e[i]));
        e.args &&
          (e.args = (function (e) {
            if (e && Array.isArray(e))
              return e.map((e) =>
                "<null>" === e
                  ? null
                  : "object" == typeof e && "group" in e
                  ? { group: e.group.map((e) => wl(e)) }
                  : "object" == typeof e && "atoms" in e
                  ? e.atoms.map((e) => wl(e))
                  : e
              );
          })(e.args)),
          e.array && (e.array = wl(e.array));
        let t,
          n = e.type;
        "accent" === n && (t = hs.fromJson(e)),
          "array" === n && (t = $s.fromJson(e)),
          "box" === n && (t = Ns.fromJson(e)),
          "chem" === n && (t = Qs.fromJson(e)),
          "composition" === n && (t = qs.fromJson(e)),
          "delim" === n && (t = nl.fromJson(e)),
          "enclose" === n && (t = rl.fromJson(e)),
          "error" === n && (t = Rs.fromJson(e)),
          "genfrac" === n && (t = al.fromJson(e)),
          "group" === n && (t = Is.fromJson(e)),
          "latex" === n && (t = ol.fromJson(e)),
          "latexgroup" === n && (t = sl.fromJson(e)),
          "leftright" === n && (t = Vs.fromJson(e)),
          "macro" === n && (t = Hs.fromJson(e)),
          "macro-argument" === n && (t = Ws.fromJson(e)),
          "subsup" === n && (t = Js.fromJson(e)),
          "overlap" === n && (t = cl.fromJson(e)),
          "overunder" === n && (t = dl.fromJson(e)),
          "placeholder" === n && (t = As.fromJson(e)),
          "prompt" === n && (t = Us.fromJson(e)),
          "phantom" === n && (t = ul.fromJson(e)),
          "sizeddelim" === n && (t = il.fromJson(e)),
          "spacing" === n && (t = hl.fromJson(e)),
          "surd" === n && (t = pl.fromJson(e)),
          "text" === n && (t = To.fromJson(e)),
          "tooltip" === n && (t = xl.fromJson(e)),
          "mop" === n && (t = ll.fromJson(e)),
          t ||
            (!n ||
              [
                "first",
                "mbin",
                "mrel",
                "mclose",
                "minner",
                "mopen",
                "mord",
                "mpunct",
                "root",
                "space",
              ].includes(n),
            (t = Eo.fromJson(e)));
        for (let i of Co) e[i] && t.setChildren(e[i], i);
        return (
          void 0 !== e.verbatimLatex && (t.verbatimLatex = e.verbatimLatex),
          e.subsupPlacement && (t.subsupPlacement = e.subsupPlacement),
          e.explicitSubsupPlacement && (t.explicitSubsupPlacement = !0),
          e.isFunction && (t.isFunction = !0),
          e.isExtensibleSymbol && (t.isExtensibleSymbol = !0),
          e.skipBoundary && (t.skipBoundary = !0),
          e.captureSelection && (t.captureSelection = !0),
          t
        );
      }
      var kl = {
          main: ["Main-Regular", "ML__cmr"],
          "main-italic": ["Main-Italic", "ML__cmr ML__it"],
          "main-bold": ["Main-Bold", "ML__cmr ML__bold"],
          "main-bolditalic": ["Main-BoldItalic", "ML__cmr ML__bold ML__it"],
          normal: ["Main-Regular", "ML__cmr"],
          "normal-bold": ["Main-Bold", "ML__mathbf"],
          "normal-italic": ["Math-Italic", "ML__mathit"],
          "normal-bolditalic": ["Math-BoldItalic", "ML__mathbfit"],
          ams: ["AMS-Regular", "ML__ams"],
          "ams-bold": ["AMS-Regular", "ML__ams"],
          "ams-italic": ["AMS-Regular", "ML__ams"],
          "ams-bolditalic": ["AMS-Regular", "ML__ams"],
          "sans-serif": ["SansSerif-Regular", "ML__sans"],
          "sans-serif-bold": ["SansSerif-Regular", "ML__sans ML__bold"],
          "sans-serif-italic": ["SansSerif-Regular", "ML__sans"],
          "sans-serif-bolditalic": ["SansSerif-Regular", "ML__sans"],
          calligraphic: ["Caligraphic-Regular", "ML__cal"],
          "calligraphic-bold": ["Caligraphic-Regular", "ML__cal ML__bold"],
          "calligraphic-italic": ["Caligraphic-Regular", "ML__cal ML__it"],
          "calligraphic-bolditalic": [
            "Caligraphic-Regular",
            "ML__cal ML__bold ML__it",
          ],
          script: ["Script-Regular", "ML__script"],
          "script-bold": ["Script-Regular", "ML__script ML__bold"],
          "script-italic": ["Script-Regular", "ML__script ML__it"],
          "script-bolditalic": ["Script-Regular", "ML__script ML__bold ML__it"],
          fraktur: ["Fraktur-Regular", "ML__frak"],
          "fraktur-bold": ["Fraktur-Regular", "ML__frak"],
          "fraktur-italic": ["Fraktur-Regular", "ML__frak"],
          "fraktur-bolditalic": ["Fraktur-Regular", "ML__frak"],
          monospace: ["Typewriter-Regular", "ML__tt"],
          "monospace-bold": ["Typewriter-Regular", "ML__tt ML__bold"],
          "monospace-italic": ["Typewriter-Regular", "ML__tt ML__it"],
          "monospace-bolditalic": [
            "Typewriter-Regular",
            "ML__tt ML__bold ML__it",
          ],
          "double-struck": ["AMS-Regular", "ML__bb"],
          "double-struck-bold": ["AMS-Regular", "ML__bb"],
          "double-struck-italic": ["AMS-Regular", "ML__bb"],
          "double-struck-bolditalic": ["AMS-Regular", "ML__bb"],
        },
        _l = {
          "double-struck": /^[A-Z ]$/,
          script: /^[A-Z ]$/,
          calligraphic: /^[\dA-Z ]$/,
          fraktur: /^[\dA-Za-z ]$|^[!"#$%&'()*+,\-./:;=?[]^\u2019\u2018]$/,
          monospace:
            /^[\dA-Za-z ]$|^[!"&'()*+,\-./:;=?@[\]^_~\u0131\u0237\u0393\u0394\u0398\u039B\u039E\u03A0\u03A3\u03A5\u03A8\u03A9]$/,
          "sans-serif":
            /^[\dA-Za-z ]$|^[!"&'()*+,\-./:;=?@[\]^_~\u0131\u0237\u0393\u0394\u0398\u039B\u039E\u03A0\u03A3\u03A5\u03A8\u03A9]$/,
        },
        Sl = /^[\u03B1-\u03C9]|\u03D1|\u03D5|\u03D6|\u03F1|\u03F5]$/,
        Ml = [
          /^[a-z]$/,
          /^[A-Z]$/,
          Sl,
          /^[\u0393|\u0394\u0398\u039B\u039E\u03A0\u03A3\u03A5\u03A6\u03A8\u03A9]$/,
        ],
        Ll = {
          iso: ["it", "it", "it", "it"],
          tex: ["it", "it", "it", "up"],
          french: ["it", "up", "up", "up"],
          upright: ["up", "up", "up", "up"],
        };
      function Cl(e) {
        if (!e) return "";
        let { style: t } = e;
        if (void 0 === t.variant) return "";
        let n = t.variant;
        return (
          t.variantStyle &&
            "up" !== t.variantStyle &&
            (n += "-" + t.variantStyle),
          n
        );
      }
      function zl(e, t) {
        return eo(e, "fontSeries").map((e) => {
          let n = (function (e, t) {
              return eo(e, "fontShape").map((e) => {
                let n = (function (e, t) {
                    return e.map((e) => e._serialize(t));
                  })(e, t),
                  { fontShape: i } = e[0].style,
                  r = "";
                return (
                  "it" === i && (r = "\\textit"),
                  "sl" === i && (r = "\\textsl"),
                  "sc" === i && (r = "\\textsc"),
                  "n" === i && (r = "\\textup"),
                  !r && i
                    ? `{${Xa("\\fontshape", i)}${Ja(n)}}`
                    : r
                    ? Xa(r, Ja(n))
                    : Ja(n)
                );
              });
            })(e, t),
            { fontSeries: i } = e[0].style,
            r = "";
          return (
            "b" === i && (r = "\\textbf"),
            "l" === i && (r = "\\textlf"),
            "m" === i && (r = "\\textmd"),
            i && !r
              ? `{${Xa("\\fontseries", i)}${Ja(n)}}`
              : r
              ? Xa(r, Ja(n))
              : Ja(n)
          );
        });
      }
      function Al(e, t) {
        return eo(e, "fontFamily").map((e) => {
          var n, i;
          let r = (function (e, t) {
              return eo(e, "fontSize").map((e) => {
                var n, i;
                let r = zl(e, t),
                  a =
                    null !=
                    (i = [
                      "",
                      "\\tiny",
                      "\\scriptsize",
                      "\\footnotesize",
                      "\\small",
                      "\\normalsize",
                      "\\large",
                      "\\Large",
                      "\\LARGE",
                      "\\huge",
                      "\\Huge",
                    ][null != (n = e[0].style.fontSize) ? n : ""])
                      ? i
                      : "";
                return a ? `${a} ${Ja(r)}` : Ja(r);
              });
            })(e, t),
            a =
              null !=
              (i = {
                roman: "textrm",
                monospace: "texttt",
                "sans-serif": "textsf",
              }[null != (n = e[0].style.fontFamily) ? n : ""])
                ? i
                : "";
          return a
            ? `\\${a}{${Ja(r)}}`
            : e[0].style.fontFamily
            ? `{\\fontfamily{${e[0].style.fontFamily}} ${Ja(r)}}`
            : Ja(r);
        });
      }
      new (class extends Ya {
        constructor() {
          super("math");
        }
        createAtom(e, t, n) {
          var i, r, a, o, s;
          if (null === t)
            return new Eo({
              type: "mord",
              mode: "math",
              command: e,
              value: e,
              style: n,
            });
          if ("symbol" === t.definitionType) {
            let o = new Eo({
              type: null != (i = t.type) ? i : "mord",
              mode: "math",
              command: null != (r = t.command) ? r : e,
              value: String.fromCodePoint(t.codepoint),
              style: n,
            });
            return (
              null != (a = t.isFunction) && a && (o.isFunction = !0),
              e.startsWith("\\") && (o.verbatimLatex = e),
              o
            );
          }
          let l = new Eo({
            type: "mord",
            mode: "math",
            command: null != (o = t.command) ? o : e,
            value: e,
            style: n,
          });
          return (
            null != (s = t.isFunction) && s && (l.isFunction = !0),
            e.startsWith("\\") && (l.verbatimLatex = e),
            l
          );
        }
        serialize(e, t) {
          let n = (function (e, t) {
            let { parent: n } = e[0],
              i = Cl(n);
            return eo(e, "variant").map((e) => {
              let n = Cl(e[0]),
                r = "";
              n &&
                n !== i &&
                (r = {
                  calligraphic: "\\mathcal",
                  fraktur: "\\mathfrak",
                  "double-struck": "\\mathbb",
                  script: "\\mathscr",
                  monospace: "\\mathtt",
                  "sans-serif": "\\mathsf",
                  normal: "\\mathrm",
                  "normal-italic": "\\mathnormal",
                  "normal-bold": "\\mathbf",
                  "normal-bolditalic": "\\mathbfit",
                  ams: "",
                  "ams-italic": "\\mathit",
                  "ams-bold": "\\mathbf",
                  "ams-bolditalic": "\\mathbfit",
                  main: "",
                  "main-italic": "\\mathit",
                  "main-bold": "\\mathbf",
                  "main-bolditalic": "\\mathbfit",
                }[n]);
              let a = Ja(e.map((e) => e._serialize(t)));
              return r ? Xa(r, a) : a;
            });
          })(e, u(d({}, t), { defaultMode: "math" }));
          return 0 === n.length || "text" !== t.defaultMode
            ? n
            : ["$ ", ...n, " $"];
        }
        getFont(e, t) {
          t.variant;
          let { variant: n } = t,
            { variantStyle: i } = t;
          "normal" === n &&
            !i &&
            /[\u00A3\u0131\u0237]/.test(e.value) &&
            ((n = "main"), (i = "italic")),
            "normal" === n &&
              !i &&
              1 === e.value.length &&
              Ml.forEach((n, r) => {
                var a;
                n.test(e.value) &&
                  "it" ===
                    Ll[null != (a = t.letterShapeStyle) ? a : "tex"][r] &&
                  (i = "italic");
              }),
            "up" === i && (i = void 0);
          let r = i ? n + "-" + i : n,
            [a, o] = kl[r];
          return _l[n] && !_l[n].test(e.value)
            ? ((e.value = (function (e, t, n) {
                if (!/[A-Za-z\d]/.test(e) || (!t && !n)) return e;
                let i = e.codePointAt(0);
                if (void 0 === i) return e;
                for (let r of D)
                  if (
                    (!t || r.variant === t) &&
                    (!n || r.style === n) &&
                    i >= r.offset &&
                    i < r.offset + r.len
                  ) {
                    let e = r.start + i - r.offset;
                    return String.fromCodePoint(K[e] || e);
                  }
                return e;
              })(e.value, n, i)),
              null)
            : (Sl.test(e.value) && (e.classes += " lcGreek"),
              o && (e.classes += " " + o),
              a);
        }
      })();
      var El = { roman: "", "sans-serif": "ML__sans", monospace: "ML__tt" };
      new (class extends Ya {
        constructor() {
          super("text");
        }
        createAtom(e, t, n) {
          return t && "symbol" === t.definitionType
            ? new To(e, String.fromCodePoint(t.codepoint), null != n ? n : {})
            : null;
        }
        serialize(e, t) {
          let n = Al(e, u(d({}, t), { defaultMode: "text" }));
          return 0 === n.length || "text" === t.defaultMode
            ? n
            : ["\\text{", ...n, "}"];
        }
        getFont(e, t) {
          var n, i, r, a, o;
          let { fontFamily: s } = t;
          if (
            (El[s]
              ? (e.classes += " " + El[s])
              : s && e.setStyle("font-family", s),
            t.fontShape &&
              ((e.classes += " "),
              (e.classes +=
                null !=
                (n = {
                  it: "ML__it",
                  sl: "ML__shape_sl",
                  sc: "ML__shape_sc",
                  ol: "ML__shape_ol",
                }[t.fontShape])
                  ? n
                  : "")),
            t.fontSeries)
          ) {
            let n = t.fontSeries.match(/(.?[lbm])?(.?[cx])?/);
            n &&
              ((e.classes += " "),
              (e.classes +=
                null !=
                (r = {
                  ul: "ML__series_ul",
                  el: "ML__series_el",
                  l: "ML__series_l",
                  sl: "ML__series_sl",
                  m: "",
                  sb: "ML__series_sb",
                  b: "ML__bold",
                  eb: "ML__series_eb",
                  ub: "ML__series_ub",
                }[null != (i = n[1]) ? i : ""])
                  ? r
                  : ""),
              (e.classes += " "),
              (e.classes +=
                null !=
                (o = {
                  uc: "ML__series_uc",
                  ec: "ML__series_ec",
                  c: "ML__series_c",
                  sc: "ML__series_sc",
                  n: "",
                  sx: "ML__series_sx",
                  x: "ML__series_x",
                  ex: "ML__series_ex",
                  ux: "ML__series_ux",
                }[null != (a = n[2]) ? a : ""])
                  ? o
                  : ""));
          }
          return "Main-Regular";
        }
      })();
      function Kl(e) {
        let t = e.split("+"),
          n = {
            shift: !1,
            alt: !1,
            cmd: !1,
            win: !1,
            meta: !1,
            ctrl: !1,
            key: t.pop(),
          };
        return (
          t.includes("shift") && (n.shift = !0),
          t.includes("alt") && (n.alt = !0),
          t.includes("ctrl") && (n.ctrl = !0),
          t.includes("cmd") && (n.cmd = !0),
          t.includes("win") && (n.win = !0),
          t.includes("meta") && (n.meta = !0),
          n
        );
      }
      function Dl(e) {
        let t = "";
        return (
          e.shift && (t += "shift+"),
          e.alt && (t += "alt+"),
          e.ctrl && (t += "ctrl+"),
          e.cmd && (t += "cmd+"),
          e.win && (t += "win+"),
          e.meta && (t += "meta+"),
          t + e.key
        );
      }
      new (class extends Ya {
        constructor() {
          super("latex");
        }
        createAtom(e) {
          return new ol(e);
        }
        serialize(e, t) {
          return e
            .filter((e) => e instanceof ol && !e.isSuggestion)
            .map((e) => e.value);
        }
        getFont() {
          return null;
        }
      })();
      var Tl,
        Bl =
          "apple" === Ol()
            ? {
                id: "apple.en-intl",
                displayName: "English (international)",
                virtualLayout: "qwerty",
                platform: "apple",
                locale: "en",
                score: 0,
                mapping: {
                  KeyA: ["a", "A", "\xe5", "\xc5"],
                  KeyB: ["b", "B", "\u222b", "\u0131"],
                  KeyC: ["c", "C", "\xe7", "\xc7"],
                  KeyD: ["d", "D", "\u2202", "\xce"],
                  KeyE: ["e", "E", "\xb4", "\xb4"],
                  KeyF: ["f", "F", "\u0192", "\xcf"],
                  KeyG: ["g", "G", "\xa9", "\u02dd"],
                  KeyH: ["h", "H", "\u02d9", "\xd3"],
                  KeyI: ["i", "I", "\u02c6", "\u02c6"],
                  KeyJ: ["j", "J", "\u2206", "\xd4"],
                  KeyK: ["k", "K", "\u02da", "\uf8ff"],
                  KeyL: ["l", "L", "\xac", "\xd2"],
                  KeyM: ["m", "M", "\xb5", "\xc2"],
                  KeyN: ["n", "N", "\u02dc", "\u02dc"],
                  KeyO: ["o", "O", "\xf8", "\xd8"],
                  KeyP: ["p", "P", "\u03c0", "\u220f"],
                  KeyQ: ["q", "Q", "\u0153", "\u0152"],
                  KeyR: ["r", "R", "\xae", "\u2030"],
                  KeyS: ["s", "S", "\xdf", "\xcd"],
                  KeyT: ["t", "T", "\u2020", "\u02c7"],
                  KeyU: ["u", "U", "\xa8", "\xa8"],
                  KeyV: ["v", "V", "\u221a", "\u25ca"],
                  KeyW: ["w", "W", "\u2211", "\u201e"],
                  KeyX: ["x", "X", "\u2248", "\u02db"],
                  KeyY: ["y", "Y", "\xa5", "\xc1"],
                  KeyZ: ["z", "Z", "\u03a9", "\xb8"],
                  Digit1: ["1", "!", "\xa1", "\u2044"],
                  Digit2: ["2", "@", "\u2122", "\u20ac"],
                  Digit3: ["3", "#", "\xa3", "\u2039"],
                  Digit4: ["4", "$", "\xa2", "\u203a"],
                  Digit5: ["5", "%", "\u221e", "\ufb01"],
                  Digit6: ["6", "^", "\xa7", "\ufb02"],
                  Digit7: ["7", "&", "\xb6", "\u2021"],
                  Digit8: ["8", "*", "\u2022", "\xb0"],
                  Digit9: ["9", "(", "\xaa", "\xb7"],
                  Digit0: ["0", ")", "\xba", "\u201a"],
                  Space: [" ", " ", " ", " "],
                  Minus: ["-", "_", "\u2013", "\u2014"],
                  Equal: ["=", "+", "\u2260", "\xb1"],
                  BracketLeft: ["[", "{", "\u201c", "\u201d"],
                  BracketRight: ["]", "}", "\u2018", "\u2019"],
                  Backslash: ["\\", "|", "\xab", "\xbb"],
                  Semicolon: [";", ":", "\u2026", "\xda"],
                  Quote: ["'", '"', "\xe6", "\xc6"],
                  Backquote: ["`", "\u02dc", "`", "`"],
                  Comma: [",", "<", "\u2264", "\xaf"],
                  Period: [".", ">", "\u2265", "\u02d8"],
                  Slash: ["/", "?", "\xf7", "\xbf"],
                  NumpadDivide: ["/", "/", "/", "/"],
                  NumpadMultiply: ["*", "*", "*", "*"],
                  NumpadSubtract: ["-", "-", "-", "-"],
                  NumpadAdd: ["+", "+", "+", "+"],
                  Numpad1: ["1", "1", "1", "1"],
                  Numpad2: ["2", "2", "2", "2"],
                  Numpad3: ["3", "3", "3", "3"],
                  Numpad4: ["4", "4", "4", "4"],
                  Numpad5: ["5", "5", "5", "5"],
                  Numpad6: ["6", "6", "6", "6"],
                  Numpad7: ["7", "7", "7", "7"],
                  Numpad8: ["8", "8", "8", "8"],
                  Numpad9: ["9", "9", "9", "9"],
                  Numpad0: ["0", "0", "0", "0"],
                  NumpadDecimal: [".", ".", ".", "."],
                  IntlBackslash: ["\xa7", "\xb1", "\xa7", "\xb1"],
                  NumpadEqual: ["=", "=", "=", "="],
                  AudioVolumeUp: ["", "=", "", "="],
                },
              }
            : "windows" === Ol()
            ? {
                id: "windows.en-intl",
                displayName: "English (international)",
                platform: "windows",
                virtualLayout: "qwerty",
                locale: "en",
                score: 0,
                mapping: {
                  KeyA: ["a", "A", "\xe1", "\xc1"],
                  KeyB: ["b", "B", "", ""],
                  KeyC: ["c", "C", "\xa9", "\xa2"],
                  KeyD: ["d", "D", "\xf0", "\xd0"],
                  KeyE: ["e", "E", "\xe9", "\xc9"],
                  KeyF: ["f", "F", "", ""],
                  KeyG: ["g", "G", "", ""],
                  KeyH: ["h", "H", "", ""],
                  KeyI: ["i", "I", "\xed", "\xcd"],
                  KeyJ: ["j", "J", "", ""],
                  KeyK: ["k", "K", "", ""],
                  KeyL: ["l", "L", "\xf8", "\xd8"],
                  KeyM: ["m", "M", "\xb5", ""],
                  KeyN: ["n", "N", "\xf1", "\xd1"],
                  KeyO: ["o", "O", "\xf3", "\xd3"],
                  KeyP: ["p", "P", "\xf6", "\xd6"],
                  KeyQ: ["q", "Q", "\xe4", "\xc4"],
                  KeyR: ["r", "R", "\xae", ""],
                  KeyS: ["s", "S", "\xdf", "\xa7"],
                  KeyT: ["t", "T", "\xfe", "\xde"],
                  KeyU: ["u", "U", "\xfa", "\xda"],
                  KeyV: ["v", "V", "", ""],
                  KeyW: ["w", "W", "\xe5", "\xc5"],
                  KeyX: ["x", "X", "", ""],
                  KeyY: ["y", "Y", "\xfc", "\xdc"],
                  KeyZ: ["z", "Z", "\xe6", "\xc6"],
                  Digit1: ["1", "!", "\xa1", "\xb9"],
                  Digit2: ["2", "@", "\xb2", ""],
                  Digit3: ["3", "#", "\xb3", ""],
                  Digit4: ["4", "$", "\xa4", "\xa3"],
                  Digit5: ["5", "%", "\u20ac", ""],
                  Digit6: ["6", "^", "\xbc", ""],
                  Digit7: ["7", "&", "\xbd", ""],
                  Digit8: ["8", "*", "\xbe", ""],
                  Digit9: ["9", "(", "\u2018", ""],
                  Digit0: ["0", ")", "\u2019", ""],
                  Space: [" ", " ", "", ""],
                  Minus: ["-", "_", "\xa5", ""],
                  Equal: ["=", "+", "\xd7", "\xf7"],
                  BracketLeft: ["[", "{", "\xab", ""],
                  BracketRight: ["]", "}", "\xbb", ""],
                  Backslash: ["\\", "|", "\xac", "\xa6"],
                  Semicolon: [";", ":", "\xb6", "\xb0"],
                  Quote: ["'", '"', "\xb4", "\xa8"],
                  Backquote: ["`", "~", "", ""],
                  Comma: [",", "<", "\xe7", "\xc7"],
                  Period: [".", ">", "", ""],
                  Slash: ["/", "?", "\xbf", ""],
                  NumpadDivide: ["/", "/", "", ""],
                  NumpadMultiply: ["*", "*", "", ""],
                  NumpadSubtract: ["-", "-", "", ""],
                  NumpadAdd: ["+", "+", "", ""],
                  IntlBackslash: ["\\", "|", "", ""],
                },
              }
            : {
                id: "linux.en",
                displayName: "English",
                platform: "linux",
                virtualLayout: "qwerty",
                locale: "en",
                score: 0,
                mapping: {
                  KeyA: ["a", "A", "a", "A"],
                  KeyB: ["b", "B", "b", "B"],
                  KeyC: ["c", "C", "c", "C"],
                  KeyD: ["d", "D", "d", "D"],
                  KeyE: ["e", "E", "e", "E"],
                  KeyF: ["f", "F", "f", "F"],
                  KeyG: ["g", "G", "g", "G"],
                  KeyH: ["h", "H", "h", "H"],
                  KeyI: ["i", "I", "i", "I"],
                  KeyJ: ["j", "J", "j", "J"],
                  KeyK: ["k", "K", "k", "K"],
                  KeyL: ["l", "L", "l", "L"],
                  KeyM: ["m", "M", "m", "M"],
                  KeyN: ["n", "N", "n", "N"],
                  KeyO: ["o", "O", "o", "O"],
                  KeyP: ["p", "P", "p", "P"],
                  KeyQ: ["q", "Q", "q", "Q"],
                  KeyR: ["r", "R", "r", "R"],
                  KeyS: ["s", "S", "s", "S"],
                  KeyT: ["t", "T", "t", "T"],
                  KeyU: ["u", "U", "u", "U"],
                  KeyV: ["v", "V", "v", "V"],
                  KeyW: ["w", "W", "w", "W"],
                  KeyX: ["x", "X", "x", "X"],
                  KeyY: ["y", "Y", "y", "Y"],
                  KeyZ: ["z", "Z", "z", "Z"],
                  Digit1: ["1", "!", "1", "!"],
                  Digit2: ["2", "@", "2", "@"],
                  Digit3: ["3", "#", "3", "#"],
                  Digit4: ["4", "$", "4", "$"],
                  Digit5: ["5", "%", "5", "%"],
                  Digit6: ["6", "^", "6", "^"],
                  Digit7: ["7", "&", "7", "&"],
                  Digit8: ["8", "*", "8", "*"],
                  Digit9: ["9", "(", "9", "("],
                  Digit0: ["0", ")", "0", ")"],
                  Space: [" ", " ", " ", " "],
                  Minus: ["-", "_", "-", "_"],
                  Equal: ["=", "+", "=", "+"],
                  BracketLeft: ["[", "{", "[", "{"],
                  BracketRight: ["]", "}", "]", "}"],
                  Backslash: ["\\", "|", "\\", "|"],
                  Semicolon: [";", ":", ";", ":"],
                  Quote: ["'", '"', "'", '"'],
                  Backquote: ["`", "~", "`", "~"],
                  Comma: [",", "<", ",", "<"],
                  Period: [".", ">", ".", ">"],
                  Slash: ["/", "?", "/", "?"],
                  NumpadDivide: ["/", "/", "/", "/"],
                  NumpadMultiply: ["*", "*", "*", "*"],
                  NumpadSubtract: ["-", "-", "-", "-"],
                  NumpadAdd: ["+", "+", "+", "+"],
                  Numpad1: ["1", "1", "1", "1"],
                  Numpad2: ["2", "2", "2", "2"],
                  Numpad3: ["3", "3", "3", "3"],
                  Numpad4: ["4", "4", "4", "4"],
                  Numpad5: ["5", "5", "5", "5"],
                  Numpad6: ["6", "6", "6", "6"],
                  Numpad7: ["7", "7", "7", "7"],
                  Numpad8: ["8", "8", "8", "8"],
                  Numpad9: ["9", "9", "9", "9"],
                  Numpad0: ["0", "0", "0", "0"],
                  NumpadDecimal: ["", ".", "", "."],
                  IntlBackslash: ["<", ">", "|", "\xa6"],
                  NumpadEqual: ["=", "=", "=", "="],
                  NumpadComma: [".", ".", ".", "."],
                  NumpadParenLeft: ["(", "(", "(", "("],
                  NumpadParenRight: [")", ")", ")", ")"],
                },
              },
        $l = {
          enter: "[Enter]",
          escape: "[Escape]",
          backspace: "[Backspace]",
          tab: "[Tab]",
          space: "[Space]",
          pausebreak: "[Pause]",
          insert: "[Insert]",
          home: "[Home]",
          pageup: "[PageUp]",
          delete: "[Delete]",
          end: "[End]",
          pagedown: "[PageDown]",
          right: "[ArrowRight]",
          left: "[ArrowLeft]",
          down: "[ArrowDown]",
          up: "[ArrowUp]",
          numpad0: "[Numpad0]",
          numpad1: "[Numpad1]",
          numpad2: "[Numpad2]",
          numpad3: "[Numpad3]",
          numpad4: "[Numpad4]",
          numpad5: "[Numpad5]",
          numpad6: "[Numpad6]",
          numpad7: "[Numpad7]",
          numpad8: "[Numpad8]",
          numpad9: "[Numpad9]",
          numpad_divide: "[NumpadDivide]",
          numpad_multiply: "[NumpadMultiply]",
          numpad_subtract: "[NumpadSubtract]",
          numpad_add: "[NumpadAdd]",
          numpad_decimal: "[NumpadDecimal]",
          numpad_separator: "[NumpadComma]",
          capslock: "[Capslock]",
          f1: "[F1]",
          f2: "[F2]",
          f3: "[F3]",
          f4: "[F4]",
          f5: "[F5]",
          f6: "[F6]",
          f7: "[F7]",
          f8: "[F8]",
          f9: "[F9]",
          f10: "[F10]",
          f11: "[F11]",
          f12: "[F12]",
          f13: "[F13]",
          f14: "[F14]",
          f15: "[F15]",
          f16: "[F16]",
          f17: "[F17]",
          f18: "[F18]",
          f19: "[F19]",
        },
        Pl = [];
      function Ol() {
        switch (g()) {
          case "macos":
          case "ios":
            return "apple";
          case "windows":
            return "windows";
        }
        return "linux";
      }
      function Fl(e) {
        (!e.platform || e.platform === Ol()) && Pl.push(e);
      }
      function Nl() {
        return null != Tl ? Tl : Pl[0];
      }
      function ql(e) {
        let t = e;
        return (
          m(t) &&
            (t = t.length > 0 ? t[0] + "(" + t.slice(1).join("") + ")" : ""),
          t
        );
      }
      function Rl(e, t) {
        let n = [];
        if ("string" == typeof t) {
          let e = Jo[t];
          m(e) ? (n = e.slice()) : e && n.push(e);
        }
        let i = ql(t),
          r = new RegExp(
            "^" +
              i
                .replace("\\", "\\\\")
                .replace("|", "\\|")
                .replace("*", "\\*")
                .replace("$", "\\$")
                .replace("^", "\\^") +
              "([^*a-zA-Z]|$)"
          );
        for (let a of e) r.test(ql(a.command)) && n.push(a.key);
        return n.map(Il);
      }
      function Il(e) {
        var t;
        let n = /macos|ios|/.test(g()),
          i = e.split("+"),
          r = "";
        for (let a of i)
          !n && r && (r += '<span class="ML__shortcut-join">+</span>'),
            a.startsWith("[Key")
              ? (r += a.slice(4, 5))
              : a.startsWith("Key")
              ? (r += a.slice(3, 4))
              : a.startsWith("[Digit")
              ? (r += a.slice(6, 7))
              : a.startsWith("Digit")
              ? (r += a.slice(5, 6))
              : (r +=
                  null !=
                  (t = {
                    cmd: "\u2318",
                    meta: n ? "\u2318" : "command",
                    shift: n ? "\u21e7" : "shift",
                    alt: n ? "\u2325" : "alt",
                    ctrl: n ? "\u2303" : "control",
                    "\n": n ? "\u23ce" : "return",
                    "[return]": n ? "\u23ce" : "return",
                    "[enter]": n ? "\u2324" : "enter",
                    "[tab]": n ? "\u21e5" : "tab",
                    "[escape]": "esc",
                    "[backspace]": n ? "\u232b" : "backspace",
                    "[delete]": n ? "\u2326" : "del",
                    "[pageup]": n ? "\u21de" : "page up",
                    "[pagedown]": n ? "\u21df" : "page down",
                    "[home]": n ? "\u2912" : "home",
                    "[end]": n ? "\u2913" : "end",
                    "[space]": "space",
                    "[equal]": "=",
                    "[minus]": "-",
                    "[comma]": ",",
                    "[slash]": "/",
                    "[backslash]": "\\",
                    "[bracketleft]": "[",
                    "[bracketright]": "]",
                    semicolon: ";",
                    period: ".",
                    comma: ",",
                    minus: "-",
                    equal: "=",
                    quote: "'",
                    bracketLeft: "[",
                    bracketRight: "]",
                    backslash: "\\",
                    intlbackslash: "\\",
                    backquote: "`",
                    slash: "/",
                    numpadmultiply: "* &#128290;",
                    numpaddivide: "/ &#128290;",
                    numpadsubtract: "- &#128290;",
                    numpadadd: "+ &#128290;",
                    numpaddecimal: ". &#128290;",
                    numpadcomma: ", &#128290;",
                    help: "help",
                    left: "\u21e0",
                    up: "\u21e1",
                    right: "\u21e2",
                    down: "\u21e3",
                    "[arrowleft]": "\u21e0",
                    "[arrowup]": "\u21e1",
                    "[arrowright]": "\u21e2",
                    "[arrowdown]": "\u21e3",
                    "[digit0]": "0",
                    "[digit1]": "1",
                    "[digit2]": "2",
                    "[digit3]": "3",
                    "[digit4]": "4",
                    "[digit5]": "5",
                    "[digit6]": "6",
                    "[digit7]": "7",
                    "[digit8]": "8",
                    "[digit9]": "9",
                  }[a.toLowerCase()])
                    ? t
                    : a.toUpperCase());
        return r;
      }
      function Vl(e, t) {
        if (
          e.ifPlatform &&
          !/^!?(macos|windows|android|ios|chromeos|other)$/.test(e.ifPlatform)
        )
          throw new Error(
            `Unexpected platform "${e.ifPlatform}" for keybinding ${e.key}`
          );
        if (
          void 0 !== e.ifLayout &&
          (0 === t.score || !e.ifLayout.includes(t.id))
        )
          return;
        let n = Kl(e.key),
          i = e.ifPlatform;
        if (n.cmd) {
          if (i && "macos" !== i && "ios" !== i)
            throw new Error(
              'Unexpected "cmd" modifier with platform "' +
                i +
                '"\n"cmd" modifier can only be used with macOS or iOS platform.'
            );
          i || (i = "ios" === g() ? "ios" : "macos"),
            (n.win = !1),
            (n.cmd = !1),
            (n.meta = !0);
        }
        if (n.win) {
          if (i && "windows" !== i)
            throw new Error(
              'Unexpected "win" modifier with platform "' +
                i +
                '"\n"win" modifier can only be used with Windows platform.'
            );
          (i = "windows"), (n.win = !1), (n.cmd = !1), (n.meta = !0);
        }
        if (
          i &&
          !(function (e) {
            if (f()) {
              let t = g(),
                n = e.startsWith("!"),
                i = e.endsWith(t);
              if ((n && !i) || (!n && i)) return !0;
            }
            return "!other" !== e && "other" === e;
          })(i)
        )
          return;
        if (/^\[.+\]$/.test(n.key))
          return u(d({}, e), { ifPlatform: i, key: Dl(n) });
        let r = (function (e, t) {
          var n;
          let i = {
            shift: !1,
            alt: !1,
            cmd: !1,
            win: !1,
            meta: !1,
            ctrl: !1,
            key: "",
          };
          if (!e) return i;
          for (let [r, a] of Object.entries(t.mapping)) {
            if (a[0] === e) return (i.key = `[${r}]`), i;
            if (a[1] === e) return (i.shift = !0), (i.key = `[${r}]`), i;
            if (a[2] === e) return (i.alt = !0), (i.key = `[${r}]`), i;
            if (a[3] === e)
              return (i.shift = !0), (i.alt = !0), (i.key = `[${r}]`), i;
          }
          return (i.key = null != (n = $l[e]) ? n : ""), i;
        })(n.key, t);
        if (!r) throw new Error('Invalid keybinding key "' + e.key + '"');
        if ((r.shift && n.shift) || (r.alt && n.alt))
          throw new Error(
            `The keybinding ${e.key} (${jl(
              e.command
            )}) is conflicting with the key combination ${Dl(r)} using the ${
              t.displayName
            } keyboard layout`
          );
        return (
          (r.shift = r.shift || n.shift),
          (r.alt = r.alt || n.alt),
          (r.meta = n.meta),
          (r.ctrl = n.ctrl),
          u(d({}, e), { ifPlatform: i, key: Dl(r) })
        );
      }
      function jl(e) {
        if (Array.isArray(e)) {
          let t = [...e];
          return (
            t.shift() +
            "(" +
            t
              .map((e) => ("string" == typeof e ? `"${e}"` : e.toString()))
              .join(", ") +
            ")"
          );
        }
        return e;
      }
      function Hl(e) {
        return {
          value: e.model.getValue(),
          selectionIsCollapsed: e.model.selectionIsCollapsed,
          canUndo: e.canUndo(),
          canRedo: e.canRedo(),
          style: e.selectionStyle,
          mode: e.model.mode,
        };
      }
      function Wl(e) {
        window.mathVirtualKeyboard.visible &&
          window.mathVirtualKeyboard.update(Hl(e.mathfield)),
          !e.silenceNotifications &&
            ((e.silenceNotifications = !0),
            e.listeners.onSelectionDidChange(),
            (e.silenceNotifications = !1));
      }
      function Ul(e, t = {}) {
        if (e.silenceNotifications) return !0;
        e.silenceNotifications = !0;
        let n = e.listeners.onContentWillChange(t);
        return (e.silenceNotifications = !1), n;
      }
      function Jl(e, t) {
        var n;
        window.mathVirtualKeyboard.visible &&
          window.mathVirtualKeyboard.update(Hl(e.mathfield)),
          !e.silenceNotifications &&
            e.mathfield.host &&
            ((e.silenceNotifications = !0),
            e.mathfield.host.dispatchEvent(
              new InputEvent(
                "input",
                u(d({}, t), {
                  data: t.data ? t.data : null != (n = t.inputType) ? n : "",
                  bubbles: !0,
                  composed: !0,
                })
              )
            ),
            (e.silenceNotifications = !1));
      }
      Fl(Bl),
        Fl({
          id: "apple.french",
          locale: "fr",
          displayName: "French",
          platform: "apple",
          virtualLayout: "azerty",
          score: 0,
          mapping: {
            KeyA: ["q", "Q", "\u2021", "\u03a9"],
            KeyB: ["b", "B", "\xdf", "\u222b"],
            KeyC: ["c", "C", "\xa9", "\xa2"],
            KeyD: ["d", "D", "\u2202", "\u2206"],
            KeyE: ["e", "E", "\xea", "\xca"],
            KeyF: ["f", "F", "\u0192", "\xb7"],
            KeyG: ["g", "G", "\ufb01", "\ufb02"],
            KeyH: ["h", "H", "\xcc", "\xce"],
            KeyI: ["i", "I", "\xee", "\xef"],
            KeyJ: ["j", "J", "\xcf", "\xcd"],
            KeyK: ["k", "K", "\xc8", "\xcb"],
            KeyL: ["l", "L", "\xac", "|"],
            KeyM: [",", "?", "\u221e", "\xbf"],
            KeyN: ["n", "N", "~", "\u0131"],
            KeyO: ["o", "O", "\u0153", "\u0152"],
            KeyP: ["p", "P", "\u03c0", "\u220f"],
            KeyQ: ["a", "A", "\xe6", "\xc6"],
            KeyR: ["r", "R", "\xae", "\u201a"],
            KeyS: ["s", "S", "\xd2", "\u2211"],
            KeyT: ["t", "T", "\u2020", "\u2122"],
            KeyU: ["u", "U", "\xba", "\xaa"],
            KeyV: ["v", "V", "\u25ca", "\u221a"],
            KeyW: ["z", "Z", "\xc2", "\xc5"],
            KeyX: ["x", "X", "\u2248", "\u2044"],
            KeyY: ["y", "Y", "\xda", "\u0178"],
            KeyZ: ["w", "W", "\u2039", "\u203a"],
            Digit1: ["&", "1", "\uf8ff", "\xb4"],
            Digit2: ["\xe9", "2", "\xeb", "\u201e"],
            Digit3: ['"', "3", "\u201c", "\u201d"],
            Digit4: ["'", "4", "\u2018", "\u2019"],
            Digit5: ["(", "5", "{", "["],
            Digit6: ["\xa7", "6", "\xb6", "\xe5"],
            Digit7: ["\xe8", "7", "\xab", "\xbb"],
            Digit8: ["!", "8", "\xa1", "\xdb"],
            Digit9: ["\xe7", "9", "\xc7", "\xc1"],
            Digit0: ["\xe0", "0", "\xf8", "\xd8"],
            Space: [" ", " ", " ", " "],
            Minus: [")", "\xb0", "}", "]"],
            Equal: ["-", "_", "\u2014", "\u2013"],
            BracketLeft: ["^", "\xa8", "\xf4", "\xd4"],
            BracketRight: ["$", "*", "\u20ac", "\xa5"],
            Backslash: ["`", "\xa3", "@", "#"],
            Semicolon: ["m", "M", "\xb5", "\xd3"],
            Quote: ["\xf9", "%", "\xd9", "\u2030"],
            Backquote: ["<", ">", "\u2264", "\u2265"],
            Comma: [";", ".", "\u2026", "\u2022"],
            Period: [":", "/", "\xf7", "\\"],
            Slash: ["=", "+", "\u2260", "\xb1"],
            NumpadDivide: ["/", "/", "/", "/"],
            NumpadMultiply: ["*", "*", "*", "*"],
            NumpadSubtract: ["-", "-", "-", "-"],
            NumpadAdd: ["+", "+", "+", "+"],
            NumpadDecimal: [",", ".", ",", "."],
            IntlBackslash: ["@", "#", "\u2022", "\u0178"],
            NumpadEqual: ["=", "=", "=", "="],
          },
        }),
        Fl({
          id: "apple.spanish",
          locale: "es",
          displayName: "Spanish ISO",
          platform: "apple",
          virtualLayout: "qwerty",
          score: 0,
          mapping: {
            KeyA: ["a", "A", "\xe5", "\xc5"],
            KeyB: ["b", "B", "\xdf", ""],
            KeyC: ["c", "C", "\xa9", " "],
            KeyD: ["d", "D", "\u2202", "\u2206"],
            KeyE: ["e", "E", "\u20ac", "\u20ac"],
            KeyF: ["f", "F", "\u0192", "\ufb01"],
            KeyG: ["g", "G", "\uf8ff", "\ufb02"],
            KeyH: ["h", "H", "\u2122", " "],
            KeyI: ["i", "I", " ", " "],
            KeyJ: ["j", "J", "\xb6", "\xaf"],
            KeyK: ["k", "K", "\xa7", "\u02c7"],
            KeyL: ["l", "L", " ", "\u02d8"],
            KeyM: ["m", "M", "\xb5", "\u02da"],
            KeyN: ["n", "N", " ", "\u02d9"],
            KeyO: ["o", "O", "\xf8", "\xd8"],
            KeyP: ["p", "P", "\u03c0", "\u220f"],
            KeyQ: ["q", "Q", "\u0153", "\u0152"],
            KeyR: ["r", "R", "\xae", " "],
            KeyS: ["s", "S", "\u222b", " "],
            KeyT: ["t", "T", "\u2020", "\u2021"],
            KeyU: ["u", "U", " ", " "],
            KeyV: ["v", "V", "\u221a", "\u25ca"],
            KeyW: ["w", "W", "\xe6", "\xc6"],
            KeyX: ["x", "X", "\u2211", "\u203a"],
            KeyY: ["y", "Y", "\xa5", " "],
            KeyZ: ["z", "Z", "\u03a9", "\u2039"],
            Digit1: ["1", "!", "|", "\u0131"],
            Digit2: ["2", '"', "@", "\u02dd"],
            Digit3: ["3", "\xb7", "#", "\u2022"],
            Digit4: ["4", "$", "\xa2", "\xa3"],
            Digit5: ["5", "%", "\u221e", "\u2030"],
            Digit6: ["6", "&", "\xac", " "],
            Digit7: ["7", "/", "\xf7", "\u2044"],
            Digit8: ["8", "(", "\u201c", "\u2018"],
            Digit9: ["9", ")", "\u201d", "\u2019"],
            Digit0: ["0", "=", "\u2260", "\u2248"],
            Space: [" ", " ", " ", " "],
            Minus: ["'", "?", "\xb4", "\xb8"],
            Equal: ["\xa1", "\xbf", "\u201a", "\u02db"],
            BracketLeft: ["`", "^", "[", "\u02c6"],
            BracketRight: ["+", "*", "]", "\xb1"],
            Backslash: ["\xe7", "\xc7", "}", "\xbb"],
            Semicolon: ["\xf1", "\xd1", "~", "\u02dc"],
            Quote: ["\xb4", "\xa8", "{", "\xab"],
            Backquote: ["<", ">", "\u2264", "\u2265"],
            Comma: [",", ";", "\u201e", ""],
            Period: [".", ":", "\u2026", "\u2026"],
            Slash: ["-", "_", "\u2013", "\u2014"],
            NumpadDivide: ["/", "/", "/", "/"],
            NumpadMultiply: ["*", "*", "*", "*"],
            NumpadSubtract: ["-", "-", "-", "-"],
            NumpadAdd: ["+", "+", "+", "+"],
            Numpad1: ["1", "1", "1", "1"],
            Numpad2: ["2", "2", "2", "2"],
            Numpad3: ["3", "3", "3", "3"],
            Numpad4: ["4", "4", "4", "4"],
            Numpad5: ["5", "5", "5", "5"],
            Numpad6: ["6", "6", "6", "6"],
            Numpad7: ["7", "7", "7", "7"],
            Numpad8: ["8", "8", "8", "8"],
            Numpad9: ["9", "9", "9", "9"],
            Numpad0: ["0", "0", "0", "0"],
            NumpadDecimal: [",", ",", ",", ","],
            IntlBackslash: ["\xba", "\xaa", "\\", "\xb0"],
          },
        }),
        Fl({
          id: "windows.spanish",
          locale: "es",
          displayName: "Spanish",
          platform: "windows",
          virtualLayout: "qwerty",
          score: 0,
          mapping: {
            KeyA: ["a", "A", "", ""],
            KeyB: ["b", "B", "", ""],
            KeyC: ["c", "C", "", ""],
            KeyD: ["d", "D", "", ""],
            KeyE: ["e", "E", "\u20ac", ""],
            KeyF: ["f", "F", "", ""],
            KeyG: ["g", "G", "", ""],
            KeyH: ["h", "H", "", ""],
            KeyI: ["i", "I", "", ""],
            KeyJ: ["j", "J", "", ""],
            KeyK: ["k", "K", "", ""],
            KeyL: ["l", "L", "", ""],
            KeyM: ["m", "M", "", ""],
            KeyN: ["n", "N", "", ""],
            KeyO: ["o", "O", "", ""],
            KeyP: ["p", "P", "", ""],
            KeyQ: ["q", "Q", "", ""],
            KeyR: ["r", "R", "", ""],
            KeyS: ["s", "S", "", ""],
            KeyT: ["t", "T", "", ""],
            KeyU: ["u", "U", "", ""],
            KeyV: ["v", "V", "", ""],
            KeyW: ["w", "W", "", ""],
            KeyX: ["x", "X", "", ""],
            KeyY: ["y", "Y", "", ""],
            KeyZ: ["z", "Z", "", ""],
            Digit1: ["1", "!", "|", ""],
            Digit2: ["2", '"', "@", ""],
            Digit3: ["3", "\xb7", "#", ""],
            Digit4: ["4", "$", "~", ""],
            Digit5: ["5", "%", "\u20ac", ""],
            Digit6: ["6", "&", "\xac", ""],
            Digit7: ["7", "/", "", ""],
            Digit8: ["8", "(", "", ""],
            Digit9: ["9", ")", "", ""],
            Digit0: ["0", "=", "", ""],
            Space: [" ", " ", "", ""],
            Minus: ["'", "?", "", ""],
            Equal: ["\xa1", "\xbf", "", ""],
            BracketLeft: ["`", "^", "[", ""],
            BracketRight: ["+", "*", "]", ""],
            Backslash: ["\xe7", "\xc7", "}", ""],
            Semicolon: ["\xf1", "\xd1", "", ""],
            Quote: ["\xb4", "\xa8", "{", ""],
            Backquote: ["\xba", "\xaa", "\\", ""],
            Comma: [",", ";", "", ""],
            Period: [".", ":", "", ""],
            Slash: ["-", "_", "", ""],
            NumpadDivide: ["/", "/", "", ""],
            NumpadMultiply: ["*", "*", "", ""],
            NumpadSubtract: ["-", "-", "", ""],
            NumpadAdd: ["+", "+", "", ""],
            IntlBackslash: ["<", ">", "", ""],
          },
        }),
        Fl({
          id: "linux.spanish",
          locale: "es",
          displayName: "Spanish",
          platform: "linux",
          virtualLayout: "qwerty",
          score: 0,
          mapping: {
            KeyA: ["a", "A", "\xe6", "\xc6"],
            KeyB: ["b", "B", "\u201d", "\u2019"],
            KeyC: ["c", "C", "\xa2", "\xa9"],
            KeyD: ["d", "D", "\xf0", "\xd0"],
            KeyE: ["e", "E", "\u20ac", "\xa2"],
            KeyF: ["f", "F", "\u0111", "\xaa"],
            KeyG: ["g", "G", "\u014b", "\u014a"],
            KeyH: ["h", "H", "\u0127", "\u0126"],
            KeyI: ["i", "I", "\u2192", "\u0131"],
            KeyJ: ["j", "J", "\u0309", "\u031b"],
            KeyK: ["k", "K", "\u0138", "&"],
            KeyL: ["l", "L", "\u0142", "\u0141"],
            KeyM: ["m", "M", "\xb5", "\xba"],
            KeyN: ["n", "N", "n", "N"],
            KeyO: ["o", "O", "\xf8", "\xd8"],
            KeyP: ["p", "P", "\xfe", "\xde"],
            KeyQ: ["q", "Q", "@", "\u03a9"],
            KeyR: ["r", "R", "\xb6", "\xae"],
            KeyS: ["s", "S", "\xdf", "\xa7"],
            KeyT: ["t", "T", "\u0167", "\u0166"],
            KeyU: ["u", "U", "\u2193", "\u2191"],
            KeyV: ["v", "V", "\u201c", "\u2018"],
            KeyW: ["w", "W", "\u0142", "\u0141"],
            KeyX: ["x", "X", "\xbb", ">"],
            KeyY: ["y", "Y", "\u2190", "\xa5"],
            KeyZ: ["z", "Z", "\xab", "<"],
            Digit1: ["1", "!", "|", "\xa1"],
            Digit2: ["2", '"', "@", "\u215b"],
            Digit3: ["3", "\xb7", "#", "\xa3"],
            Digit4: ["4", "$", "~", "$"],
            Digit5: ["5", "%", "\xbd", "\u215c"],
            Digit6: ["6", "&", "\xac", "\u215d"],
            Digit7: ["7", "/", "{", "\u215e"],
            Digit8: ["8", "(", "[", "\u2122"],
            Digit9: ["9", ")", "]", "\xb1"],
            Digit0: ["0", "=", "}", "\xb0"],
            Enter: ["\r", "\r", "\r", "\r"],
            Escape: ["\x1b", "\x1b", "\x1b", "\x1b"],
            Backspace: ["\b", "\b", "\b", "\b"],
            Tab: ["\t", "", "\t", ""],
            Space: [" ", " ", " ", " "],
            Minus: ["'", "?", "\\", "\xbf"],
            Equal: ["\xa1", "\xbf", "\u0303", "~"],
            BracketLeft: ["\u0300", "\u0302", "[", "\u030a"],
            BracketRight: ["+", "*", "]", "\u0304"],
            Backslash: ["\xe7", "\xc7", "}", "\u0306"],
            Semicolon: ["\xf1", "\xd1", "~", "\u030b"],
            Quote: ["\u0301", "\u0308", "{", "{"],
            Backquote: ["\xba", "\xaa", "\\", "\\"],
            Comma: [",", ";", "\u2500", "\xd7"],
            Period: [".", ":", "\xb7", "\xf7"],
            Slash: ["-", "_", "\u0323", "\u0307"],
            NumpadDivide: ["/", "/", "/", "/"],
            NumpadMultiply: ["*", "*", "*", "*"],
            NumpadSubtract: ["-", "-", "-", "-"],
            NumpadAdd: ["+", "+", "+", "+"],
            NumpadEnter: ["\r", "\r", "\r", "\r"],
            Numpad1: ["", "1", "", "1"],
            Numpad2: ["", "2", "", "2"],
            Numpad3: ["", "3", "", "3"],
            Numpad4: ["", "4", "", "4"],
            Numpad5: ["", "5", "", "5"],
            Numpad6: ["", "6", "", "6"],
            Numpad7: ["", "7", "", "7"],
            Numpad8: ["", "8", "", "8"],
            Numpad9: ["", "9", "", "9"],
            Numpad0: ["", "0", "", "0"],
            NumpadDecimal: ["", ".", "", "."],
            IntlBackslash: ["<", ">", "|", "\xa6"],
            NumpadEqual: ["=", "=", "=", "="],
            NumpadComma: [".", ".", ".", "."],
            NumpadParenLeft: ["(", "(", "(", "("],
            NumpadParenRight: [")", ")", ")", ")"],
          },
        }),
        Fl({
          id: "linux.french",
          locale: "fr",
          displayName: "French",
          virtualLayout: "azerty",
          platform: "linux",
          score: 0,
          mapping: {
            KeyA: ["q", "Q", "@", "\u03a9"],
            KeyB: ["b", "B", "\u201d", "\u2019"],
            KeyC: ["c", "C", "\xa2", "\xa9"],
            KeyD: ["d", "D", "\xf0", "\xd0"],
            KeyE: ["e", "E", "\u20ac", "\xa2"],
            KeyF: ["f", "F", "\u0111", "\xaa"],
            KeyG: ["g", "G", "\u014b", "\u014a"],
            KeyH: ["h", "H", "\u0127", "\u0126"],
            KeyI: ["i", "I", "\u2192", "\u0131"],
            KeyJ: ["j", "J", "\u0309", "\u031b"],
            KeyK: ["k", "K", "\u0138", "&"],
            KeyL: ["l", "L", "\u0142", "\u0141"],
            KeyM: [",", "?", "\u0301", "\u030b"],
            KeyN: ["n", "N", "n", "N"],
            KeyO: ["o", "O", "\xf8", "\xd8"],
            KeyP: ["p", "P", "\xfe", "\xde"],
            KeyQ: ["a", "A", "\xe6", "\xc6"],
            KeyR: ["r", "R", "\xb6", "\xae"],
            KeyS: ["s", "S", "\xdf", "\xa7"],
            KeyT: ["t", "T", "\u0167", "\u0166"],
            KeyU: ["u", "U", "\u2193", "\u2191"],
            KeyV: ["v", "V", "\u201c", "\u2018"],
            KeyW: ["z", "Z", "\xab", "<"],
            KeyX: ["x", "X", "\xbb", ">"],
            KeyY: ["y", "Y", "\u2190", "\xa5"],
            KeyZ: ["w", "W", "\u0142", "\u0141"],
            Digit1: ["&", "1", "\xb9", "\xa1"],
            Digit2: ["\xe9", "2", "~", "\u215b"],
            Digit3: ['"', "3", "#", "\xa3"],
            Digit4: ["'", "4", "{", "$"],
            Digit5: ["(", "5", "[", "\u215c"],
            Digit6: ["-", "6", "|", "\u215d"],
            Digit7: ["\xe8", "7", "`", "\u215e"],
            Digit8: ["_", "8", "\\", "\u2122"],
            Digit9: ["\xe7", "9", "^", "\xb1"],
            Digit0: ["\xe0", "0", "@", "\xb0"],
            Enter: ["\r", "\r", "\r", "\r"],
            Escape: ["\x1b", "\x1b", "\x1b", "\x1b"],
            Backspace: ["\b", "\b", "\b", "\b"],
            Tab: ["\t", "", "\t", ""],
            Space: [" ", " ", " ", " "],
            Minus: [")", "\xb0", "]", "\xbf"],
            Equal: ["=", "+", "}", "\u0328"],
            BracketLeft: ["\u0302", "\u0308", "\u0308", "\u030a"],
            BracketRight: ["$", "\xa3", "\xa4", "\u0304"],
            Backslash: ["*", "\xb5", "\u0300", "\u0306"],
            Semicolon: ["m", "M", "\xb5", "\xba"],
            Quote: ["\xf9", "%", "\u0302", "\u030c"],
            Backquote: ["\xb2", "~", "\xac", "\xac"],
            Comma: [";", ".", "\u2500", "\xd7"],
            Period: [":", "/", "\xb7", "\xf7"],
            Slash: ["!", "\xa7", "\u0323", "\u0307"],
            NumpadMultiply: ["*", "*", "*", "*"],
            NumpadSubtract: ["-", "-", "-", "-"],
            NumpadAdd: ["+", "+", "+", "+"],
            NumpadDecimal: ["", ".", "", "."],
            IntlBackslash: ["<", ">", "|", "\xa6"],
          },
        }),
        Fl({
          id: "windows.french",
          locale: "fr",
          displayName: "French",
          virtualLayout: "azerty",
          platform: "windows",
          score: 0,
          mapping: {
            KeyA: ["q", "Q", "", ""],
            KeyB: ["b", "B", "", ""],
            KeyC: ["c", "C", "", ""],
            KeyD: ["d", "D", "", ""],
            KeyE: ["e", "E", "\u20ac", ""],
            KeyF: ["f", "F", "", ""],
            KeyG: ["g", "G", "", ""],
            KeyH: ["h", "H", "", ""],
            KeyI: ["i", "I", "", ""],
            KeyJ: ["j", "J", "", ""],
            KeyK: ["k", "K", "", ""],
            KeyL: ["l", "L", "", ""],
            KeyM: [",", "?", "", ""],
            KeyN: ["n", "N", "", ""],
            KeyO: ["o", "O", "", ""],
            KeyP: ["p", "P", "", ""],
            KeyQ: ["a", "A", "", ""],
            KeyR: ["r", "R", "", ""],
            KeyS: ["s", "S", "", ""],
            KeyT: ["t", "T", "", ""],
            KeyU: ["u", "U", "", ""],
            KeyV: ["v", "V", "", ""],
            KeyW: ["z", "Z", "", ""],
            KeyX: ["x", "X", "", ""],
            KeyY: ["y", "Y", "", ""],
            KeyZ: ["w", "W", "", ""],
            Digit1: ["&", "1", "", ""],
            Digit2: ["\xe9", "2", "~", ""],
            Digit3: ['"', "3", "#", ""],
            Digit4: ["'", "4", "{", ""],
            Digit5: ["(", "5", "[", ""],
            Digit6: ["-", "6", "|", ""],
            Digit7: ["\xe8", "7", "`", ""],
            Digit8: ["_", "8", "\\", ""],
            Digit9: ["\xe7", "9", "^", ""],
            Digit0: ["\xe0", "0", "@", ""],
            Space: [" ", " ", "", ""],
            Minus: [")", "\xb0", "]", ""],
            Equal: ["=", "+", "}", ""],
            BracketLeft: ["^", "\xa8", "", ""],
            BracketRight: ["$", "\xa3", "\xa4", ""],
            Backslash: ["*", "\xb5", "", ""],
            Semicolon: ["m", "M", "", ""],
            Quote: ["\xf9", "%", "", ""],
            Backquote: ["\xb2", "", "", ""],
            Comma: [";", ".", "", ""],
            Period: [":", "/", "", ""],
            Slash: ["!", "\xa7", "", ""],
            NumpadDivide: ["/", "/", "", ""],
            NumpadMultiply: ["*", "*", "", ""],
            NumpadSubtract: ["-", "-", "", ""],
            NumpadAdd: ["+", "+", "", ""],
            IntlBackslash: ["<", ">", "", ""],
          },
        }),
        Fl({
          id: "windows.german",
          locale: "de",
          displayName: "German",
          platform: "windows",
          virtualLayout: "qwertz",
          score: 0,
          mapping: {
            KeyA: ["a", "A", "", ""],
            KeyB: ["b", "B", "", ""],
            KeyC: ["c", "C", "", ""],
            KeyD: ["d", "D", "", ""],
            KeyE: ["e", "E", "\u20ac", ""],
            KeyF: ["f", "F", "", ""],
            KeyG: ["g", "G", "", ""],
            KeyH: ["h", "H", "", ""],
            KeyI: ["i", "I", "", ""],
            KeyJ: ["j", "J", "", ""],
            KeyK: ["k", "K", "", ""],
            KeyL: ["l", "L", "", ""],
            KeyM: ["m", "M", "\xb5", ""],
            KeyN: ["n", "N", "", ""],
            KeyO: ["o", "O", "", ""],
            KeyP: ["p", "P", "", ""],
            KeyQ: ["q", "Q", "@", ""],
            KeyR: ["r", "R", "", ""],
            KeyS: ["s", "S", "", ""],
            KeyT: ["t", "T", "", ""],
            KeyU: ["u", "U", "", ""],
            KeyV: ["v", "V", "", ""],
            KeyW: ["w", "W", "", ""],
            KeyX: ["x", "X", "", ""],
            KeyY: ["z", "Z", "", ""],
            KeyZ: ["y", "Y", "", ""],
            Digit1: ["1", "!", "", ""],
            Digit2: ["2", '"', "\xb2", ""],
            Digit3: ["3", "\xa7", "\xb3", ""],
            Digit4: ["4", "$", "", ""],
            Digit5: ["5", "%", "", ""],
            Digit6: ["6", "&", "", ""],
            Digit7: ["7", "/", "{", ""],
            Digit8: ["8", "(", "[", ""],
            Digit9: ["9", ")", "]", ""],
            Digit0: ["0", "=", "}", ""],
            Space: [" ", " ", "", ""],
            Minus: ["\xdf", "?", "\\", "\u1e9e"],
            Equal: ["\xb4", "`", "", ""],
            BracketLeft: ["\xfc", "\xdc", "", ""],
            BracketRight: ["+", "*", "~", ""],
            Backslash: ["#", "'", "", ""],
            Semicolon: ["\xf6", "\xd6", "", ""],
            Quote: ["\xe4", "\xc4", "", ""],
            Backquote: ["^", "\xb0", "", ""],
            Comma: [",", ";", "", ""],
            Period: [".", ":", "", ""],
            Slash: ["-", "_", "", ""],
            NumpadDivide: ["/", "/", "", ""],
            NumpadMultiply: ["*", "*", "", ""],
            NumpadSubtract: ["-", "-", "", ""],
            NumpadAdd: ["+", "+", "", ""],
            IntlBackslash: ["<", ">", "|", ""],
          },
        }),
        Fl({
          id: "apple.german",
          locale: "de",
          displayName: "German",
          virtualLayout: "qwertz",
          platform: "apple",
          score: 0,
          mapping: {
            KeyA: ["a", "A", "\xe5", "\xc5"],
            KeyB: ["b", "B", "\u222b", "\u2039"],
            KeyC: ["c", "C", "\xe7", "\xc7"],
            KeyD: ["d", "D", "\u2202", "\u2122"],
            KeyE: ["e", "E", "\u20ac", "\u2030"],
            KeyF: ["f", "F", "\u0192", "\xcf"],
            KeyG: ["g", "G", "\xa9", "\xcc"],
            KeyH: ["h", "H", "\xaa", "\xd3"],
            KeyI: ["i", "I", "\u2044", "\xdb"],
            KeyJ: ["j", "J", "\xba", "\u0131"],
            KeyK: ["k", "K", "\u2206", "\u02c6"],
            KeyL: ["l", "L", "@", "\ufb02"],
            KeyM: ["m", "M", "\xb5", "\u02d8"],
            KeyN: ["n", "N", "~", "\u203a"],
            KeyO: ["o", "O", "\xf8", "\xd8"],
            KeyP: ["p", "P", "\u03c0", "\u220f"],
            KeyQ: ["q", "Q", "\xab", "\xbb"],
            KeyR: ["r", "R", "\xae", "\xb8"],
            KeyS: ["s", "S", "\u201a", "\xcd"],
            KeyT: ["t", "T", "\u2020", "\u02dd"],
            KeyU: ["u", "U", "\xa8", "\xc1"],
            KeyV: ["v", "V", "\u221a", "\u25ca"],
            KeyW: ["w", "W", "\u2211", "\u201e"],
            KeyX: ["x", "X", "\u2248", "\xd9"],
            KeyY: ["z", "Z", "\u03a9", "\u02c7"],
            KeyZ: ["y", "Y", "\xa5", "\u2021"],
            Digit1: ["1", "!", "\xa1", "\xac"],
            Digit2: ["2", '"', "\u201c", "\u201d"],
            Digit3: ["3", "\xa7", "\xb6", "#"],
            Digit4: ["4", "$", "\xa2", "\xa3"],
            Digit5: ["5", "%", "[", "\ufb01"],
            Digit6: ["6", "&", "]", "^"],
            Digit7: ["7", "/", "|", "\\"],
            Digit8: ["8", "(", "{", "\u02dc"],
            Digit9: ["9", ")", "}", "\xb7"],
            Digit0: ["0", "=", "\u2260", "\xaf"],
            Space: [" ", " ", " ", " "],
            Minus: ["\xdf", "?", "\xbf", "\u02d9"],
            Equal: ["\xb4", "`", "'", "\u02da"],
            BracketLeft: ["\xfc", "\xdc", "\u2022", "\xb0"],
            BracketRight: ["+", "*", "\xb1", "\uf8ff"],
            Backslash: ["#", "'", "\u2018", "\u2019"],
            Semicolon: ["\xf6", "\xd6", "\u0153", "\u0152"],
            Quote: ["\xe4", "\xc4", "\xe6", "\xc6"],
            Backquote: ["<", ">", "\u2264", "\u2265"],
            Comma: [",", ";", "\u221e", "\u02db"],
            Period: [".", ":", "\u2026", "\xf7"],
            Slash: ["-", "_", "\u2013", "\u2014"],
            NumpadDivide: ["/", "/", "/", "/"],
            NumpadMultiply: ["*", "*", "*", "*"],
            NumpadSubtract: ["-", "-", "-", "-"],
            NumpadAdd: ["+", "+", "+", "+"],
            NumpadDecimal: [",", ",", ".", "."],
            IntlBackslash: ["^", "\xb0", "\u201e", "\u201c"],
            NumpadEqual: ["=", "=", "=", "="],
          },
        }),
        Fl({
          id: "dvorak",
          locale: "en",
          displayName: "Dvorak",
          virtualLayout: "dvorak",
          platform: "",
          score: 0,
          mapping: {
            KeyA: ["a", "A", "\xe5", "\xc5"],
            KeyB: ["x", "X", "\u2248", "\u02db"],
            KeyC: ["j", "J", "\u2206", "\xd4"],
            KeyD: ["e", "E", "\xb4", "\xb4"],
            KeyE: [".", ">", "\u2265", "\u02d8"],
            KeyF: ["u", "U", "\xa8", "\xa8"],
            KeyG: ["i", "I", "\u02c6", "\u02c6"],
            KeyH: ["d", "D", "\u2202", "\xce"],
            KeyI: ["c", "C", "\xe7", "\xc7"],
            KeyJ: ["h", "H", "\u02d9", "\xd3"],
            KeyK: ["t", "T", "\u2020", "\u02c7"],
            KeyL: ["n", "N", "\u02dc", "\u02dc"],
            KeyM: ["m", "M", "\xb5", "\xc2"],
            KeyN: ["b", "B", "\u222b", "\u0131"],
            KeyO: ["r", "R", "\xae", "\u2030"],
            KeyP: ["l", "L", "\xac", "\xd2"],
            KeyQ: ["'", '"', "\xe6", "\xc6"],
            KeyR: ["p", "P", "\u03c0", "\u220f"],
            KeyS: ["o", "O", "\xf8", "\xd8"],
            KeyT: ["y", "Y", "\xa5", "\xc1"],
            KeyU: ["g", "G", "\xa9", "\u02dd"],
            KeyV: ["k", "K", "\u02da", "\uf8ff"],
            KeyW: [",", "<", "\u2264", "\xaf"],
            KeyX: ["q", "Q", "\u0153", "\u0152"],
            KeyY: ["f", "F", "\u0192", "\xcf"],
            KeyZ: [";", ":", "\u2026", "\xda"],
            Digit1: ["1", "!", "\xa1", "\u2044"],
            Digit2: ["2", "@", "\u2122", "\u20ac"],
            Digit3: ["3", "#", "\xa3", "\u2039"],
            Digit4: ["4", "$", "\xa2", "\u203a"],
            Digit5: ["5", "%", "\u221e", "\ufb01"],
            Digit6: ["6", "^", "\xa7", "\ufb02"],
            Digit7: ["7", "&", "\xb6", "\u2021"],
            Digit8: ["8", "*", "\u2022", "\xb0"],
            Digit9: ["9", "(", "\xaa", "\xb7"],
            Digit0: ["0", ")", "\xba", "\u201a"],
            Space: [" ", " ", " ", " "],
            Minus: ["[", "{", "\u201c", "\u201d"],
            Equal: ["]", "}", "\u2018", "\u2019"],
            BracketLeft: ["/", "?", "\xf7", "\xbf"],
            BracketRight: ["=", "+", "\u2260", "\xb1"],
            Backslash: ["\\", "|", "\xab", "\xbb"],
            Semicolon: ["s", "S", "\xdf", "\xcd"],
            Quote: ["-", "_", "\u2013", "\u2014"],
            Backquote: ["`", "~", "`", "`"],
            Comma: ["w", "W", "\u2211", "\u201e"],
            Period: ["v", "V", "\u221a", "\u25ca"],
            Slash: ["z", "Z", "\u03a9", "\xb8"],
            NumpadDivide: ["/", "/", "/", "/"],
            NumpadMultiply: ["*", "*", "*", "*"],
            NumpadSubtract: ["-", "-", "-", "-"],
            NumpadAdd: ["+", "+", "+", "+"],
            Numpad1: ["1", "1", "1", "1"],
            Numpad2: ["2", "2", "2", "2"],
            Numpad3: ["3", "3", "3", "3"],
            Numpad4: ["4", "4", "4", "4"],
            Numpad5: ["5", "5", "5", "5"],
            Numpad6: ["6", "6", "6", "6"],
            Numpad7: ["7", "7", "7", "7"],
            Numpad8: ["8", "8", "8", "8"],
            Numpad9: ["9", "9", "9", "9"],
            Numpad0: ["0", "0", "0", "0"],
            NumpadDecimal: [".", ".", ".", "."],
            IntlBackslash: ["\xa7", "\xb1", "\xa7", "\xb1"],
            NumpadEqual: ["=", "=", "=", "="],
            AudioVolumeUp: ["", "=", "", "="],
          },
        });
      function Xl(e) {
        var t, n;
        let i = e.atoms.find((e) => "latexgroup" === e.type);
        return i &&
          null !=
            (n =
              null == (t = i.body)
                ? void 0
                : t.filter((e) => "latex" === e.type))
          ? n
          : [];
      }
      function Gl(e, t) {
        var n;
        let i = 0,
          r = !1,
          a = Number.isFinite(null == t ? void 0 : t.before)
            ? null != (n = null == t ? void 0 : t.before)
              ? n
              : 0
            : e.lastOffset;
        for (; i <= a && !r; ) {
          let t = e.at(i);
          (r = t instanceof ol && t.isSuggestion), r || i++;
        }
        if (!r) return [void 0, void 0];
        let o = i,
          s = !1;
        for (; o <= a && !s; ) {
          let t = e.at(o);
          (s = !(t instanceof ol && t.isSuggestion)), s || o++;
        }
        return [i - 1, o - 1];
      }
      function Zl(e) {
        let t = Xl(e.model).filter((e) => e.isSuggestion);
        if (0 !== t.length) {
          e.model.position = e.model.offsetOf(t[0].leftSibling);
          for (let e of t) e.parent.removeChild(e);
        }
      }
      function Yl(e, t) {
        var n;
        let { model: i } = e;
        Zl(e);
        for (let d of Xl(i)) d.isError = !1;
        if (!i.selectionIsCollapsed || "off" === e.options.popoverPolicy)
          return void oc(e);
        let r = [],
          a = i.at(i.position);
        for (; a && a instanceof ol && /^[a-zA-Z\*]$/.test(a.value); )
          a = a.leftSibling;
        if (a && a instanceof ol && "\\" === a.value)
          for (
            r.push(a), a = a.rightSibling;
            a && a instanceof ol && /^[a-zA-Z\*]$/.test(a.value);

          )
            r.push(a), (a = a.rightSibling);
        let o = r.map((e) => e.value).join(""),
          s = (function (e, t) {
            var n, i;
            if (0 === t.length || "\\" === t || !t.startsWith("\\")) return [];
            let r = [];
            for (let o in N)
              o.startsWith(t) &&
                !N[o].infix &&
                r.push({
                  match: o,
                  frequency: null != (n = N[o].frequency) ? n : 0,
                });
            for (let o in O)
              o.startsWith(t) &&
                r.push({
                  match: o,
                  frequency: null != (i = O[o].frequency) ? i : 0,
                });
            let a = t.substring(1);
            for (let o of Object.keys(e.options.macros))
              o.startsWith(a) && r.push({ match: "\\" + o, frequency: 0 });
            return (
              r.sort((e, t) => {
                var n, i;
                return e.frequency === t.frequency
                  ? e.match.length === t.match.length
                    ? e.match < t.match
                      ? -1
                      : 1
                    : e.match.length - t.match.length
                  : (null != (n = t.frequency) ? n : 0) -
                      (null != (i = e.frequency) ? i : 0);
              }),
              r.map((e) => e.match)
            );
          })(e, o);
        if (0 === s.length) {
          if (/^\\[a-zA-Z\*]+$/.test(o)) for (let e of r) e.isError = !0;
          return void oc(e);
        }
        let l = null != (n = null == t ? void 0 : t.atIndex) ? n : 0;
        e.suggestionIndex = l < 0 ? s.length - 1 : l % s.length;
        let c = s[e.suggestionIndex];
        if (c !== o) {
          let t = r[r.length - 1];
          t.parent.addChildrenAfter(
            [...c.slice(o.length - c.length)].map(
              (e) => new ol(e, { isSuggestion: !0 })
            ),
            t
          ),
            gc(e, { interactive: !0 });
        }
        !(function (e, t) {
          var n;
          if (0 === t.length) return void oc(e);
          let i = "";
          for (let [a, o] of t.entries()) {
            let t = o,
              n = ic(e, o),
              r = Rl(e.keybindings, t).join("<br>");
            (i += `<li role="button" data-command="${t}" ${
              a === e.suggestionIndex ? "class=ML__popover__current" : ""
            }><span class="ML__popover__latex">${t}</span><span class="ML__popover__command">${n}</span>`),
              r && (i += `<span class="ML__popover__keybinding">${r}</span>`),
              (i += "</li>");
          }
          let r = (function (e, t) {
            let n = document.getElementById("mathlive-suggestion-popover");
            return (
              n ||
                ((n = tc("mathlive-suggestion-popover")),
                ds("suggestion-popover"),
                ds("core"),
                n.addEventListener("pointerdown", (e) => e.preventDefault()),
                n.addEventListener("click", (t) => {
                  let n = t.target;
                  for (; n && !n.dataset.command; ) n = n.parentElement;
                  n &&
                    (ec(e, "reject"),
                    Wo.insert(e.model, n.dataset.command, {
                      selectionMode: "placeholder",
                      format: "latex",
                      mode: "math",
                    }),
                    (e.dirty = !0),
                    e.focus());
                })),
              (n.innerHTML = window.MathfieldElement.createHTML(t)),
              n
            );
          })(e, `<ul>${i}</ul>`);
          rc() &&
            (null == (n = r.querySelector(".ML__popover__current")) ||
              n.scrollIntoView({ block: "nearest", inline: "nearest" })),
            setTimeout(() => {
              var t;
              r &&
                !rc() &&
                (r.classList.add("is-visible"),
                ac(e),
                null == (t = r.querySelector(".ML__popover__current")) ||
                  t.scrollIntoView({ block: "nearest", inline: "nearest" }));
            }, 32);
        })(e, s);
      }
      function Ql(e) {
        let [t, n] = Gl(e, { before: e.position });
        if (void 0 === t || void 0 === n) return !1;
        let i = !1;
        return (
          e.getAtoms([t, n]).forEach((e) => {
            e.isSuggestion && ((e.isSuggestion = !1), (i = !0));
          }),
          i
        );
      }
      function ec(e, t = "accept", n) {
        var i, r;
        oc(e);
        let a = (function (e) {
          return e.atoms.find((e) => "latexgroup" === e.type);
        })(e.model);
        if (!a) return !1;
        if ("accept-suggestion" === t) {
          let t = Xl(e.model).filter((e) => e.isSuggestion);
          if (0 === t.length) return !1;
          for (let e of t) e.isSuggestion = !1;
          return (e.model.position = e.model.offsetOf(t[t.length - 1])), !0;
        }
        let o = Xl(e.model)
            .filter((e) => !e.isSuggestion)
            .map((e) => e.value)
            .join(""),
          s = a.leftSibling;
        return (
          a.parent.removeChild(a),
          (e.model.position = e.model.offsetOf(s)),
          (e.model.mode =
            null != (i = null == n ? void 0 : n.mode) ? i : "math"),
          "reject" === t ||
            (Wo.insert(e.model, o, {
              selectionMode:
                null != (r = null == n ? void 0 : n.selectItem) && r
                  ? "item"
                  : "placeholder",
              format: "latex",
              mode: "math",
            }),
            e.snapshot(),
            e.model.announce("replacement")),
          !0
        );
      }
      function tc(e) {
        var t;
        let n = document.getElementById(e);
        return (
          n
            ? (n.dataset.refcount = Number(
                Number.parseInt(null != (t = n.dataset.refcount) ? t : "0") + 1
              ).toString())
            : ((n = document.createElement("div")),
              n.setAttribute("aria-hidden", "true"),
              (n.dataset.refcount = "1"),
              (n.id = e),
              document.body.append(n)),
          n
        );
      }
      function nc(e) {
        var t;
        let n = document.getElementById(e);
        if (!n) return;
        let i = Number.parseInt(
          null != (t = n.getAttribute("data-refcount")) ? t : "0"
        );
        i <= 1 ? n.remove() : (n.dataset.refcount = Number(i - 1).toString());
      }
      function ic(e, t) {
        let n = new Lo({ from: e.context }),
          i = new Eo({
            mode: "math",
            type: "root",
            body: Zs(t, { context: n }),
          });
        return co(lo(bl(new oo(i.render(n), { classes: "ML__base" }), n)), {
          classes: "ML__mathlive",
        }).toMarkup();
      }
      function rc() {
        let e = document.getElementById("mathlive-suggestion-popover");
        return !!e && e.classList.contains("is-visible");
      }
      function ac(e, t) {
        var n;
        if (!e.element || e.element.mathfield !== e || !rc()) return;
        if (
          "latex" !==
          (null == (n = e.model.at(e.model.position)) ? void 0 : n.type)
        )
          return void oc(e);
        if (null != t && t.deferred) return void setTimeout(() => ac(e), 32);
        let i = Yo(e.field);
        if (!i) return;
        let r =
            window.innerHeight ||
            document.documentElement.clientHeight ||
            document.body.clientHeight,
          a =
            window.innerWidth ||
            document.documentElement.clientWidth ||
            document.body.clientWidth,
          o = window.innerWidth - document.documentElement.clientWidth,
          s = window.innerHeight - document.documentElement.clientHeight,
          l = window.mathVirtualKeyboard.boundingRect.height,
          c = document.getElementById("mathlive-suggestion-popover");
        i.x + c.offsetWidth / 2 > a - o
          ? (c.style.left = a - c.offsetWidth - o + "px")
          : i.x - c.offsetWidth / 2 < 0
          ? (c.style.left = "0")
          : (c.style.left = i.x - c.offsetWidth / 2 + "px");
        let d = i.y - i.height;
        r - s - l - i.y < d
          ? (c.classList.add("ML__popover--reverse-direction"),
            c.classList.remove("top-tip"),
            c.classList.add("bottom-tip"),
            (c.style.top = i.y - i.height - c.offsetHeight - 15 + "px"))
          : (c.classList.remove("ML__popover--reverse-direction"),
            c.classList.add("top-tip"),
            c.classList.remove("bottom-tip"),
            (c.style.top = `${i.y + 15}px`));
      }
      function oc(e) {
        e.suggestionIndex = 0;
        let t = document.getElementById("mathlive-suggestion-popover");
        t && (t.classList.remove("is-visible"), (t.innerHTML = ""));
      }
      new (class extends Wo {
        constructor() {
          super("latex");
        }
        createAtom(e) {
          return new ol(e);
        }
        onPaste(e, t) {
          if (!t) return !1;
          let n =
            "string" == typeof t
              ? t
              : t.getData("application/x-latex") || t.getData("text/plain");
          return (
            !(!n || !Ul(e.model, { inputType: "insertFromPaste", data: n })) &&
            (e.stopCoalescingUndo(),
            e.stopRecording(),
            this.insert(e.model, n) &&
              (e.startRecording(),
              e.snapshot("paste"),
              Jl(e.model, { inputType: "insertFromPaste" }),
              fc(e)),
            e.startRecording(),
            !0)
          );
        }
        insert(e, t, n) {
          if (!Ul(e, { data: t, inputType: "insertText" })) return !1;
          n || (n = {}),
            n.insertionMode || (n.insertionMode = "replaceSelection"),
            n.selectionMode || (n.selectionMode = "placeholder");
          let { silenceNotifications: i } = e;
          n.silenceNotifications && (e.silenceNotifications = !0);
          let r = e.silenceNotifications;
          (e.silenceNotifications = !0),
            "replaceSelection" !== n.insertionMode || e.selectionIsCollapsed
              ? "replaceAll" === n.insertionMode
                ? (e.root.setChildren([], "body"), (e.position = 0))
                : "insertBefore" === n.insertionMode
                ? e.collapseSelection("backward")
                : "insertAfter" === n.insertionMode &&
                  e.collapseSelection("forward")
              : e.deleteAtoms($o(e.selection));
          let a = [];
          for (let l of t) V.test(l) && a.push(new ol(l));
          let o = e.at(e.position);
          if (
            (o instanceof sl && (o = o.lastChild), !(o.parent instanceof sl))
          ) {
            let e = new sl("");
            o.parent.addChildAfter(e, o), (o = e.firstChild);
          }
          let s = o.parent.addChildrenAfter(a, o);
          return (
            (e.silenceNotifications = r),
            "before" === n.selectionMode ||
              ("item" === n.selectionMode
                ? e.setSelection(e.anchor, e.offsetOf(s))
                : s && (e.position = e.offsetOf(s))),
            Jl(e, { data: t, inputType: "insertText" }),
            (e.silenceNotifications = i),
            !0
          );
        }
      })();
      var sc,
        lc,
        cc = null,
        dc =
          (null ==
          (lc =
            null == (sc = null == globalThis ? void 0 : globalThis.document)
              ? void 0
              : sc.currentScript)
            ? void 0
            : lc.src) ||
          (function () {
            let e = String(new Error().stack)
              .replace(/^Error.*\n/, "")
              .split("\n");
            if (0 === e.length)
              return (
                console.error(
                  `Can't use relative paths to specify assets location because the sourcefile location could not be determined (unexpected stack trace format "${
                    new Error().stack
                  }").`
                ),
                ""
              );
            let t = e[1],
              n = t.match(/http.*\.ts[\?:]/);
            return (
              n && (t = e[2]),
              (n = t.match(/(https?:.*):[0-9]+:[0-9]+/)),
              n ||
                ((n = t.match(/at (.*(\.ts))[\?:]/)),
                n || (n = t.match(/at (.*(\.mjs|\.js))[\?:]/))),
              n
                ? n[1]
                : (console.error(e),
                  console.error(
                    `Can't use relative paths to specify assets location because the source file location could not be determined (unexpected location "${t}").`
                  ),
                  "")
            );
          })();
      async function uc(e) {
        if (/^(?:[a-z+]+:)?\/\//i.test(e)) return new URL(e).href;
        if (null === cc)
          try {
            let e = await fetch(dc, { method: "HEAD" });
            200 === e.status && (cc = e.url);
          } catch (t) {
            console.error(`Invalid URL "${e}" (relative to "${dc}")`);
          }
        return new URL(e, null != cc ? cc : dc).href;
      }
      var hc = "not-loaded";
      async function pc() {
        var e;
        if ("not-loaded" === hc)
          if (
            ((hc = "loading"),
            null !=
              (e = getComputedStyle(document.documentElement).getPropertyValue(
                "--ML__static-fonts"
              )) && e)
          )
            hc = "ready";
          else if (
            (document.body.classList.remove("ML__fonts-did-not-load"),
            "fonts" in document)
          ) {
            let e = [
                "KaTeX_Main",
                "KaTeX_Math",
                "KaTeX_AMS",
                "KaTeX_Caligraphic",
                "KaTeX_Fraktur",
                "KaTeX_SansSerif",
                "KaTeX_Script",
                "KaTeX_Typewriter",
                "KaTeX_Size1",
                "KaTeX_Size2",
                "KaTeX_Size3",
                "KaTeX_Size4",
              ],
              n = Array.from(document.fonts).map((e) => e.family);
            if (e.every((e) => n.includes(e))) return void (hc = "ready");
            if (!window.MathfieldElement.fontsDirectory)
              return void (hc = "not-loaded");
            let i = await uc(window.MathfieldElement.fontsDirectory);
            if (!i)
              return (
                document.body.classList.add("ML__fonts-did-not-load"),
                void (hc = "error")
              );
            let r = [
              ["KaTeX_Main-Regular"],
              ["KaTeX_Main-BoldItalic", { style: "italic", weight: "bold" }],
              ["KaTeX_Main-Bold", { weight: "bold" }],
              ["KaTeX_Main-Italic", { style: "italic" }],
              ["KaTeX_Math-Italic", { style: "italic" }],
              ["KaTeX_Math-BoldItalic", { style: "italic", weight: "bold" }],
              ["KaTeX_AMS-Regular"],
              ["KaTeX_Caligraphic-Regular"],
              ["KaTeX_Caligraphic-Bold", { weight: "bold" }],
              ["KaTeX_Fraktur-Regular"],
              ["KaTeX_Fraktur-Bold", { weight: "bold" }],
              ["KaTeX_SansSerif-Regular", { style: "italic" }],
              ["KaTeX_SansSerif-Bold", { weight: "bold" }],
              ["KaTeX_SansSerif-Italic", { style: "italic" }],
              ["KaTeX_Script-Regular"],
              ["KaTeX_Typewriter-Regular"],
              ["KaTeX_Size1-Regular"],
              ["KaTeX_Size2-Regular"],
              ["KaTeX_Size3-Regular"],
              ["KaTeX_Size4-Regular"],
            ].map((e) =>
              (function (e, t, n = {}) {
                return new FontFace(e, `url(${t}.woff2) format('woff2')`, n);
              })(e[0].replace(/-[a-zA-Z]+$/, ""), `${i}/${e[0]}`, e[1])
            );
            try {
              return (
                (
                  await Promise.all(
                    r.map((e) => {
                      try {
                        return e.load();
                      } catch (t) {}
                    })
                  )
                ).forEach((e) => document.fonts.add(e)),
                void (hc = "ready")
              );
            } catch (t) {
              console.error(
                `MathLive 0.95.0: The math fonts could not be loaded from "${i}"`,
                { cause: t }
              ),
                document.body.classList.add("ML__fonts-did-not-load");
            }
            hc = "error";
          }
      }
      function mc(e) {
        let t = 0;
        for (let n = 0; n < e.length; n++)
          (t = 31 * t + e.charCodeAt(n)), (t |= 0);
        return Math.abs(t);
      }
      function fc(e, t) {
        e.dirty ||
          ((e.dirty = !0),
          requestAnimationFrame(() => {
            Zo(e) &&
              e.dirty &&
              ((e.atomBoundsCache = new Map()),
              gc(e, t),
              (e.atomBoundsCache = void 0));
          }));
      }
      function yc(e, t) {
        let { model: n } = e;
        (n.root.caret = void 0),
          (n.root.isSelected = !1),
          (n.root.containsCaret = !0);
        for (let i of n.atoms)
          (i.caret = void 0), (i.isSelected = !1), (i.containsCaret = !1);
        if (n.selectionIsCollapsed) {
          if (e.isSelectionEditable && e.hasFocus()) {
            let t = n.at(n.position);
            t.caret = e.model.mode;
            let i = t.parent;
            for (; i; ) (i.containsCaret = !0), (i = i.parent);
          }
        } else {
          let e = n.getAtoms(n.selection, { includeChildren: !0 });
          for (let t of e) t.isSelected = !0;
        }
        return (function (e, t) {
          var n;
          t = null != t ? t : {};
          let i = new Lo({
            from: u(d({}, e.context), {
              atomIdsSettings: {
                seed: t.forHighlighting
                  ? mc(
                      Eo.serialize([e.model.root], {
                        expandMacro: !1,
                        defaultMode: e.options.defaultMode,
                      })
                    )
                  : "random",
                groupNumbers: null != (n = t.forHighlighting) && n,
              },
              letterShapeStyle: e.options.letterShapeStyle,
            }),
            mathstyle:
              "inline-math" === e.options.defaultMode
                ? "textstyle"
                : "displaystyle",
          });
          return co(bl(e.model.root.render(i), i), {
            classes: e.hasEditablePrompts
              ? "ML__mathlive ML__prompting"
              : "ML__mathlive",
            attributes: { translate: "no", "aria-hidden": "true" },
          });
        })(e, t).toMarkup();
      }
      function gc(e, t) {
        var n;
        if (!Zo(e)) return;
        null != t || (t = {});
        let i =
          null == (n = e.element)
            ? void 0
            : n.querySelector("[part=virtual-keyboard-toggle]");
        i && (i.style.display = e.hasEditableContent ? "flex" : "none");
        let r = e.field,
          a = e.isSelectionEditable && e.hasFocus(),
          o = r.classList.contains("ML__focused");
        o && !a
          ? r.classList.remove("ML__focused")
          : !o && a && r.classList.add("ML__focused"),
          (r.innerHTML = window.MathfieldElement.createHTML(yc(e, t))),
          (e.fieldContent = r.getElementsByClassName("ML__mathlive")[0]),
          bc(e, t.interactive),
          (e.dirty = !1);
      }
      function bc(e, t) {
        let n = e.field;
        if (!n) return;
        for (let o of n.querySelectorAll(
          ".ML__selection, .ML__contains-highlight"
        ))
          o.remove();
        (null == t || !t) &&
          "error" !== hc &&
          "ready" !== hc &&
          setTimeout(() => {
            "ready" === hc ? bc(e) : setTimeout(() => bc(e), 128);
          }, 32);
        let i = e.model,
          r = parseFloat(getComputedStyle(n).width),
          a = n.getBoundingClientRect().width / r;
        if (((a = isNaN(a) ? 1 : a), i.selectionIsCollapsed)) {
          ac(e, { deferred: !0 });
          let t = i.at(i.position);
          for (; t && (!t.containsCaret || !t.displayContainsHighlight); )
            t = t.parent;
          if (null != t && t.containsCaret && t.displayContainsHighlight) {
            let i = es(e, ns(e, t), a);
            if (i) {
              (i.left /= a), (i.right /= a), (i.top /= a), (i.bottom /= a);
              let e = document.createElement("div");
              e.classList.add("ML__contains-highlight"),
                (e.style.position = "absolute"),
                (e.style.left = `${i.left}px`),
                (e.style.top = `${i.top}px`),
                (e.style.width = `${Math.ceil(i.right - i.left)}px`),
                (e.style.height = `${Math.ceil(i.bottom - i.top - 1)}px`),
                n.insertBefore(e, n.childNodes[0]);
            }
          }
        } else
          for (let o of (function (e) {
            let t = [];
            for (let n of e) {
              let e = !1;
              for (let i of t)
                if (
                  n.left === i.left &&
                  n.right === i.right &&
                  n.top === i.top &&
                  n.bottom === i.bottom
                ) {
                  e = !0;
                  break;
                }
              e || t.push(n);
            }
            (e = t), (t = []);
            for (let n of e) {
              let i = 0;
              for (let t of e)
                if (
                  n.left >= t.left &&
                  n.right <= t.right &&
                  n.top >= t.top &&
                  n.bottom <= t.bottom &&
                  ((i += 1), i > 1)
                )
                  break;
              1 === i && t.push(n);
            }
            return t;
          })(is(e, { excludeAtomsWithBackground: !0 }))) {
            (o.left /= a), (o.right /= a), (o.top /= a), (o.bottom /= a);
            let e = document.createElement("div");
            e.classList.add("ML__selection"),
              (e.style.position = "absolute"),
              (e.style.left = `${o.left}px`),
              (e.style.top = `${o.top}px`),
              (e.style.width = `${Math.ceil(o.right - o.left)}px`),
              (e.style.height = `${Math.ceil(o.bottom - o.top - 1)}px`),
              n.insertBefore(e, n.childNodes[0]);
          }
      }
      var vc;
      function xc(e, t) {
        (t = d(
          {
            target: "mathfield",
            canUndo: !1,
            audioFeedback: void 0,
            changeContent: !1,
            changeSelection: !1,
          },
          null != t ? t : {}
        )),
          vc || (vc = {});
        for (let n of Object.keys(e))
          vc[n], (vc[n] = u(d({}, t), { fn: e[n] }));
      }
      function wc(e) {
        let t;
        return (
          (t = Array.isArray(e)
            ? "performWithFeedback" === e[0] || "performVariant" === e[0]
              ? e[1]
              : e[0]
            : e),
          (t = t.replace(/-\w/g, (e) => e[1].toUpperCase())),
          vc[t]
        );
      }
      function kc(e) {
        var t;
        return null == (t = wc(e)) ? void 0 : t.target;
      }
      xc({
        performWithFeedback: (e, t) =>
          (function (e, t) {
            var n;
            e.focus(), fh.keypressVibration && y() && navigator.vibrate(3);
            let i = wc(t);
            window.MathfieldElement.playSound(
              null != (n = null == i ? void 0 : i.audioFeedback)
                ? n
                : "keypress"
            );
            let r = e.executeCommand(t);
            return e.scrollIntoView(), r;
          })(e, t),
      }),
        xc(
          { complete: ec },
          {
            target: "mathfield",
            audioFeedback: "return",
            canUndo: !0,
            changeContent: !0,
            changeSelection: !0,
          }
        ),
        xc(
          {
            nextSuggestion: function (e) {
              return Yl(e, { atIndex: e.suggestionIndex + 1 }), !1;
            },
            previousSuggestion: function (e) {
              return Yl(e, { atIndex: e.suggestionIndex - 1 }), !1;
            },
          },
          {
            target: "mathfield",
            audioFeedback: "keypress",
            changeSelection: !0,
          }
        );
      var _c = "mathlive#virtual-keyboard-message";
      function Sc(e) {
        var t;
        return (
          "message" === e.type &&
          (null == (t = e.data) ? void 0 : t.type) === _c
        );
      }
      var Mc = class e {
          constructor() {
            (this.targetOrigin = window.origin),
              (this.originValidator = "none"),
              (this._boundingRect = new DOMRect(0, 0, 0, 0)),
              (this._isShifted = !1),
              window.addEventListener("message", this),
              this.sendMessage("proxy-created"),
              (this.listeners = {});
          }
          static get singleton() {
            return (
              this._singleton || (this._singleton = new e()), this._singleton
            );
          }
          set alphabeticLayout(e) {
            this.sendMessage("update-setting", { alphabeticLayout: e });
          }
          set layouts(e) {
            this.sendMessage("update-setting", { layouts: e });
          }
          set editToolbar(e) {
            this.sendMessage("update-setting", { editToolbar: e });
          }
          set actionKeycap(e) {
            this.sendMessage("update-setting", { actionKeycap: e });
          }
          set shiftKeycap(e) {
            this.sendMessage("update-setting", { shiftKeycap: e });
          }
          set backspaceKeycap(e) {
            this.sendMessage("update-setting", { backspaceKeycap: e });
          }
          set tabKeycap(e) {
            this.sendMessage("update-setting", { tabKeycap: e });
          }
          set container(e) {
            throw new Error("Container inside an iframe cannot be changed");
          }
          show(e) {
            this.sendMessage("show", e);
          }
          hide(e) {
            this.sendMessage("hide", e);
          }
          get isShifted() {
            return this._isShifted;
          }
          get visible() {
            return this._boundingRect.height > 0;
          }
          set visible(e) {
            e ? this.show() : this.hide();
          }
          get boundingRect() {
            return this._boundingRect;
          }
          executeCommand(e) {
            return this.sendMessage("execute-command", { command: e }), !0;
          }
          updateToolbar(e) {
            this.sendMessage("update-toolbar", e);
          }
          update(e) {
            this.sendMessage("update-setting", e);
          }
          connect() {
            this.sendMessage("connect");
          }
          disconnect() {
            this.sendMessage("disconnect");
          }
          addEventListener(e, t, n) {
            this.listeners[e] || (this.listeners[e] = new Set()),
              this.listeners[e].has(t) || this.listeners[e].add(t);
          }
          dispatchEvent(e) {
            return (
              !this.listeners[e.type] ||
              0 === this.listeners[e.type].size ||
              (this.listeners[e.type].forEach((t) => {
                "function" == typeof t ? t(e) : null == t || t.handleEvent(e);
              }),
              !e.defaultPrevented)
            );
          }
          removeEventListener(e, t, n) {
            this.listeners[e] && this.listeners[e].delete(t);
          }
          handleEvent(e) {
            if (Sc(e)) {
              if (!rs(e.origin, this.originValidator))
                throw new DOMException(
                  `Message from unknown origin (${e.origin}) cannot be handled`,
                  "SecurityError"
                );
              this.handleMessage(e.data);
            }
          }
          handleMessage(e) {
            let { action: t } = e;
            if ("execute-command" !== t)
              return "synchronize-proxy" === t
                ? (e.boundingRect,
                  (this._boundingRect = e.boundingRect),
                  void (this._isShifted = e.isShifted))
                : "geometry-changed" === t
                ? (e.boundingRect,
                  (this._boundingRect = e.boundingRect),
                  void this.dispatchEvent(new Event("geometrychange")))
                : void 0;
            {
              let { command: t } = e;
              "virtual-keyboard" === kc(t) && this.executeCommand(t);
            }
          }
          sendMessage(e, t = {}) {
            if (!window.top)
              throw new DOMException(
                "A frame does not have access to the top window and can\u2018t communicate with the keyboard. Review virtualKeyboardTargetOrigin and originValidator on mathfields embedded in an iframe",
                "SecurityError"
              );
            window.top.postMessage(
              d({ type: _c, action: e }, t),
              this.targetOrigin
            );
          }
        },
        Lc = {
          numeric: {
            label: "123",
            labelClass: "MLK__tex-math",
            tooltip: "keyboard.tooltip.numeric",
            rows: [
              [
                {
                  latex: "x",
                  shift: "y",
                  variants: [
                    "y",
                    "z",
                    "t",
                    "r",
                    { latex: "f(#?)", class: "small" },
                    { latex: "g(#?)", class: "small" },
                    "x^2",
                    "x^n",
                    "x_n",
                    "x_{n+1}",
                    "x_i",
                    "x_{i+1}",
                  ],
                },
                {
                  latex: "n",
                  shift: "a",
                  variants: ["i", "j", "p", "k", "a", "u"],
                },
                "[separator-5]",
                "[7]",
                "[8]",
                "[9]",
                "[/]",
                "[separator-5]",
                {
                  latex: "e",
                  shift: "\\ln",
                  variants: [
                    "\\exp",
                    "\\times 10^{#?}",
                    "\\ln",
                    "\\log_{10}",
                    "\\log",
                  ],
                },
                {
                  latex: "\\imaginaryI",
                  variants: [
                    "\\Re",
                    "\\Im",
                    "\\imaginaryJ",
                    "\\Vert #0 \\Vert",
                  ],
                },
                {
                  latex: "\\pi",
                  shift: "\\sin",
                  variants: [
                    "\\prod",
                    { latex: "\\theta", aside: "theta" },
                    { latex: "\\rho", aside: "rho" },
                    { latex: "\\tau", aside: "tau" },
                    "\\sin",
                    "\\cos",
                    "\\tan",
                  ],
                },
              ],
              [
                {
                  label: "<",
                  latex: "<",
                  class: "hide-shift",
                  shift: { latex: "\\le", label: "\u2264" },
                },
                {
                  label: ">",
                  latex: ">",
                  class: "hide-shift",
                  shift: { latex: "\\ge", label: "\u2265" },
                },
                "[separator-5]",
                "[4]",
                "[5]",
                "[6]",
                "[*]",
                "[separator-5]",
                { class: "hide-shift", latex: "#@^2}", shift: "#@^{\\prime}}" },
                { latex: "#@^{#0}}", class: "hide-shift", shift: "#@_{#?}" },
                {
                  class: "hide-shift",
                  latex: "\\sqrt{#0}",
                  shift: { latex: "\\sqrt[#0]{#?}}" },
                },
              ],
              [
                "[(]",
                "[)]",
                "[separator-5]",
                "[1]",
                "[2]",
                "[3]",
                "[-]",
                "[separator-5]",
                {
                  latex: "\\int^{\\infty}_{0}",
                  class: "small hide-shift",
                  shift: "\\int",
                  variants: [
                    { latex: "\\int_{#?}^{#?}", class: "small" },
                    { latex: "\\int", class: "small" },
                    { latex: "\\smallint", class: "small" },
                    { latex: "\\iint", class: "small" },
                    { latex: "\\iiint", class: "small" },
                    { latex: "\\oint", class: "small" },
                    { latex: "\\dfrac{\\rd}{\\rd x}", class: "small" },
                    { latex: "\\frac{\\partial}{\\partial x}", class: "small" },
                    "\\capitalDifferentialD",
                    "\\rd",
                    "\\partial",
                  ],
                },
                { class: "hide-shift", latex: "\\forall", shift: "\\exists" },
                { label: "[backspace]", width: 1 },
              ],
              [
                { label: "[shift]", width: 2 },
                "[separator-5]",
                "[0]",
                "[.]",
                "[=]",
                "[+]",
                "[separator-5]",
                "[left]",
                "[right]",
                { label: "[action]", width: 1 },
              ],
            ],
          },
          greek: {
            label: "&alpha;&beta;&gamma;",
            labelClass: "MLK__tex-math",
            tooltip: "keyboard.tooltip.greek",
            rows: [
              [
                {
                  label: "<i>&#x03c6;</i>",
                  class: "MLK__tex hide-shift",
                  insert: "\\varphi",
                  aside: "phi var.",
                  shift: "\\Phi",
                },
                {
                  label: "<i>&#x03c2;</i>",
                  class: "MLK__tex hide-shift",
                  insert: "\\varsigma",
                  aside: "sigma var.",
                  shift: "\\Sigma",
                },
                {
                  label: "<i>&#x03f5;</i>",
                  class: "MLK__tex hide-shift",
                  insert: "\\epsilon",
                  aside: "espilon",
                  shift: '\\char"0190',
                },
                {
                  label: "<i>&rho;</i>",
                  class: "MLK__tex hide-shift",
                  insert: "\\rho",
                  aside: "rho",
                  shift: '\\char"3A1',
                },
                {
                  label: "<i>&tau;</i>",
                  class: "MLK__tex hide-shift",
                  insert: "\\tau",
                  aside: "tau",
                  shift: '\\char"3A4',
                },
                {
                  label: "<i>&upsilon;</i>",
                  class: "MLK__tex hide-shift",
                  insert: "\\upsilon",
                  aside: "upsilon",
                  shift: "\\Upsilon",
                },
                {
                  label: "<i>&theta;</i>",
                  class: "MLK__tex hide-shift",
                  insert: "\\theta",
                  aside: "theta",
                  shift: "\\Theta",
                },
                {
                  label: "<i>&iota;</i>",
                  class: "MLK__tex hide-shift",
                  insert: "\\iota",
                  aside: "iota",
                  shift: '\\char"399',
                },
                {
                  label: "<i>&omicron;</i>",
                  class: "MLK__tex hide-shift",
                  insert: "\\omicron",
                  aside: "omicron",
                  shift: '\\char"39F',
                },
                {
                  label: "<i>&pi;</i>",
                  class: "MLK__tex hide-shift",
                  insert: "\\pi",
                  aside: "pi",
                  shift: "\\Pi",
                },
              ],
              [
                "[separator-5]",
                {
                  label: "<i>&alpha;</i>",
                  class: "MLK__tex hide-shift",
                  insert: "\\alpha",
                  aside: "alpha",
                  shift: '\\char"391',
                },
                {
                  label: "<i>&sigma;</i>",
                  class: "MLK__tex hide-shift",
                  insert: "\\sigma",
                  aside: "sigma",
                  shift: "\\Sigma",
                },
                {
                  label: "<i>&delta;</i>",
                  class: "MLK__tex hide-shift",
                  insert: "\\delta",
                  aside: "delta",
                  shift: "\\Delta",
                },
                {
                  label: "<i>&phi;</i>",
                  class: "MLK__tex hide-shift",
                  insert: "\\phi",
                  aside: "phi",
                  shift: "\\Phi",
                },
                {
                  label: "<i>&gamma;</i>",
                  class: "MLK__tex hide-shift",
                  insert: "\\gamma",
                  aside: "gamma",
                  shift: "\\Gamma",
                },
                {
                  label: "<i>&eta;</i>",
                  class: "MLK__tex hide-shift",
                  insert: "\\eta",
                  aside: "eta",
                  shift: '\\char"397',
                },
                {
                  label: "<i>&xi;</i>",
                  class: "MLK__tex hide-shift",
                  insert: "\\xi",
                  aside: "xi",
                  shift: "\\Xi",
                },
                {
                  label: "<i>&kappa;</i>",
                  class: "MLK__tex hide-shift",
                  insert: "\\kappa",
                  aside: "kappa",
                  shift: "\\Kappa",
                },
                {
                  label: "<i>&lambda;</i>",
                  class: "MLK__tex hide-shift",
                  insert: "\\lambda",
                  aside: "lambda",
                  shift: "\\Lambda",
                },
                "[separator-5]",
              ],
              [
                "[shift]",
                {
                  label: "<i>&zeta;</i>",
                  class: "MLK__tex hide-shift",
                  insert: "\\zeta",
                  aside: "zeta",
                  shift: '\\char"396',
                },
                {
                  label: "<i>&chi;</i>",
                  class: "MLK__tex hide-shift",
                  insert: "\\chi",
                  aside: "chi",
                  shift: '\\char"3A7',
                },
                {
                  label: "<i>&psi;</i>",
                  class: "MLK__tex hide-shift",
                  insert: "\\psi",
                  aside: "zeta",
                  shift: "\\Psi",
                },
                {
                  label: "<i>&omega;</i>",
                  class: "MLK__tex hide-shift",
                  insert: "\\omega",
                  aside: "omega",
                  shift: "\\Omega",
                },
                {
                  label: "<i>&beta;</i>",
                  class: "MLK__tex hide-shift",
                  insert: "\\beta",
                  aside: "beta",
                  shift: '\\char"392',
                },
                {
                  label: "<i>&nu;</i>",
                  class: "MLK__tex hide-shift",
                  insert: "\\nu",
                  aside: "nu",
                  shift: '\\char"39D',
                },
                {
                  label: "<i>&mu;</i>",
                  class: "MLK__tex hide-shift",
                  insert: "\\mu",
                  aside: "mu",
                  shift: '\\char"39C',
                },
                "[backspace]",
              ],
              [
                "[separator]",
                {
                  label: "<i>&#x03b5;</i>",
                  class: "MLK__tex",
                  insert: "\\varepsilon",
                  aside: "espilon var.",
                },
                {
                  label: "<i>&#x03d1;</i>",
                  class: "MLK__tex",
                  insert: "\\vartheta",
                  aside: "theta var.",
                },
                {
                  label: "<i>&#x3f0;</i>",
                  class: "MLK__tex",
                  insert: "\\varkappa",
                  aside: "kappa var.",
                },
                {
                  label: "<i>&#x03d6;</i>",
                  class: "MLK__tex",
                  insert: "\\varpi",
                  aside: "pi var.",
                },
                {
                  label: "<i>&#x03f1;</i>",
                  class: "MLK__tex",
                  insert: "\\varrho",
                  aside: "rho var.",
                },
                "[left]",
                "[right]",
                "[action]",
              ],
            ],
          },
          symbols: {
            label: "&infin;\u2260\u2208",
            labelClass: "MLK__tex",
            tooltip: "keyboard.tooltip.symbols",
            rows: [
              [
                {
                  latex: "\\sin",
                  shift: "\\sin^{-1}",
                  variants: [
                    { class: "small", latex: "\\sinh" },
                    { class: "small", latex: "\\sin^{-1}" },
                    { class: "small", latex: "\\arsinh" },
                  ],
                },
                "\\ln",
                {
                  latex: "\\mathrm{abs}",
                  insert: "\\mathrm{abs}\\left(#0\\right)",
                },
                {
                  latex: "\\rarr",
                  shift: "\\rArr",
                  variants: [
                    { latex: "\\implies", aside: "implies" },
                    { latex: "\\to", aside: "to" },
                    "\\dashv",
                    { latex: "\\roundimplies", aside: "round implies" },
                  ],
                },
                {
                  latex: "\\exists",
                  variants: ["\\nexists"],
                  shift: "\\nexists",
                },
                {
                  latex: "\\in",
                  shift: "\\notin",
                  variants: ["\\notin", "\\owns"],
                },
                "\\cup",
                {
                  latex: "\\overrightarrow{#@}",
                  shift: "\\overleftarrow{#@}",
                  variants: [
                    "\\overleftarrow{#@}",
                    "\\bar{#@}",
                    "\\vec{#@}",
                    "\\hat{#@}",
                    "\\check{#@}",
                    "\\dot{#@}",
                    "\\ddot{#@}",
                    "\\mathring{#@}",
                    "\\breve{#@}",
                    "\\acute{#@}",
                    "\\tilde{#@}",
                    "\\grave{#@}",
                  ],
                },
                "\\lim_{#?}",
                "\\exponentialE",
              ],
              [
                {
                  latex: "\\cos",
                  shift: "\\cos^{-1}",
                  variants: [
                    { class: "small", latex: "\\cosh" },
                    { class: "small", latex: "\\cos^{-1}" },
                    { class: "small", latex: "\\arcosh" },
                  ],
                },
                {
                  latex: "\\log",
                  shift: "\\log_{10}",
                  variants: ["\\log_{#0}", "\\log_{10}"],
                },
                "\\left\\vert#0\\right\\vert",
                {
                  latex: "\\larr",
                  shift: "\\lArr",
                  variants: [
                    { latex: "\\impliedby", aside: "implied by" },
                    { latex: "\\gets", aside: "gets" },
                    "\\lArr",
                    "\\vdash",
                    { latex: "\\models", aside: "models" },
                  ],
                },
                {
                  latex: "\\forall",
                  shift: "\\lnot",
                  variants: [
                    { latex: "\\land", aside: "and" },
                    { latex: "\\lor", aside: "or" },
                    { latex: "\\oplus", aside: "xor" },
                    { latex: "\\lnot", aside: "not" },
                    { latex: "\\downarrow", aside: "nor" },
                    { latex: "\\uparrow", aside: "nand" },
                    { latex: "\\curlywedge", aside: "nor" },
                    { latex: "\\bar\\curlywedge", aside: "nand" },
                  ],
                },
                { latex: "\\ni", shift: "\\not\\owns" },
                "\\cap",
                {
                  latex: "\\overline{#@}",
                  shift: "\\underline{#@}",
                  variants: [
                    "\\overbrace{#@}",
                    "\\overlinesegment{#@}",
                    "\\overleftrightarrow{#@}",
                    "\\overrightarrow{#@}",
                    "\\overleftarrow{#@}",
                    "\\overgroup{#@}",
                    "\\underbrace{#@}",
                    "\\underlinesegment{#@}",
                    "\\underleftrightarrow{#@}",
                    "\\underrightarrow{#@}",
                    "\\underleftarrow{#@}",
                    "\\undergroup{#@}",
                  ],
                },
                {
                  class: "hide-shift",
                  latex: "\\int",
                  shift: "\\iint",
                  variants: [
                    { latex: "\\int_{#?}^{#?}", class: "small" },
                    { latex: "\\int", class: "small" },
                    { latex: "\\smallint", class: "small" },
                    { latex: "\\iint", class: "small" },
                    { latex: "\\iiint", class: "small" },
                    { latex: "\\oint", class: "small" },
                    "\\intop",
                    "\\iiint",
                    "\\oiint",
                    "\\oiiint",
                    "\\intclockwise",
                    "\\varointclockwise",
                    "\\ointctrclockwise",
                    "\\intctrclockwise",
                  ],
                },
                { latex: "\\pi", shift: "\\tau", variants: ["\\tau"] },
              ],
              [
                {
                  latex: "\\tan",
                  shift: "\\tan^{-1}",
                  variants: [
                    { class: "small", latex: "\\tanh" },
                    { class: "small", latex: "\\tan^{-1}" },
                    { class: "small", latex: "\\artanh" },
                    { class: "small", latex: "\\arctan" },
                    { class: "small", latex: "\\arctg" },
                    { class: "small", latex: "\\tg" },
                  ],
                },
                {
                  latex: "\\mathrm{exp}",
                  insert: "\\mathrm{exp}\\left(#0\\right)",
                  variants: ["\\exponentialE^{#0}"],
                },
                "\\left\\Vert#0\\right\\Vert",
                {
                  latex: "\\lrArr",
                  shift: "\\leftrightarrow",
                  variants: [
                    { latex: "\\iff", aside: "if and only if" },
                    "\\leftrightarrow",
                    "\\leftrightarrows",
                    "\\Leftrightarrow",
                    { latex: "^\\biconditional", aside: "biconditional" },
                  ],
                },
                { latex: "\\vert", shift: "!" },
                {
                  latex: "#@^{\\complement}",
                  aside: "complement",
                  variants: [
                    { latex: "\\setminus", aside: "set minus" },
                    { latex: "\\smallsetminus", aside: "small set minus" },
                  ],
                },
                {
                  latex: "\\subset",
                  shift: "\\subseteq",
                  variants: [
                    "\\subset",
                    "\\subseteq",
                    "\\subsetneq",
                    "\\varsubsetneq",
                    "\\subsetneqq",
                    "\\nsubset",
                    "\\nsubseteq",
                    "\\supset",
                    "\\supseteq",
                    "\\supsetneq",
                    "\\supsetneqq",
                    "\\nsupset",
                    "\\nsupseteq",
                  ],
                },
                {
                  latex: "#@^{\\prime}",
                  shift: "#@^{\\doubleprime}",
                  variants: ["#@^{\\doubleprime}", "#@\\degree"],
                },
                {
                  latex: "\\rd",
                  shift: "\\partial",
                  variants: [
                    { latex: "\\dfrac{\\rd}{\\rd x}", class: "small" },
                    { latex: "\\frac{\\partial}{\\partial x}", class: "small" },
                    "\\capitalDifferentialD",
                    "\\rd",
                    "\\partial",
                  ],
                },
                {
                  latex: "\\infty",
                  variants: [
                    "\\aleph_0",
                    "\\aleph_1",
                    "\\omega",
                    "\\mathfrak{m}",
                  ],
                },
              ],
              [
                { label: "[shift]", width: 2 },
                { class: "box", latex: ",", shift: ";", variants: [";", "?"] },
                {
                  class: "box",
                  latex: "\\colon",
                  shift: "\\Colon",
                  variants: [
                    { latex: "\\Colon", aside: "such that", class: "box" },
                    { latex: ":", aside: "ratio", class: "box" },
                    { latex: "\\vdots", aside: "", class: "box" },
                    { latex: "\\ddots", aside: "", class: "box" },
                    { latex: "\\ldotp", aside: "low dot", class: "box" },
                    { latex: "\\cdotp", aside: "center dot", class: "box" },
                    { latex: "\\ldots", aside: "low ellipsis", class: "box" },
                    {
                      latex: "\\cdots",
                      aside: "center ellipsis",
                      class: "box",
                    },
                    { latex: "\\therefore", aside: "therefore", class: "box" },
                    { latex: "\\because", aside: "because", class: "box" },
                  ],
                },
                {
                  class: "box",
                  latex: "\\cdot",
                  aside: "centered dot",
                  shift: "\\ast",
                  variants: [
                    "\\circ",
                    "\\bigcirc",
                    "\\bullet",
                    "\\odot",
                    "\\oslash",
                    "\\circledcirc",
                    "\\ast",
                    "\\star",
                    "\\times",
                    "\\doteq",
                    "\\doteqdot",
                  ],
                },
                "[separator]",
                "[left]",
                "[right]",
                { label: "[backspace]", width: 1, class: "action hide-shift" },
                { label: "[action]", width: 1 },
              ],
            ],
          },
          compact: {
            label: "compact",
            rows: [
              [
                "[+]",
                "[-]",
                "[*]",
                "[/]",
                "[=]",
                "[.]",
                "[(]",
                "[)]",
                "\\sqrt{#0}",
                "#@^{#?}",
              ],
              [
                "[1]",
                "[2]",
                "[3]",
                "[4]",
                "[5]",
                "[6]",
                "[7]",
                "[8]",
                "[9]",
                "[0]",
              ],
              ["[hr]"],
              [
                "[undo]",
                "[redo]",
                "[separator]",
                "[separator]",
                "[separator]",
                "[left]",
                "[right]",
                { label: "[backspace]", class: "action hide-shift" },
                "[hide-keyboard]",
              ],
            ],
          },
          minimalist: {
            label: "minimalist",
            layers: [
              {
                style:
                  "\n          .minimalist-backdrop {\n            display: flex;\n            justify-content: center;\n          }          \n          .minimalist-container {\n            --keycap-height: 40px;\n            --keycap-max-width: 53px;\n            --keycap-small-font-size: 12px;\n            background: var(--keyboard-background);\n            padding: 20px;\n            border-top-left-radius: 8px;\n            border-top-right-radius: 8px;\n            border: 1px solid var(--keyboard-border);\n            box-shadow: 0 0 32px rgb(0 0 0 / 30%);\n          }        \n        ",
                backdrop: "minimalist-backdrop",
                container: "minimalist-container",
                rows: [
                  [
                    "+",
                    "-",
                    "\\times",
                    { latex: "\\frac{#@}{#0}", class: "small" },
                    "=",
                    "[.]",
                    "(",
                    ")",
                    { latex: "\\sqrt{#0}", class: "small" },
                    { latex: "#@^{#?}", class: "small" },
                  ],
                  ["1", "2", "3", "4", "5", "6", "7", "8", "9", "0"],
                  ["[hr]"],
                  [
                    "[undo]",
                    "[redo]",
                    "[separator]",
                    "[separator]",
                    "[separator]",
                    "[left]",
                    "[right]",
                    { label: "[backspace]", class: "action hide-shift" },
                    "[hide-keyboard]",
                  ],
                ],
              },
            ],
          },
          "numeric-only": {
            label: "123",
            labelClass: "MLK__tex-math",
            tooltip: "keyboard.tooltip.numeric",
            id: "numeric-only",
            rows: [
              [
                "7",
                "8",
                "9",
                "[separator]",
                { label: "[backspace]", width: 2 },
              ],
              ["4", "5", "6", "[separator]", "[separator]", "[separator]"],
              ["1", "2", "3", "[separator]", "[separator]", "[separator]"],
              [
                "0",
                { label: "[.]", variants: [] },
                "-",
                "[separator]",
                "[left]",
                "[right]",
              ],
            ],
          },
        },
        Cc = class {
          constructor(e) {
            var t, n;
            (this.preventOverlayClose =
              null != (t = null == e ? void 0 : e.preventOverlayClose) && t),
              (this.translucent =
                null != (n = null == e ? void 0 : e.translucent) && n),
              (this.state = "closed");
          }
          get element() {
            if (this._element) return this._element;
            let e = document.createElement("div");
            return (
              e.setAttribute("role", "presentation"),
              (e.style.position = "fixed"),
              (e.style.contain = "content"),
              (e.style.top = "0"),
              (e.style.left = "0"),
              (e.style.right = "0"),
              (e.style.bottom = "0"),
              (e.style.zIndex = "var(--scrim-zindex, 10099)"),
              (e.style.outline = "none"),
              this.translucent
                ? ((e.style.background = "rgba(255, 255, 255, .2)"),
                  (e.style.backdropFilter = "contrast(40%)"))
                : (e.style.background = "transparent"),
              (this._element = e),
              e
            );
          }
          open(e) {
            var t;
            if ("closed" !== this.state) return;
            (this.state = "opening"), (this.savedActiveElement = zc());
            let { element: n } = this;
            (null != (t = null == e ? void 0 : e.root)
              ? t
              : document.body
            ).appendChild(n),
              n.addEventListener("click", this),
              document.addEventListener("touchmove", this, !1),
              document.addEventListener("scroll", this, !1);
            let i = window.innerWidth - document.documentElement.clientWidth;
            (this.savedMarginRight = document.body.style.marginRight),
              (this.savedOverflow = document.body.style.overflow),
              (document.body.style.overflow = "hidden");
            let r = Number.parseFloat(
              getComputedStyle(document.body).marginRight
            );
            (document.body.style.marginRight = `${r + i}px`),
              null != e && e.child && n.append(e.child),
              (this.state = "open");
          }
          close() {
            var e, t, n, i;
            if ("open" !== this.state) return;
            (this.state = "closing"),
              "function" == typeof this.onClose && this.onClose();
            let { element: r } = this;
            r.removeEventListener("click", this),
              document.removeEventListener("touchmove", this, !1),
              document.removeEventListener("scroll", this, !1),
              r.remove(),
              (document.body.style.overflow =
                null != (e = this.savedOverflow) ? e : ""),
              (document.body.style.marginRight =
                null != (t = this.savedMarginRight) ? t : ""),
              zc() !== this.savedActiveElement &&
                (null ==
                  (i =
                    null == (n = this.savedActiveElement) ? void 0 : n.focus) ||
                  i.call(n)),
              (r.innerHTML = ""),
              (this.state = "closed");
          }
          handleEvent(e) {
            this.preventOverlayClose ||
              (((e.target === this._element && "click" === e.type) ||
                (e.target === document &&
                  ("touchmove" === e.type || "scroll" === e.type))) &&
                (this.close(), e.preventDefault(), e.stopPropagation()));
          }
        };
      function zc() {
        var e;
        let t = document.activeElement;
        for (
          ;
          null != (e = null == t ? void 0 : t.shadowRoot) && e.activeElement;

        )
          t = t.shadowRoot.activeElement;
        return t;
      }
      var Ac,
        Ec = {
          0: ["\\varnothing", "\\infty"],
          1: [
            "\\frac{1}{#@}",
            "#@^{-1}",
            "\\times 10^{#?}",
            "\\phi",
            "\\imaginaryI",
          ],
          2: ["\\frac{1}{2}", "#@^2", "\\sqrt2", "\\exponentialE"],
          3: ["\\frac{1}{3}", "#@^3", "\\sqrt3", "\\pi"],
          4: ["\\frac{1}{4}", "#@^4"],
          5: ["\\frac{1}{5}", "#@^5", "\\sqrt5"],
          6: ["\\frac{1}{6}", "#@^6"],
          7: ["\\frac{1}{7}", "#@^7"],
          8: ["\\frac{1}{8}", "#@^8"],
          9: ["\\frac{1}{9}", "#@^9"],
          ".": [".", ",", ";", "\\colon"],
          a: [
            { latex: "\\aleph", aside: "aleph" },
            { latex: "\\forall", aside: "for all" },
          ],
          b: [{ latex: "\\beth", aside: "beth" }],
          c: [{ latex: "\\C", aside: "set of complex numbers" }],
          d: [{ latex: "\\daleth", aside: "daleth" }],
          e: [
            { latex: "\\exponentialE", aside: "exponential e" },
            { latex: "\\exists", aside: "there is" },
            { latex: "\\nexists", aside: "there isn\u2019t" },
          ],
          g: [{ latex: "\\gimel", aside: "gimel" }],
          h: [
            { latex: "\\hbar", aside: "h bar" },
            { latex: "\\hslash", aside: "h slash" },
          ],
          i: [{ latex: "\\imaginaryI", aside: "imaginary i" }],
          j: [{ latex: "\\imaginaryJ", aside: "imaginary j" }],
          l: [{ latex: "\\ell", aside: "ell" }],
          n: [{ latex: "\\mathbb{N}", aside: "set of natural numbers" }],
          p: [{ latex: "\\mathbb{P}", aside: "set of primes" }],
          q: [{ latex: "\\mathbb{Q}", aside: "set of rational numbers" }],
          r: [{ latex: "\\mathbb{R}", aside: "set of real numbers" }],
          z: [{ latex: "\\mathbb{Z}", aside: "set of integers" }],
          space: [
            {
              latex: '\\char"203A\\!\\char"2039',
              insert: "\\!",
              aside: "negative thin space<br>\u207b\xb3\u29f8\u2081\u2088 em",
            },
            {
              latex: '\\char"203A\\,\\char"2039',
              insert: "\\,",
              aside: "thin space<br>\xb3\u29f8\u2081\u2088 em",
            },
            {
              latex: '\\char"203A\\:\\char"2039',
              insert: "\\:",
              aside: "medium space<br>\u2074\u29f8\u2081\u2088 em",
            },
            {
              latex: '\\char"203A\\;\\char"2039',
              insert: "\\;",
              aside: "thick space<br>\u2075\u29f8\u2081\u2088 em",
            },
            {
              latex: '\\char"203A\\ \\char"2039',
              insert: "\\ ",
              aside: "\u2153 em",
            },
            {
              latex: '\\char"203A\\enspace\\char"2039',
              insert: "\\enspace",
              aside: "\xbd em",
            },
            {
              latex: '\\char"203A\\quad\\char"2039',
              insert: "\\quad",
              aside: "1 em",
            },
            {
              latex: '\\char"203A\\qquad\\char"2039',
              insert: "\\qquad",
              aside: "2 em",
            },
          ],
        };
      function Kc(e, t) {
        var n, i, r;
        let a = Qc.singleton;
        if (!a) return;
        let o = Zc(e),
          s =
            null !=
            (i =
              null == (n = a.getKeycap(null == o ? void 0 : o.id))
                ? void 0
                : n.variants)
              ? i
              : "";
        if (
          ("string" == typeof s && !Tc(s)) ||
          (Array.isArray(s) && 0 === s.length)
        )
          return void (null == t || t());
        let l = {},
          c = "";
        for (let m of (function (e) {
          var t;
          return "string" != typeof e
            ? e
            : (Ec[e] ||
                (Ec[e] =
                  null !=
                  (t = (function (e) {
                    if ("foreground-color" === e) {
                      let e = [];
                      for (let t of Object.keys(_))
                        e.push({
                          class: "swatch-button",
                          label:
                            '<span style="border: 3px solid ' +
                            _[t] +
                            '"></span>',
                          command: ["applyStyle", { color: t }],
                        });
                      return e;
                    }
                    if ("background-color" === e) {
                      let e = [];
                      for (let t of Object.keys(k))
                        e.push({
                          class: "swatch-button",
                          label:
                            '<span style="background:' + k[t] + '"></span>',
                          command: ["applyStyle", { backgroundColor: t }],
                        });
                      return e;
                    }
                  })(e))
                    ? t
                    : []),
              Ec[e]);
        })(s)) {
          let e = Wc(m),
            t =
              Date.now().toString(36).slice(-2) +
              Math.floor(1e5 * Math.random()).toString(36);
          l[t] = e;
          let [n, i] = Vc(e);
          c += `<div id=${t} class="item ${i}">${n}</div>`;
        }
        let d = document.createElement("div");
        d.setAttribute("aria-hidden", "true"),
          (d.className = "MLK__variant-panel"),
          (d.style.height = "auto");
        let u = Object.keys(l).length,
          h = 5;
        1 === u
          ? (h = 1)
          : 2 === u || 4 === u
          ? (h = 2)
          : 3 === u || 5 === u || 6 === u
          ? (h = 3)
          : u >= 7 && u < 14 && (h = 4),
          (d.style.width = `calc(var(--variant-keycap-length) * ${h} + 12px)`),
          (d.innerHTML = fh.createHTML(c)),
          Cc.scrim || (Cc.scrim = new Cc()),
          Cc.scrim.open({
            root:
              null == (r = null == a ? void 0 : a.container)
                ? void 0
                : r.querySelector(".ML__keyboard"),
            child: d,
          }),
          null == Ac || Ac.abort(),
          (Ac = new AbortController()),
          d.addEventListener(
            "pointerup",
            (e) => {
              let n = Zc(e.target);
              null == n ||
                !n.id ||
                !l[n.id] ||
                (Xc(l[n.id]), Dc(), null == t || t(), e.preventDefault());
            },
            { capture: !0, passive: !1, signal: Ac.signal }
          ),
          d.addEventListener(
            "pointerenter",
            (e) => {
              let t = Zc(e.target);
              null == t || !t.id || !l[t.id] || t.classList.add("is-active");
            },
            { capture: !0, signal: Ac.signal }
          ),
          d.addEventListener(
            "pointerleave",
            (e) => {
              let t = Zc(e.target);
              null == t || !t.id || !l[t.id] || t.classList.remove("is-active");
            },
            { capture: !0, signal: Ac.signal }
          ),
          window.addEventListener(
            "pointercancel",
            () => {
              Dc(), null == t || t();
            },
            { signal: Ac.signal }
          ),
          window.addEventListener(
            "pointerup",
            () => {
              Dc(), null == t || t();
            },
            { signal: Ac.signal }
          );
        let p = null == e ? void 0 : e.getBoundingClientRect();
        if (p) {
          p.top - d.clientHeight < 0 &&
            ((d.style.width = "auto"),
            u <= 6
              ? (d.style.height = "56px")
              : u <= 12
              ? (d.style.height = "108px")
              : u <= 18
              ? (d.style.height = "205px")
              : d.classList.add("compact"));
          let e = Math.max(
              0,
              Math.min(
                window.innerWidth - d.offsetWidth,
                (p.left + p.right - d.offsetWidth) / 2
              )
            ),
            t = p.top - d.clientHeight + 5;
          (d.style.transform = `translate(${e}px, ${t}px)`),
            d.classList.add("is-visible");
        }
      }
      function Dc() {
        var e;
        null == Ac || Ac.abort(), null == (e = Cc.scrim) || e.close();
      }
      function Tc(e) {
        return void 0 !== Ec[e];
      }
      function Bc(e) {
        return Object.keys(e)
          .map(
            (t) =>
              `${t} {${(function (e) {
                return "string" == typeof e
                  ? e
                  : Object.entries(e)
                      .map(([e, t]) => `${e}:${t} !important`)
                      .join(";");
              })(e[t])}}`
          )
          .join("");
      }
      function $c(e) {
        if (!e) return "";
        let t = new Lo(),
          n = new Eo({
            mode: "math",
            type: "root",
            body: Zs(e, {
              context: t,
              args: (e) =>
                "@" === e
                  ? "{\\class{ML__box-placeholder}{\\blacksquare}}"
                  : "\\placeholder{}",
            }),
          });
        return co(lo(bl(new oo(n.render(t), { classes: "ML__base" }), t)), {
          classes: "ML__mathlive",
        }).toMarkup();
      }
      function Pc(e) {
        if (Array.isArray(e)) return e.map((e) => Pc(e)).flat();
        let t = "string" == typeof e ? { markup: e } : e;
        return (
          "rows" in t &&
            Array.isArray(t.rows) &&
            (t.rows = t.rows.map((e) => e.map((e) => Wc(e)))),
          null != t.id ||
            (t.id =
              "ML__layer_" +
              Date.now().toString(36).slice(-2) +
              Math.floor(1e5 * Math.random()).toString(36)),
          [t]
        );
      }
      function Oc(e) {
        if ("alphabetic" === e)
          return (function () {
            var e, t;
            let n = window.mathVirtualKeyboard.alphabeticLayout;
            if ("auto" === n) {
              let t = Nl();
              t && (n = t.virtualLayout),
                (!n || "auto" === n) &&
                  (n =
                    null !=
                    (e = {
                      fr: "azerty",
                      be: "azerty",
                      al: "qwertz",
                      ba: "qwertz",
                      cz: "qwertz",
                      de: "qwertz",
                      hu: "qwertz",
                      sk: "qwertz",
                      ch: "qwertz",
                    }[b.locale.slice(0, 2)])
                      ? e
                      : "qwerty");
            }
            let i = {
                qwerty: ["qwertyuiop", " asdfghjkl ", "^zxcvbnm~"],
                azerty: ["azertyuiop", "qsdfghjklm", "^ wxcvbn ~"],
                qwertz: ["qwertzuiop", " asdfghjkl ", "^yxcvbnm~"],
                dvorak: ["^  pyfgcrl ", "aoeuidhtns", "qjkxbmwvz~"],
                colemak: [" qwfpgjluy ", "arstdhneio", "^zxcvbkm~"],
              },
              r = null != (t = i[n]) ? t : i.qwerty,
              a = [
                [
                  { label: "1", variants: "1" },
                  { label: "2", variants: "2" },
                  { label: "3", variants: "3" },
                  { label: "4", variants: "4" },
                  {
                    label: "5",
                    shift: { latex: "\\frac{#@}{#?}" },
                    variants: "5",
                  },
                  { label: "6", shift: { latex: "#@^#?" }, variants: "6" },
                  { label: "7", variants: "4" },
                  { label: "8", shift: { latex: "\\times" }, variants: "8" },
                  {
                    label: "9",
                    shift: { label: "(", latex: "(" },
                    variants: "9",
                  },
                  {
                    label: "0",
                    shift: { label: ")", latex: ")" },
                    variants: "0",
                  },
                ],
              ];
            for (let o of r) {
              let e = [];
              for (let t of o)
                /[a-z]/.test(t)
                  ? e.push({
                      label: t,
                      class: "hide-shift",
                      shift: { label: t.toUpperCase() },
                      variants: Tc(t) ? t : void 0,
                    })
                  : "~" === t
                  ? "dvorak" !== n
                    ? e.push("[backspace]")
                    : e.push({ label: "[backspace]", width: 1 })
                  : "^" === t
                  ? e.push("[shift]")
                  : " " === t && e.push("[separator-5]");
              a.push(e);
            }
            return (
              a.push([
                "[-]",
                "[+]",
                "[=]",
                { label: " ", width: 1.5 },
                ",",
                "[.]",
                "[left]",
                "[right]",
                { label: "[action]", width: 1.5 },
              ]),
              {
                label: "abc",
                labelClass: "MLK__tex-math",
                tooltip: "keyboard.tooltip.alphabetic",
                layers: Pc({ rows: a }),
              }
            );
          })();
        if ("string" == typeof e) return Oc(Lc[e]);
        let t;
        if ("rows" in e && Array.isArray(e.rows)) {
          let n = e,
            { rows: i } = n,
            r = p(n, ["rows"]);
          t = u(d({}, r), { layers: Pc({ rows: e.rows }) });
        } else if ("markup" in e && "string" == typeof e.markup) {
          let n = e,
            { markup: i } = n,
            r = p(n, ["markup"]);
          t = u(d({}, r), { layers: Pc(e.markup) });
        } else
          (t = d({}, e)),
            "layers" in e
              ? (t.layers = Pc(e.layers))
              : console.error(
                  'MathLive 0.95.0: provide either a "rows", "markup" or "layers" property'
                );
        let n = !1,
          i = !1;
        for (let r of t.layers)
          if (r.rows)
            for (let e of r.rows.flat()) {
              Yc(e) && (n = !0);
              let t = e.command;
              "string" == typeof t &&
                ["undo", "redo", "cut", "copy", "paste"].includes(t) &&
                (i = !0);
            }
        return (
          (!("displayShiftedKeycaps" in e) ||
            void 0 === e.displayShiftedKeycaps) &&
            (t.displayShiftedKeycaps = n),
          (!("displayEditToolbar" in e) || void 0 === e.displayEditToolbar) &&
            (t.displayEditToolbar = !i),
          t
        );
      }
      function Fc(e, t) {
        var n, i;
        let r = '<div class="left">';
        if (e.normalizedLayouts.length > 1)
          for (let [a, o] of e.normalizedLayouts.entries()) {
            let e = o,
              s = [a === t ? "selected" : "layer-switch"];
            e.tooltip && s.push("MLK__tooltip"),
              e.labelClass && s.push(...e.labelClass.split(" ")),
              (r += `<div class="${s.join(" ")}"`),
              e.tooltip &&
                (r +=
                  " data-tooltip='" +
                  (null != (n = v(e.tooltip)) ? n : e.tooltip) +
                  "' "),
              a !== t && (r += `data-layer="${e.layers[0].id}"`),
              (r += `>${null != (i = e.label) ? i : "untitled"}</div>`);
          }
        return (r += "</div>"), r;
      }
      function Nc(e, t) {
        let n = "";
        if ("none" === e.editToolbar) return "";
        let i = [];
        t.selectionIsCollapsed
          ? i.push("undo", "redo", "pasteFromClipboard")
          : i.push("cutToClipboard", "copyToClipboard", "pasteFromClipboard");
        let r = {
          undo: `<div class='action ${
            !1 === t.canUndo ? "disabled" : ""
          }'\n          data-command='"undo"'\n          data-tooltip='${v(
            "tooltip.undo"
          )}'>\n          <svg><use xlink:href='#svg-undo' /></svg>\n      </div>`,
          redo: `<div class='action ${
            !1 === t.canRedo ? "disabled" : ""
          }'\n          data-command='"redo"'\n          data-tooltip='${v(
            "tooltip.redo"
          )}'>\n          <svg><use xlink:href='#svg-redo' /></svg>\n      </div>`,
          cutToClipboard: `\n        <div class='action'\n            data-command='"cutToClipboard"'\n            data-tooltip='${v(
            "tooltip.cut to clipboard"
          )}'>\n            <svg><use xlink:href='#svg-cut' /></svg>\n        </div>\n    `,
          copyToClipboard: `\n        <div class='action'\n            data-command='"copyToClipboard"'\n            data-tooltip='${v(
            "tooltip.copy to clipboard"
          )}'>\n            <svg><use xlink:href='#svg-copy' /></svg>\n        </div>\n    `,
          pasteFromClipboard: `\n        <div class='action'\n            data-command='"pasteFromClipboard"'\n            data-tooltip='${v(
            "tooltip.paste from clipboard"
          )}'>\n            <svg><use xlink:href='#svg-paste' /></svg>\n        </div>\n    `,
        };
        return (n += i.map((e) => r[e]).join("")), n;
      }
      function qc(e) {
        let t = Qc.singleton;
        if (!t) return;
        let n = {};
        if (!e.id) {
          if (
            (e.hasAttribute("data-label") && (n.label = e.dataset.label),
            e.hasAttribute("data-latex") && (n.latex = e.dataset.latex),
            e.hasAttribute("data-key") && (n.key = e.dataset.key),
            e.hasAttribute("data-insert") && (n.insert = e.dataset.insert),
            e.hasAttribute("data-variants") &&
              (n.variants = e.dataset.variants),
            e.hasAttribute("data-aside") && (n.aside = e.dataset.aside),
            e.className && (n.class = e.className),
            !n.label &&
              !n.latex &&
              !n.key &&
              !n.insert &&
              ((n.latex = e.innerText), (n.label = e.innerHTML)),
            e.hasAttribute("data-command"))
          )
            try {
              n.command = JSON.parse(e.dataset.command);
            } catch (i) {}
          e.id = t.registerKeycap(n);
        }
        if (!e.innerHTML) {
          let [t, i] = Vc(n);
          e.innerHTML = window.MathfieldElement.createHTML(t);
        }
      }
      function Rc(e) {
        e.resetKeycapRegistry(), ds("virtual-keyboard"), ds("core"), pc();
        let t = document.createElement("div");
        t.className = "ML__keyboard";
        let n = document.createElement("div");
        (n.className = "MLK__plate"),
          (n.innerHTML = window.MathfieldElement.createHTML(
            '<svg xmlns="http://www.w3.org/2000/svg" style="display: none;">\n\n<symbol id="svg-delete-backward" viewBox="0 0 576 512">\n  <path d="M432.1 208.1L385.9 256L432.1 303C442.3 312.4 442.3 327.6 432.1 336.1C423.6 346.3 408.4 346.3 399 336.1L352 289.9L304.1 336.1C295.6 346.3 280.4 346.3 271 336.1C261.7 327.6 261.7 312.4 271 303L318.1 256L271 208.1C261.7 199.6 261.7 184.4 271 175C280.4 165.7 295.6 165.7 304.1 175L352 222.1L399 175C408.4 165.7 423.6 165.7 432.1 175C442.3 184.4 442.3 199.6 432.1 208.1V208.1zM512 64C547.3 64 576 92.65 576 128V384C576 419.3 547.3 448 512 448H205.3C188.3 448 172 441.3 160 429.3L9.372 278.6C3.371 272.6 0 264.5 0 256C0 247.5 3.372 239.4 9.372 233.4L160 82.75C172 70.74 188.3 64 205.3 64L512 64zM528 128C528 119.2 520.8 112 512 112H205.3C201 112 196.9 113.7 193.9 116.7L54.63 256L193.9 395.3C196.9 398.3 201 400 205.3 400H512C520.8 400 528 392.8 528 384V128z"/>\n</symbol>\n\n<symbol id="svg-shift" viewBox="0 0 384 512">\n  <path d="M2.438 252.3C7.391 264.2 19.06 272 32 272h80v160c0 26.51 21.49 48 48 48h64C250.5 480 272 458.5 272 432v-160H352c12.94 0 24.61-7.797 29.56-19.75c4.953-11.97 2.219-25.72-6.938-34.88l-160-176C208.4 35.13 200.2 32 192 32S175.6 35.13 169.4 41.38l-160 176C.2188 226.5-2.516 240.3 2.438 252.3zM192 86.63L313.4 224H224v208H160V224H70.63L192 86.63z"/>\n</symbol>\n\n<symbol id="svg-commit" viewBox="0 0 512 512">\n  <path d="M135 432.1l-128-128C2.344 300.3 0 294.2 0 288s2.344-12.28 7.031-16.97l128-128c9.375-9.375 24.56-9.375 33.94 0s9.375 24.56 0 33.94L81.94 264H464v-208C464 42.75 474.8 32 488 32S512 42.75 512 56V288c0 13.25-10.75 24-24 24H81.94l87.03 87.03c9.375 9.375 9.375 24.56 0 33.94S144.4 442.3 135 432.1z"/>\n</symbol>\n\n<symbol id="svg-command" viewBox="0 0 640 512">\n  <path d="M34.495 36.465l211.051 211.05c4.686 4.686 4.686 12.284 0 16.971L34.495 475.535c-4.686 4.686-12.284 4.686-16.97 0l-7.071-7.07c-4.686-4.686-4.686-12.284 0-16.971L205.947 256 10.454 60.506c-4.686-4.686-4.686-12.284 0-16.971l7.071-7.07c4.686-4.687 12.284-4.687 16.97 0zM640 468v-10c0-6.627-5.373-12-12-12H300c-6.627 0-12 5.373-12 12v10c0 6.627 5.373 12 12 12h328c6.627 0 12-5.373 12-12z"/>\n</symbol>\n\n<symbol id="svg-undo" viewBox="0 0 512 512">\n  <path d="M20 8h10c6.627 0 12 5.373 12 12v110.625C85.196 57.047 165.239 7.715 256.793 8.001 393.18 8.428 504.213 120.009 504 256.396 503.786 393.181 392.834 504 256 504c-63.926 0-122.202-24.187-166.178-63.908-5.113-4.618-5.354-12.561-.482-17.433l7.069-7.069c4.503-4.503 11.749-4.714 16.482-.454C150.782 449.238 200.935 470 256 470c117.744 0 214-95.331 214-214 0-117.744-95.331-214-214-214-82.862 0-154.737 47.077-190.289 116H180c6.627 0 12 5.373 12 12v10c0 6.627-5.373 12-12 12H20c-6.627 0-12-5.373-12-12V20c0-6.627 5.373-12 12-12z"/>\n</symbol>\n<symbol id="svg-redo" viewBox="0 0 512 512">\n  <path d="M492 8h-10c-6.627 0-12 5.373-12 12v110.625C426.804 57.047 346.761 7.715 255.207 8.001 118.82 8.428 7.787 120.009 8 256.396 8.214 393.181 119.166 504 256 504c63.926 0 122.202-24.187 166.178-63.908 5.113-4.618 5.354-12.561.482-17.433l-7.069-7.069c-4.503-4.503-11.749-4.714-16.482-.454C361.218 449.238 311.065 470 256 470c-117.744 0-214-95.331-214-214 0-117.744 95.331-214 214-214 82.862 0 154.737 47.077 190.289 116H332c-6.627 0-12 5.373-12 12v10c0 6.627 5.373 12 12 12h160c6.627 0 12-5.373 12-12V20c0-6.627-5.373-12-12-12z"/>\n</symbol>\n<symbol id="svg-arrow-left" viewBox="0 0 320 512">\n  <path d="M206.7 464.6l-183.1-191.1C18.22 267.1 16 261.1 16 256s2.219-11.97 6.688-16.59l183.1-191.1c9.152-9.594 24.34-9.906 33.9-.7187c9.625 9.125 9.938 24.37 .7187 33.91L73.24 256l168 175.4c9.219 9.5 8.906 24.78-.7187 33.91C231 474.5 215.8 474.2 206.7 464.6z"/>\n</symbol>\n<symbol id="svg-arrow-right" viewBox="0 0 320 512">\n  <path d="M113.3 47.41l183.1 191.1c4.469 4.625 6.688 10.62 6.688 16.59s-2.219 11.97-6.688 16.59l-183.1 191.1c-9.152 9.594-24.34 9.906-33.9 .7187c-9.625-9.125-9.938-24.38-.7187-33.91l168-175.4L78.71 80.6c-9.219-9.5-8.906-24.78 .7187-33.91C88.99 37.5 104.2 37.82 113.3 47.41z"/>\n</symbol>\n<symbol id="svg-tab" viewBox="0 0 448 512">\n  <path d="M32 217.1c0-8.8 7.2-16 16-16h144v-93.9c0-7.1 8.6-10.7 13.6-5.7l143.5 143.1c6.3 6.3 6.3 16.4 0 22.7L205.6 410.4c-5 5-13.6 1.5-13.6-5.7v-93.9H48c-8.8 0-16-7.2-16-16v-77.7m-32 0v77.7c0 26.5 21.5 48 48 48h112v61.9c0 35.5 43 53.5 68.2 28.3l143.6-143c18.8-18.8 18.8-49.2 0-68L228.2 78.9c-25.1-25.1-68.2-7.3-68.2 28.3v61.9H48c-26.5 0-48 21.6-48 48zM436 64h-8c-6.6 0-12 5.4-12 12v360c0 6.6 5.4 12 12 12h8c6.6 0 12-5.4 12-12V76c0-6.6-5.4-12-12-12z"/>\n</symbol>\n<symbol id="svg-paste" viewBox="0 0 512 512"><path d="M160 32c11.6 0 21.3 8.2 23.5 19.2C185 58.6 191.6 64 199.2 64H208c8.8 0 16 7.2 16 16V96H96V80c0-8.8 7.2-16 16-16h8.8c7.6 0 14.2-5.4 15.7-12.8C138.7 40.2 148.4 32 160 32zM64 64h2.7C65 69 64 74.4 64 80V96c0 17.7 14.3 32 32 32H224c17.7 0 32-14.3 32-32V80c0-5.6-1-11-2.7-16H256c17.7 0 32 14.3 32 32h32c0-35.3-28.7-64-64-64H210.6c-9-18.9-28.3-32-50.6-32s-41.6 13.1-50.6 32H64C28.7 32 0 60.7 0 96V384c0 35.3 28.7 64 64 64H192V416H64c-17.7 0-32-14.3-32-32V96c0-17.7 14.3-32 32-32zM288 480c-17.7 0-32-14.3-32-32V192c0-17.7 14.3-32 32-32h96v56c0 22.1 17.9 40 40 40h56V448c0 17.7-14.3 32-32 32H288zM416 165.3L474.7 224H424c-4.4 0-8-3.6-8-8V165.3zM448 512c35.3 0 64-28.7 64-64V235.9c0-12.7-5.1-24.9-14.1-33.9l-59.9-59.9c-9-9-21.2-14.1-33.9-14.1H288c-35.3 0-64 28.7-64 64V448c0 35.3 28.7 64 64 64H448z"/></symbol>\n<symbol id="svg-cut" viewBox="0 0 512 512"><path d="M485.6 444.2L333.6 314.9C326.9 309.2 326.1 299.1 331.8 292.4C337.5 285.6 347.6 284.8 354.4 290.5L506.4 419.8C513.1 425.5 513.9 435.6 508.2 442.4C502.5 449.1 492.4 449.9 485.6 444.2zM485.7 67.76C492.5 62.07 502.5 62.94 508.2 69.69C513.9 76.45 513.1 86.55 506.3 92.24L208.5 343.1C218.3 359.7 224 379.2 224 400C224 461.9 173.9 512 112 512C50.14 512 0 461.9 0 400C0 338.1 50.14 288 112 288C141.5 288 168.4 299.4 188.4 318.1L262.2 256L188.4 193.9C168.4 212.6 141.5 224 112 224C50.14 224 0 173.9 0 112C0 50.14 50.14 0 112 0C173.9 0 224 50.14 224 112C224 132.8 218.3 152.3 208.5 168.9L287 235.1L485.7 67.76zM32 112C32 156.2 67.82 192 112 192C156.2 192 192 156.2 192 112C192 67.82 156.2 32 112 32C67.82 32 32 67.82 32 112zM112 480C156.2 480 192 444.2 192 400C192 355.8 156.2 320 112 320C67.82 320 32 355.8 32 400C32 444.2 67.82 480 112 480z"/></symbol>\n<symbol id="svg-copy" viewBox="0 0 512 512"><path d="M272 416C263.2 416 256 423.2 256 432V448c0 17.67-14.33 32-32 32H64c-17.67 0-32-14.33-32-32V192c0-17.67 14.33-32 32-32h112C184.8 160 192 152.8 192 144C192 135.2 184.8 128 176 128H63.99c-35.35 0-64 28.65-64 64l.0098 256C0 483.3 28.65 512 64 512h160c35.35 0 64-28.65 64-64v-16C288 423.2 280.8 416 272 416zM502.6 86.63l-77.25-77.25C419.4 3.371 411.2 0 402.7 0H288C252.7 0 224 28.65 224 64v256c0 35.35 28.65 64 64 64h160c35.35 0 64-28.65 64-64V109.3C512 100.8 508.6 92.63 502.6 86.63zM416 45.25L466.7 96H416V45.25zM480 320c0 17.67-14.33 32-32 32h-160c-17.67 0-32-14.33-32-32V64c0-17.67 14.33-32 32-32h96l.0026 64c0 17.67 14.33 32 32 32H480V320z"/>\n</symbol>\n<symbol id="svg-angle-double-right" viewBox="0 0 512 512"><path d="M470.6 278.6c12.5-12.5 12.5-32.8 0-45.3l-160-160c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3L402.7 256 265.4 393.4c-12.5 12.5-12.5 32.8 0 45.3s32.8 12.5 45.3 0l160-160zm-352 160l160-160c12.5-12.5 12.5-32.8 0-45.3l-160-160c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3L210.7 256 73.4 393.4c-12.5 12.5-12.5 32.8 0 45.3s32.8 12.5 45.3 0z"/>\n</symbol>\n<symbol id="svg-angle-double-left" viewBox="0 0 512 512"><path d="M41.4 233.4c-12.5 12.5-12.5 32.8 0 45.3l160 160c12.5 12.5 32.8 12.5 45.3 0s12.5-32.8 0-45.3L109.3 256 246.6 118.6c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0l-160 160zm352-160l-160 160c-12.5 12.5-12.5 32.8 0 45.3l160 160c12.5 12.5 32.8 12.5 45.3 0s12.5-32.8 0-45.3L301.3 256 438.6 118.6c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0z"/>\n</symbol>\n<symbol id="svg-trash" viewBox="0 0 448 512">\n  <path d="M336 64l-33.6-44.8C293.3 7.1 279.1 0 264 0h-80c-15.1 0-29.3 7.1-38.4 19.2L112 64H24C10.7 64 0 74.7 0 88v2c0 3.3 2.7 6 6 6h26v368c0 26.5 21.5 48 48 48h288c26.5 0 48-21.5 48-48V96h26c3.3 0 6-2.7 6-6v-2c0-13.3-10.7-24-24-24h-88zM184 32h80c5 0 9.8 2.4 12.8 6.4L296 64H152l19.2-25.6c3-4 7.8-6.4 12.8-6.4zm200 432c0 8.8-7.2 16-16 16H80c-8.8 0-16-7.2-16-16V96h320v368zm-176-44V156c0-6.6 5.4-12 12-12h8c6.6 0 12 5.4 12 12v264c0 6.6-5.4 12-12 12h-8c-6.6 0-12-5.4-12-12zm-80 0V156c0-6.6 5.4-12 12-12h8c6.6 0 12 5.4 12 12v264c0 6.6-5.4 12-12 12h-8c-6.6 0-12-5.4-12-12zm160 0V156c0-6.6 5.4-12 12-12h8c6.6 0 12 5.4 12 12v264c0 6.6-5.4 12-12 12h-8c-6.6 0-12-5.4-12-12z"/>\n</symbol>\n<symbol id="svg-keyboard-down" viewBox="0 0 576 512"><path d="M64 48c-8.8 0-16 7.2-16 16V240c0 8.8 7.2 16 16 16H512c8.8 0 16-7.2 16-16V64c0-8.8-7.2-16-16-16H64zM0 64C0 28.7 28.7 0 64 0H512c35.3 0 64 28.7 64 64V240c0 35.3-28.7 64-64 64H64c-35.3 0-64-28.7-64-64V64zM159 359c9.4-9.4 24.6-9.4 33.9 0l95 95 95-95c9.4-9.4 24.6-9.4 33.9 0s9.4 24.6 0 33.9L305 505c-4.5 4.5-10.6 7-17 7s-12.5-2.5-17-7L159 393c-9.4-9.4-9.4-24.6 0-33.9zm1-167c0-8.8 7.2-16 16-16H400c8.8 0 16 7.2 16 16v16c0 8.8-7.2 16-16 16H176c-8.8 0-16-7.2-16-16V192zM120 88h16c8.8 0 16 7.2 16 16v16c0 8.8-7.2 16-16 16H120c-8.8 0-16-7.2-16-16V104c0-8.8 7.2-16 16-16zm64 16c0-8.8 7.2-16 16-16h16c8.8 0 16 7.2 16 16v16c0 8.8-7.2 16-16 16H200c-8.8 0-16-7.2-16-16V104zm96-16h16c8.8 0 16 7.2 16 16v16c0 8.8-7.2 16-16 16H280c-8.8 0-16-7.2-16-16V104c0-8.8 7.2-16 16-16zm64 16c0-8.8 7.2-16 16-16h16c8.8 0 16 7.2 16 16v16c0 8.8-7.2 16-16 16H360c-8.8 0-16-7.2-16-16V104zm96-16h16c8.8 0 16 7.2 16 16v16c0 8.8-7.2 16-16 16H440c-8.8 0-16-7.2-16-16V104c0-8.8 7.2-16 16-16z"/></symbol>\n</svg>' +
              e.normalizedLayouts
                .map((t, n) =>
                  (function (e, t, n) {
                    let i = [];
                    if (!("layers" in t)) return "";
                    for (let r of t.layers)
                      i.push(
                        `<div tabindex="-1" class="MLK__layer" id="${r.id}">`
                      ),
                        (e.normalizedLayouts.length > 1 ||
                          t.displayEditToolbar) &&
                          (i.push("<div class='MLK__toolbar' role='toolbar'>"),
                          i.push(Fc(e, n)),
                          t.displayEditToolbar &&
                            i.push(
                              '<div class="ML__edit-toolbar right"></div>'
                            ),
                          i.push("</div>")),
                        i.push(Ic(e, r)),
                        i.push("</div>");
                    return i.join("");
                  })(e, t, n)
                )
                .join("")
          ));
        let i = document.createElement("div");
        (i.className = "MLK__backdrop"),
          i.appendChild(n),
          t.appendChild(i),
          t.addEventListener("pointerdown", Uc, { passive: !1 });
        let r = t.querySelectorAll(".ML__edit-toolbar");
        if (r)
          for (let o of r)
            o.addEventListener("click", (t) => {
              var n, i;
              let r = t.target,
                a = "";
              for (; r && !a; )
                (a =
                  null !=
                  (n = null == r ? void 0 : r.getAttribute("data-command"))
                    ? n
                    : ""),
                  (r =
                    null != (i = null == r ? void 0 : r.parentElement)
                      ? i
                      : null);
              a && e.executeCommand(JSON.parse(a));
            });
        !(function (e) {
          for (let t of e) qc(t);
        })(
          t.querySelectorAll(".MLK__keycap, .action, .fnbutton, .bigfnbutton")
        );
        let a = t.querySelectorAll(".MLK__layer");
        a.length;
        for (let o of a)
          o.addEventListener("pointerdown", (e) => e.preventDefault());
        return (e.currentLayer = e.latentLayer), t;
      }
      function Ic(e, t) {
        if ("string" == typeof t) return t;
        let n = "";
        if (
          ("string" == typeof t.style
            ? (n += `<style>${t.style}</style>`)
            : "object" == typeof t.style &&
              (n += `<style>${Bc(t.style)}</style>`),
          t.backdrop && (n += `<div class='${t.backdrop}'>`),
          t.container && (n += `<div class='${t.container}'>`),
          t.rows)
        ) {
          n += "<div class='MLK__rows'>";
          for (let i of t.rows) {
            n += "<div dir='ltr' class=row>";
            for (let t of i)
              if (t) {
                let i = e.registerKeycap(t),
                  [r, a] = Vc(t);
                /(^|\s)separator/.test(a)
                  ? (n += `<div class="${a}"`)
                  : (n += `<div tabindex="-1" id="${i}" class="${a}"`),
                  t.tooltip && (n += ` data-tooltip="${t.tooltip}"`),
                  (n += `>${r}</div>`);
              }
            n += "</div>";
          }
          n += "</div>";
        } else t.markup && (n += t.markup);
        return t.container && (n += "</div>"), t.backdrop && (n += "</div>"), n;
      }
      function Vc(e, t = { shifted: !1 }) {
        var n, i, r, a, o, s, l;
        let c = "",
          d = null != (n = e.class) ? n : "";
        if (
          (t.shifted && Yc(e) && (d += " is-active"), t.shifted && "shift" in e)
        )
          "string" == typeof e.shift
            ? (c = $c(e.shift))
            : "object" == typeof e.shift &&
              (c = e.shift.label
                ? e.shift.label
                : null !=
                  (i = $c(e.shift.latex || e.shift.insert || "") || e.shift.key)
                ? i
                : ""),
            "object" == typeof e.shift &&
              (d =
                null != (a = null != (r = e.shift.class) ? r : e.class)
                  ? a
                  : "");
        else {
          if (
            ((c = e.label
              ? e.label
              : null != (o = $c(e.latex || e.insert || "") || e.key)
              ? o
              : ""),
            e.shift)
          ) {
            let t;
            (t =
              "string" == typeof e.shift
                ? $c(e.shift)
                : e.shift.label
                ? e.shift.label
                : null !=
                  (s = $c(e.shift.latex || e.shift.insert || "") || e.shift.key)
                ? s
                : ""),
              (c += `<span class="MLK__shift">${t}</span>`);
          }
          e.aside && (c += `<aside>${e.aside}</aside>`);
        }
        return (
          e.layer && !/layer-switch/.test(d) && (d += " layer-switch"),
          /(^|\s)(separator|action|shift|fnbutton|bigfnbutton)($|\s)/.test(d) ||
            (d += " MLK__keycap"),
          !/\bw[0-9]+\b/.test(d) &&
            e.width &&
            (d +=
              null !=
              (l = { 0: " w0", 0.5: " w5", 1.5: " w15", 2: " w20", 5: " w50" }[
                e.width
              ])
                ? l
                : ""),
          [c, d || "MLK__keycap"]
        );
      }
      var jc,
        Hc = {
          "[left]": {
            class: "action hide-shift",
            label:
              "<svg class=svg-glyph><use xlink:href=#svg-arrow-left /></svg>",
            command: ["performWithFeedback", "moveToPreviousChar"],
            shift: {
              label:
                "<svg class=svg-glyph><use xlink:href=#svg-angle-double-left /></svg>",
              command: ["performWithFeedback", "extendSelectionBackward"],
            },
          },
          "[right]": {
            class: "action hide-shift",
            label:
              "<svg class=svg-glyph><use xlink:href=#svg-arrow-right /></svg>",
            command: ["performWithFeedback", "moveToNextChar"],
            shift: {
              label:
                "<svg class=svg-glyph><use xlink:href=#svg-angle-double-right /></svg>",
              command: ["performWithFeedback", "extendSelectionForward"],
            },
          },
          "[return]": {
            class: "action",
            command: ["performWithFeedback", "commit"],
            width: 1.5,
            label: "<svg class=svg-glyph><use xlink:href=#svg-commit /></svg>",
          },
          "[action]": {
            class: "action",
            command: ["performWithFeedback", "commit"],
            width: 1.5,
            label: "<svg class=svg-glyph><use xlink:href=#svg-commit /></svg>",
          },
          "[hr]": { class: "separator horizontal-rule" },
          "[hide-keyboard]": {
            class: "action",
            command: ["performWithFeedback", "hideVirtualKeyboard"],
            width: 1.5,
            label:
              "<svg class=svg-glyph-lg><use xlink:href=#svg-keyboard-down /></svg>",
          },
          "[.]": {
            variants: ".",
            command: "insertDecimalSeparator",
            shift: ",",
            class: "big-op hide-shift",
          },
          "[+]": {
            variants: [{ latex: "\\sum_{#0}^{#0}", class: "small" }, "\\oplus"],
            latex: "+",
            label: "+",
            class: "big-op hide-shift",
            shift: {
              latex: "\\sum",
              insert: "\\sum_{#?}^{#?}",
              class: "small",
            },
          },
          "[-]": {
            variants: ["\\pm", "\\ominus"],
            latex: "-",
            label: "&#x2212;",
            shift: "\\pm",
            class: "big-op hide-shift",
          },
          "[/]": {
            class: "big-op hide-shift",
            shift: { class: "", latex: "\\frac{1}{#@}" },
            variants: ["/", "\\div", "\\%", "\\oslash"],
            latex: "\\frac{#@}{#?}",
            label: "&divide;",
          },
          "[*]": {
            variants: [
              { latex: "\\prod_{#0}^{#0}", class: "small" },
              "\\otimes",
            ],
            latex: "\\times",
            label: "&times;",
            shift: {
              latex: "\\prod",
              insert: "\\prod_{#?}^{#?}",
              class: "small",
            },
            class: "big-op hide-shift",
          },
          "[=]": {
            variants: [
              "\\neq",
              "\\equiv",
              "\\varpropto",
              "\\thickapprox",
              "\\lt",
              "\\gt",
              "\\le",
              "\\ge",
            ],
            latex: "=",
            label: "=",
            shift: { label: "\u2260", latex: "\\ne" },
            class: "big-op hide-shift",
          },
          "[backspace]": {
            class: "action bottom right hide-shift",
            width: 1.5,
            command: ["performWithFeedback", "deleteBackward"],
            label:
              "<svg class=svg-glyph><use xlink:href=#svg-delete-backward /></svg>",
            shift: {
              class: "action warning",
              label: "<svg class=svg-glyph><use xlink:href=#svg-trash /></svg>",
              command: "deleteAll",
            },
          },
          "[undo]": {
            class: "ghost if-can-undo",
            command: "undo",
            label: "<svg class=svg-glyph><use xlink:href=#svg-undo /></svg>",
            tooltip: v("tooltip.undo"),
          },
          "[redo]": {
            class: "ghost  if-can-redo",
            command: "redo",
            label: "<svg class=svg-glyph><use xlink:href=#svg-redo /></svg>",
            tooltip: v("tooltip.redo"),
          },
          "[(]": {
            variants: [
              { latex: "\\lbrack", key: "[" },
              "\\langle",
              "\\lfloor",
              "\\lceil",
              { latex: "\\lbrace", key: "{" },
            ],
            key: "(",
            label: "(",
            shift: { label: "[", key: "[" },
            class: "hide-shift",
          },
          "[)]": {
            variants: [
              { latex: "\\rbrack", key: "]" },
              "\\rangle",
              "\\rfloor",
              "\\rceil",
              { latex: "\\rbrace", key: "]" },
            ],
            key: ")",
            label: ")",
            shift: { label: "]", latex: "\\rbrack" },
            class: "hide-shift",
          },
          "[0]": {
            variants: "0",
            latex: "0",
            label: "0",
            shift: "\\infty",
            class: "hide-shift",
          },
          "[1]": {
            variants: "1",
            latex: "1",
            label: "1",
            shift: "#@^{-1}",
            class: "hide-shift",
          },
          "[2]": {
            variants: "2",
            latex: "2",
            label: "2",
            shift: "#@^2",
            class: "hide-shift",
          },
          "[3]": {
            variants: "3",
            latex: "3",
            label: "3",
            shift: "#@^3",
            class: "hide-shift",
          },
          "[4]": {
            variants: "4",
            latex: "4",
            label: "4",
            shift: "#@^4",
            class: "hide-shift",
          },
          "[5]": {
            variants: "5",
            latex: "5",
            label: "5",
            shift: "#@^5",
            class: "hide-shift",
          },
          "[6]": {
            variants: "6",
            latex: "6",
            label: "6",
            shift: "#@^6",
            class: "hide-shift",
          },
          "[7]": {
            variants: "7",
            latex: "7",
            label: "7",
            shift: "#@^7",
            class: "hide-shift",
          },
          "[8]": {
            variants: "8",
            latex: "8",
            label: "8",
            shift: "#@^8",
            class: "hide-shift",
          },
          "[9]": {
            variants: "9",
            latex: "9",
            label: "9",
            shift: "#@^9",
            class: "hide-shift",
          },
          "[separator-5]": { class: "separator", width: 0.5 },
          "[separator]": { class: "separator" },
          "[separator-10]": { class: "separator" },
          "[separator-15]": { class: "separator", width: 1.5 },
          "[separator-20]": { class: "separator", width: 2 },
          "[separator-50]": { class: "separator", width: 5 },
          "[shift]": {
            class: "shift bottom left",
            width: 1.5,
            label:
              "<span class=caps-lock-indicator></span><svg class=svg-glyph><use xlink:href=#svg-shift /></svg>",
          },
          "[foreground-color]": {
            variants: "foreground-color",
            command: ["applyStyle", { color: "red" }],
            label:
              "<span style='border-radius: 50%;width:22px;height:22px; border: 3px solid #cc2428; box-sizing: border-box'>",
          },
          "[background-color]": {
            variants: "background-color",
            command: ["applyStyle", { backgroundColor: "yellow" }],
            label:
              "<span style='border-radius: 50%;width:22px;height:22px; background:#fff590; box-sizing: border-box'></span>",
          },
        };
      function Wc(e) {
        var t;
        if ("string" == typeof e) {
          if (!Hc[e]) return { latex: e };
          e = { label: e };
        }
        let n;
        return (
          "label" in e &&
            e.label &&
            Hc[e.label] &&
            (n = u(d(d({}, Hc[e.label]), e), { label: Hc[e.label].label })),
          "key" in e &&
            e.key &&
            Hc[e.key] &&
            (n = u(d(d({}, Hc[e.key]), e), { key: Hc[e.key].key })),
          n
            ? ("insertDecimalSeparator" === n.command &&
                (n.label =
                  null != (t = window.MathfieldElement.decimalSeparator)
                    ? t
                    : "."),
              "[action]" === e.label &&
                (n = d(d({}, n), window.mathVirtualKeyboard.actionKeycap)),
              "[shift]" === e.label &&
                (n = d(d({}, n), window.mathVirtualKeyboard.shiftKeycap)),
              "[backspace]" === e.label &&
                (n = d(d({}, n), window.mathVirtualKeyboard.backspaceKeycap)),
              "[tab]" === e.label &&
                (n = d(d({}, n), window.mathVirtualKeyboard.tabKeycap)),
              n)
            : e
        );
      }
      function Uc(e) {
        var t;
        if (0 !== e.button) return;
        let n = Qc.singleton;
        if (!n) return;
        let i = e.target;
        for (; i && !i.getAttribute("data-layer"); ) i = i.parentElement;
        if (i)
          return (
            (n.currentLayer =
              null != (t = i.getAttribute("data-layer")) ? t : ""),
            void e.preventDefault()
          );
        let r = Zc(e.target);
        if (null == r || !r.id) return;
        let a = n.getKeycap(r.id);
        if (!a) return;
        e.type;
        let o = new AbortController();
        r.classList.add("is-pressed"),
          r.addEventListener("pointerenter", Jc(o), {
            capture: !0,
            signal: o.signal,
          }),
          r.addEventListener("pointerleave", Jc(o), {
            capture: !0,
            signal: o.signal,
          }),
          r.addEventListener("pointercancel", Jc(o), { signal: o.signal }),
          r.addEventListener("pointerup", Jc(o), { signal: o.signal }),
          Yc(a) && (r.classList.add("is-active"), n.incrementShiftPress()),
          a.variants &&
            (jc && clearTimeout(jc),
            (jc = setTimeout(() => {
              r.classList.contains("is-pressed") &&
                (r.classList.remove("is-pressed"),
                r.classList.add("is-active"),
                e.target &&
                  "releasePointerCapture" in e.target &&
                  e.target.releasePointerCapture(e.pointerId),
                Kc(r, () => {
                  o.abort(), null == r || r.classList.remove("is-active");
                }));
            }, 200))),
          e.preventDefault();
      }
      function Jc(e) {
        return (t) => {
          let n = Zc(t.target);
          if (null == n || !n.id) return;
          let i = Qc.singleton;
          if (!i) return;
          let r = i.getKeycap(n.id);
          if (r) {
            if (
              ("pointerenter" === t.type &&
                t.target === n &&
                t.isPrimary &&
                n.classList.add("is-pressed"),
              "pointercancel" === t.type)
            )
              return (
                n.classList.remove("is-pressed"),
                Yc(r) &&
                  (i.decrementShiftPress(),
                  n.classList.toggle("is-active", i.isShifted)),
                void e.abort()
              );
            if ("pointerleave" === t.type && t.target === n)
              return (
                n.classList.remove("is-pressed"),
                void (
                  Yc(r) &&
                  (i.decrementShiftPress(),
                  n.classList.toggle("is-active", i.isShifted))
                )
              );
            if ("pointerup" === t.type)
              return (
                jc && clearTimeout(jc),
                Yc(r)
                  ? n.classList.toggle("is-active", i.isShifted)
                  : n.classList.contains("is-pressed") &&
                    (n.classList.remove("is-pressed"),
                    i.isShifted && r.shift
                      ? "string" == typeof r.shift
                        ? i.executeCommand([
                            "insert",
                            r.shift,
                            {
                              focus: !0,
                              feedback: !0,
                              scrollIntoView: !0,
                              mode: "math",
                              format: "latex",
                              resetStyle: !0,
                            },
                          ])
                        : Xc(r.shift)
                      : Xc(r),
                    1 === i.shiftPressCount && i.resetShiftPress()),
                e.abort(),
                void t.preventDefault()
              );
          }
        };
      }
      function Xc(e) {
        var t;
        let n = e.command;
        !n &&
          e.insert &&
          (n = [
            "insert",
            e.insert,
            {
              focus: !0,
              feedback: !0,
              scrollIntoView: !0,
              mode: "math",
              format: "latex",
              resetStyle: !0,
            },
          ]),
          !n &&
            e.key &&
            (n = [
              "typedText",
              e.key,
              { focus: !0, feedback: !0, simulateKeystroke: !0 },
            ]),
          !n &&
            e.latex &&
            (n = [
              "insert",
              e.latex,
              {
                focus: !0,
                feedback: !0,
                scrollIntoView: !0,
                mode: "math",
                format: "latex",
                resetStyle: !0,
              },
            ]),
          n ||
            (n = [
              "typedText",
              e.label,
              { focus: !0, feedback: !0, simulateKeystroke: !0 },
            ]),
          null == (t = Qc.singleton) || t.executeCommand(n);
      }
      function Gc(e) {
        if (1 !== e.nodeType) return !1;
        let t = e.classList;
        return (
          t.contains("MLK__keycap") ||
          t.contains("shift") ||
          t.contains("action") ||
          t.contains("fnbutton") ||
          t.contains("bigfnbutton")
        );
      }
      function Zc(e) {
        if (!e) return;
        let t = e;
        for (; t && !Gc(t); ) t = t.parentElement;
        return null != t ? t : void 0;
      }
      function Yc(e) {
        return !!e.class && /(^|\s)shift($|\s)/.test(e.class);
      }
      var Qc = class e {
        constructor() {
          var e, t, n;
          (this.originalContainerBottomPadding = null),
            (this.keycapRegistry = {}),
            (this._isCapslock = !1),
            (this._shiftPressCount = 0),
            (this._isShifted = !1),
            (this.targetOrigin = window.origin),
            (this.originValidator = "none"),
            (this._alphabeticLayout = "auto"),
            (this._layouts = Object.freeze(["default"])),
            (this._editToolbar = "default"),
            (this._container =
              null != (t = null == (e = window.document) ? void 0 : e.body)
                ? t
                : null),
            (this._visible = !1),
            (this._rebuilding = !1),
            (this.observer = new ResizeObserver((e) => {
              this.adjustBoundingRect(),
                this.dispatchEvent(new Event("geometrychange")),
                this.sendMessage("geometry-changed", {
                  boundingRect: this.boundingRect,
                });
            })),
            (this.listeners = {}),
            null == (n = window.top) || n.addEventListener("message", this),
            document.body.addEventListener("focusin", (e) => {
              var t;
              let n = e.target;
              if (
                null != n &&
                n.isConnected &&
                "math-field" ===
                  (null == (t = n.tagName) ? void 0 : t.toLowerCase()) &&
                ("matchMedia" in window
                  ? window.matchMedia("(any-pointer: coarse)").matches
                  : "ontouchstart" in window || navigator.maxTouchPoints > 0)
              ) {
                let e = n;
                "auto" === e.mathVirtualKeyboardPolicy &&
                  !e.readOnly &&
                  this.show({ animate: !0 });
              }
            }),
            document.addEventListener("focusout", (e) => {
              "manual" !== e.target.mathVirtualKeyboardPolicy &&
                setTimeout(() => {
                  var e, t, n;
                  let i = document.activeElement,
                    r = !1;
                  for (; i; ) {
                    if (
                      "math-field" ===
                      (null == (e = i.tagName) ? void 0 : e.toLowerCase())
                    ) {
                      r = !0;
                      break;
                    }
                    i =
                      null !=
                      (n =
                        null == (t = i.shadowRoot) ? void 0 : t.activeElement)
                        ? n
                        : null;
                  }
                  r || this.hide();
                }, 300);
            });
        }
        get currentLayer() {
          var e, t, n;
          return null !=
            (n =
              null ==
              (t =
                null == (e = this._element)
                  ? void 0
                  : e.querySelector(".MLK__layer.is-visible"))
                ? void 0
                : t.id)
            ? n
            : "";
        }
        set currentLayer(e) {
          var t;
          if (!this._element) return void (this.latentLayer = e);
          let n = e ? this._element.querySelector(`#${e}.MLK__layer`) : null;
          n || (n = this._element.querySelector(".MLK__layer")),
            n &&
              (null ==
                (t = this._element.querySelector(".MLK__layer.is-visible")) ||
                t.classList.remove("is-visible"),
              n.classList.add("is-visible")),
            this.isShifted && this.render();
        }
        get isCapslock() {
          return this._isCapslock;
        }
        set isCapslock(e) {
          var t;
          null == (t = this._element) ||
            t.classList.toggle("is-caps-lock", 2 === this.shiftPressCount),
            e !== this._isCapslock &&
              ((this._isCapslock = e), (this.isShifted = e));
        }
        get shiftPressCount() {
          return this._shiftPressCount;
        }
        incrementShiftPress() {
          ++this._shiftPressCount > 2
            ? this.resetShiftPress()
            : (this.isCapslock = !0);
        }
        decrementShiftPress() {
          (this._shiftPressCount = Math.max(--this._shiftPressCount, 0)),
            0 === this._shiftPressCount && (this.isCapslock = !1);
        }
        resetShiftPress() {
          (this._shiftPressCount = 0), (this.isCapslock = !1);
        }
        get isShifted() {
          return this._isShifted;
        }
        set isShifted(e) {
          this._isCapslock && (e = !0),
            this._isShifted !== e && ((this._isShifted = e), this.render());
        }
        resetKeycapRegistry() {
          this.keycapRegistry = {};
        }
        registerKeycap(e) {
          let t =
            "ML__k" +
            Date.now().toString(36).slice(-2) +
            Math.floor(1e5 * Math.random()).toString(36);
          return (this.keycapRegistry[t] = e), t;
        }
        getKeycap(e) {
          return e ? this.keycapRegistry[e] : void 0;
        }
        getLayer(e) {
          let t = this.normalizedLayouts;
          for (let n of t) for (let t of n.layers) if (t.id === e) return t;
        }
        get alphabeticLayout() {
          return this._alphabeticLayout;
        }
        set alphabeticLayout(e) {
          (this._alphabeticLayout = e), this.rebuild();
        }
        get actionKeycap() {
          return this._actionKeycap;
        }
        set actionKeycap(e) {
          this._actionKeycap = "string" == typeof e ? { label: e } : e;
        }
        get shiftKeycap() {
          return this._shiftKeycap;
        }
        set shiftKeycap(e) {
          this._shiftKeycap = "string" == typeof e ? { label: e } : e;
        }
        get backspaceKeycap() {
          return this._backspaceKeycap;
        }
        set backspaceKeycap(e) {
          this._backspaceKeycap = "string" == typeof e ? { label: e } : e;
        }
        get tabKeycap() {
          return this._tabKeycap;
        }
        set tabKeycap(e) {
          this._tabKeycap = "string" == typeof e ? { label: e } : e;
        }
        get layouts() {
          return this._layouts;
        }
        set layouts(e) {
          this.updateNormalizedLayouts(e), this.rebuild();
        }
        updateNormalizedLayouts(e) {
          let t = Array.isArray(e) ? [...e] : [e],
            n = t.findIndex((e) => "default" === e);
          n >= 0 && t.splice(n, 1, "numeric", "symbols", "alphabetic", "greek"),
            (this._layouts = Object.freeze(t)),
            (this._normalizedLayouts = t.map((e) => Oc(e)));
        }
        get normalizedLayouts() {
          return (
            this._normalizedLayouts ||
              this.updateNormalizedLayouts(this._layouts),
            this._normalizedLayouts
          );
        }
        get editToolbar() {
          return this._editToolbar;
        }
        set editToolbar(e) {
          (this._editToolbar = e), this.rebuild();
        }
        get container() {
          return this._container;
        }
        set container(e) {
          (this._container = e), this.rebuild();
        }
        static get singleton() {
          if (void 0 === this._singleton)
            try {
              this._singleton = new e();
            } catch (t) {
              this._singleton = null;
            }
          return this._singleton;
        }
        get style() {
          return this._style;
        }
        addEventListener(e, t, n) {
          this.listeners[e] || (this.listeners[e] = new Set()),
            this.listeners[e].has(t) || this.listeners[e].add(t);
        }
        dispatchEvent(e) {
          return (
            !this.listeners[e.type] ||
            0 === this.listeners[e.type].size ||
            (this.listeners[e.type].forEach((t) => {
              "function" == typeof t ? t(e) : null == t || t.handleEvent(e);
            }),
            !e.defaultPrevented)
          );
        }
        removeEventListener(e, t, n) {
          this.listeners[e] && this.listeners[e].delete(t);
        }
        get element() {
          return this._element;
        }
        set element(e) {
          var t;
          this._element !== e &&
            (null == (t = this._element) || t.remove(), (this._element = e));
        }
        get visible() {
          return this._visible;
        }
        set visible(e) {
          e ? this.show() : this.hide();
        }
        get boundingRect() {
          var e;
          if (!this._visible) return new DOMRect();
          let t =
            null == (e = this._element)
              ? void 0
              : e.getElementsByClassName("MLK__plate")[0];
          return t ? t.getBoundingClientRect() : new DOMRect();
        }
        adjustBoundingRect() {
          var e, t;
          let n = this.boundingRect.height;
          if (this.container === document.body) {
            null == (e = this._element) ||
              e.style.setProperty(
                "--_keyboard-height",
                `calc(${n}px + env(safe-area-inset-bottom, 0))`
              );
            let t = n - 1;
            this.container.style.paddingBottom = this
              .originalContainerBottomPadding
              ? `calc(${this.originalContainerBottomPadding} + ${t}px)`
              : `${t}px`;
          } else
            null == (t = this._element) ||
              t.style.setProperty("--_keyboard-height", `${n}px`);
        }
        rebuild() {
          if (this._rebuilding || !this._element) return;
          this._rebuilding = !0;
          let e = this.currentLayer;
          requestAnimationFrame(() => {
            (this._rebuilding = !1),
              this._element &&
                (this._element.remove(), (this._element = void 0)),
              this.visible &&
                (this.buildAndAttachElement(),
                (this.currentLayer = e),
                this.render(),
                this.adjustBoundingRect(),
                this._element.classList.add("is-visible"));
          });
        }
        render() {
          if (!this._element) return;
          let e = this.getLayer(this.currentLayer);
          this._element.classList.toggle(
            "backdrop-is-transparent",
            !(!e || (!e.backdrop && !e.container))
          );
          let t = this._element.querySelectorAll(
            ".MLK__layer.is-visible .MLK__keycap, .MLK__layer.is-visible .action, .fnbutton, .MLK__layer.is-visible .bigfnbutton, .MLK__layer.is-visible .shift"
          );
          if (t)
            for (let n of t) {
              let e = this.getKeycap(n.id);
              if (e) {
                let [t, i] = Vc(e, { shifted: this.isShifted });
                (n.innerHTML = window.MathfieldElement.createHTML(t)),
                  (n.className = i);
              }
            }
        }
        show(e) {
          var t;
          if (this._visible) return;
          let n = this.container;
          if (n && window.mathVirtualKeyboard && this.stateWillChange(!0)) {
            if (
              (this._element ||
                (this.buildAndAttachElement(), this.adjustBoundingRect()),
              !this._visible)
            ) {
              let e = this._element.getElementsByClassName("MLK__plate")[0];
              if ((e && this.observer.observe(e), n === window.document.body)) {
                let t = n.style.paddingBottom;
                this.originalContainerBottomPadding = t;
                let i = e.offsetHeight - 1;
                n.style.paddingBottom = t ? `calc(${t} + ${i}px)` : `${i}px`;
              }
              window.addEventListener("mouseup", this),
                window.addEventListener("blur", this),
                window.addEventListener("keydown", this, { capture: !0 }),
                window.addEventListener("keyup", this, { capture: !0 }),
                (this.currentLayer = this.latentLayer),
                this.render(),
                null == (t = this._element) ||
                  t.classList.toggle(
                    "is-caps-lock",
                    2 === this.shiftPressCount
                  );
            }
            (this._visible = !0),
              null != e && e.animate
                ? requestAnimationFrame(() => {
                    this._element &&
                      (this._element.classList.add("animate"),
                      this._element.addEventListener(
                        "transitionend",
                        () => {
                          var e;
                          return null == (e = this._element)
                            ? void 0
                            : e.classList.remove("animate");
                        },
                        { once: !0 }
                      ),
                      this._element.classList.add("is-visible"),
                      this.stateChanged());
                  })
                : (this._element.classList.add("is-visible"),
                  this.stateChanged());
          }
        }
        hide(e) {
          var t;
          let n = this.container;
          if (n && this._visible && this.stateWillChange(!1)) {
            if (((this._visible = !1), this._element)) {
              this.latentLayer = this.currentLayer;
              let e = this._element.getElementsByClassName("MLK__plate")[0];
              e && this.observer.unobserve(e),
                window.removeEventListener("mouseup", this),
                window.removeEventListener("blur", this),
                window.removeEventListener("keydown", this, { capture: !0 }),
                window.removeEventListener("keyup", this, { capture: !0 }),
                window.removeEventListener("contextmenu", this, {
                  capture: !0,
                }),
                Dc(),
                us("core"),
                us("virtual-keyboard"),
                null == (t = this._element) || t.remove(),
                (this._element = void 0),
                null !== this.originalContainerBottomPadding &&
                  (n.style.paddingBottom = this.originalContainerBottomPadding);
            }
            this.stateChanged();
          }
        }
        get height() {
          var e, t;
          return null !=
            (t = null == (e = this.element) ? void 0 : e.offsetHeight)
            ? t
            : 0;
        }
        buildAndAttachElement() {
          var e;
          this.element,
            (this.element = Rc(this)),
            window.addEventListener("contextmenu", this, { capture: !0 }),
            this.element.addEventListener(
              "contextmenu",
              (e) => {
                e.shiftKey ||
                  ((e.ctrlKey || 2 === e.button) && Kc(e.target),
                  e.preventDefault(),
                  e.stopPropagation());
              },
              { capture: !0 }
            ),
            null == (e = this.container) || e.appendChild(this.element);
        }
        handleEvent(e) {
          if (Sc(e)) {
            if (!rs(e.origin, this.originValidator))
              throw new DOMException(
                `Message from unknown origin (${e.origin}) cannot be handled`,
                "SecurityError"
              );
            "disconnect" === e.data.action
              ? (this.connectedMathfieldWindow = void 0)
              : "update-setting" !== e.data.action &&
                "proxy-created" !== e.data.action &&
                "execute-command" !== e.data.action &&
                (e.source, (this.connectedMathfieldWindow = e.source)),
              this.handleMessage(e.data, e.source);
          }
          if (this._element)
            switch (e.type) {
              case "mouseup":
              case "blur":
                (document.body.style.userSelect = ""), (this.isShifted = !1);
                break;
              case "contextmenu":
                2 !== e.button && e.preventDefault();
                break;
              case "keydown":
                "Shift" === e.key && this.incrementShiftPress();
                break;
              case "keyup":
                "Shift" !== e.key &&
                  1 === this._shiftPressCount &&
                  ((this.isCapslock = !1), (this._shiftPressCount = 0));
            }
        }
        handleMessage(e, t) {
          let { action: n } = e;
          if ("execute-command" !== n) {
            if (
              ("connect" === n &&
                this.sendMessage(
                  "synchronize-proxy",
                  {
                    boundingRect: this.boundingRect,
                    alphabeticLayout: this._alphabeticLayout,
                    layouts: this._layouts,
                    editToolbar: this._editToolbar,
                  },
                  t
                ),
              "disconnect" !== n && window === window.top)
            ) {
              if ("show" === n)
                return void ("undefined" != typeof e.animate
                  ? this.show({ animate: e.animate })
                  : this.show());
              if ("hide" === n)
                return void ("undefined" != typeof e.animate
                  ? this.hide({ animate: e.animate })
                  : this.hide());
              if ("update-setting" === n)
                return (
                  e.alphabeticLayout &&
                    (this.alphabeticLayout = e.alphabeticLayout),
                  e.layouts && (this.layouts = e.layouts),
                  void (e.editToolbar && (this.editToolbar = e.editToolbar))
                );
              if ("proxy-created" === n)
                return void this.sendMessage(
                  "synchronize-proxy",
                  {
                    boundingRect: this.boundingRect,
                    alphabeticLayout: this._alphabeticLayout,
                    layouts: this._layouts,
                    editToolbar: this._editToolbar,
                  },
                  t
                );
            }
          } else {
            let { command: t } = e;
            if ("virtual-keyboard" !== kc(t) && window === window.parent)
              return;
            this.executeCommand(t);
          }
        }
        sendMessage(e, t, n) {
          if (
            (n || (n = this.connectedMathfieldWindow),
            null !== this.targetOrigin &&
              "null" !== this.targetOrigin &&
              n !== window)
          ) {
            if (n)
              n.postMessage(d({ type: _c, action: e }, t), {
                targetOrigin: this.targetOrigin,
              });
            else if (
              "execute-command" === e &&
              Array.isArray(t.command) &&
              "insert" === t.command[0]
            ) {
              let e = t.command[1].split("");
              for (let t of e)
                this.dispatchEvent(
                  new KeyboardEvent("keydown", { key: t, bubbles: !0 })
                ),
                  this.dispatchEvent(
                    new KeyboardEvent("keyup", { key: t, bubbles: !0 })
                  );
            }
          } else
            window.dispatchEvent(
              new MessageEvent("message", {
                source: window,
                data: d({ type: _c, action: e }, t),
              })
            );
        }
        stateWillChange(e) {
          return this.dispatchEvent(
            new CustomEvent("before-virtual-keyboard-toggle", {
              detail: { visible: e },
              bubbles: !0,
              cancelable: !0,
              composed: !0,
            })
          );
        }
        stateChanged() {
          this.dispatchEvent(new Event("virtual-keyboard-toggle")),
            this.sendMessage("geometry-changed", {
              boundingRect: this.boundingRect,
            });
        }
        focus() {
          this.sendMessage("focus", {});
        }
        blur() {
          this.sendMessage("blur", {});
        }
        updateToolbar(e) {
          let t = this._element;
          if (!t) return;
          t.classList.toggle("can-undo", e.canUndo),
            t.classList.toggle("can-redo", e.canRedo),
            t.classList.toggle("can-copy", !e.selectionIsCollapsed),
            t.classList.toggle("can-copy", !e.selectionIsCollapsed),
            t.classList.toggle("can-paste", !0);
          let n = t.querySelectorAll(".ML__edit-toolbar");
          if (n) for (let i of n) i.innerHTML = Nc(this, e);
        }
        update(e) {
          (this._style = e.style), this.updateToolbar(e);
        }
        connect() {
          this.connectedMathfieldWindow = window;
        }
        disconnect() {
          this.connectedMathfieldWindow = void 0;
        }
        executeCommand(e) {
          let t,
            n = [];
          return (
            m(e) ? ((t = e[0]), (n = e.slice(1))) : (t = e),
            (t = t.replace(/-\w/g, (e) => e[1].toUpperCase())),
            "virtual-keyboard" === kc(e)
              ? vc[t].fn(...n)
              : (this.sendMessage("execute-command", { command: e }), !1)
          );
        }
        dispose() {
          window.removeEventListener("mouseup", this),
            window.removeEventListener("blur", this),
            window.removeEventListener("message", this);
        }
      };
      if (f() && !("mathVirtualKeyboard" in window))
        if (window === window.top) {
          let e = Qc.singleton;
          Object.defineProperty(window, "mathVirtualKeyboard", {
            get: () => e,
          });
        } else
          Object.defineProperty(window, "mathVirtualKeyboard", {
            get: () => Mc.singleton,
            configurable: !0,
          });
      function ed(e) {
        let t = {};
        for (let n of Object.keys(e))
          switch (n) {
            case "scriptDepth":
              if (m(e.scriptDepth))
                t.scriptDepth = [e.scriptDepth[0], e.scriptDepth[1]];
              else {
                if ("number" != typeof e.scriptDepth)
                  throw new TypeError("Unexpected value for scriptDepth");
                t.scriptDepth = [e.scriptDepth, e.scriptDepth];
              }
              break;
            case "mathVirtualKeyboardPolicy":
              let i = e.mathVirtualKeyboardPolicy.toLowerCase();
              if ("sandboxed" === i) {
                if (window !== window.top) {
                  let e = Qc.singleton;
                  Object.defineProperty(window, "mathVirtualKeyboard", {
                    get: () => e,
                  });
                }
                i = "manual";
              }
              t.mathVirtualKeyboardPolicy = i;
              break;
            case "letterShapeStyle":
              "auto" === e.letterShapeStyle
                ? b.locale.startsWith("fr")
                  ? (t.letterShapeStyle = "french")
                  : (t.letterShapeStyle = "tex")
                : (t.letterShapeStyle = e.letterShapeStyle);
              break;
            case "defaultMode":
              ["text", "math", "inline-math"].includes(e.defaultMode)
                ? (t.defaultMode = e.defaultMode)
                : (console.error(
                    'MathLive 0.95.0:  valid values for defaultMode are "text", "math" or "inline-math"'
                  ),
                  (t.defaultMode = "math"));
              break;
            case "macros":
              t.macros = te(e.macros);
              break;
            default:
              m(e[n])
                ? (t[n] = [...e[n]])
                : "object" != typeof e[n] ||
                  e[n] instanceof Element ||
                  "computeEngine" === n
                ? (t[n] = e[n])
                : (t[n] = d({}, e[n]));
          }
        return t;
      }
      function td(e, t) {
        let n;
        n = "string" == typeof t ? [t] : void 0 === t ? Object.keys(e) : t;
        let i = {};
        for (let r of n)
          null === e[r]
            ? (i[r] = null)
            : m(e[r])
            ? (i[r] = [...e[r]])
            : "object" != typeof e[r] ||
              e[r] instanceof Element ||
              "computeEngine" === r
            ? (i[r] = e[r])
            : (i[r] = d({}, e[r]));
        return "string" == typeof t ? i[t] : i;
      }
      function nd() {
        return {
          readOnly: !1,
          defaultMode: "math",
          macros: {},
          registers: {},
          colorMap: L,
          backgroundColorMap: C,
          letterShapeStyle: b.locale.startsWith("fr") ? "french" : "tex",
          minFontScale: 0,
          smartMode: !1,
          smartFence: !0,
          smartSuperscript: !0,
          scriptDepth: [1 / 0, 1 / 0],
          removeExtraneousParentheses: !0,
          mathModeSpace: "",
          placeholderSymbol: "\u25a2",
          popoverPolicy: "auto",
          environmentPopoverPolicy: "auto",
          keybindings: Uo,
          inlineShortcuts: Oo,
          inlineShortcutTimeout: 0,
          mathVirtualKeyboardPolicy: "auto",
          virtualKeyboardTargetOrigin: null == window ? void 0 : window.origin,
          originValidator: "none",
          onInlineShortcut: () => "",
          onScrollIntoView: null,
          onExport: jo,
          value: "",
        };
      }
      function id(e) {
        return "inline-math" === e.defaultMode ? "math" : e.defaultMode;
      }
      function rd(e) {
        return "number" == typeof e && !Number.isNaN(e);
      }
      function ad(e) {
        return Array.isArray(e) && 2 === e.length;
      }
      function od(e) {
        return (
          null != e &&
          "object" == typeof e &&
          "ranges" in e &&
          Array.isArray(e.ranges)
        );
      }
      var sd = "<mo>&#x2061;</mo>",
        ld = "<mo>&#8290;</mo>";
      function cd(e) {
        return e
          .replace(/"/g, "&quot;")
          .replace(/'/g, "&#39;")
          .replace(/</g, "&lt;")
          .replace(/>/g, "&gt;");
      }
      function dd(e, t) {
        return e && t.generateID ? ` extid="${e}"` : "";
      }
      function ud(e, t, n) {
        var i, r, a, o, s, l, c, d, u;
        let h = !1;
        t = null != t ? t : e.atoms.length;
        let p = "",
          m = "",
          f = e.atoms[e.index],
          y = null != (r = null == (i = f.style) ? void 0 : i.variant) ? r : "",
          g =
            null != (o = null == (a = f.style) ? void 0 : a.variantStyle)
              ? o
              : "",
          b = "";
        (y || g) &&
          ((b =
            null !=
            (s = {
              upnormal: "normal",
              boldnormal: "bold",
              italicmain: "italic",
              bolditalicmain: "bold-italic",
              "double-struck": "double-struck",
              boldfraktur: "bold-fraktur",
              calligraphic: "script",
              upcalligraphic: "script",
              script: "script",
              boldscript: "bold-script",
              boldcalligraphic: "bold-script",
              fraktur: "fraktur",
              "upsans-serif": "sans-serif",
              "boldsans-serif": "bold-sans-serif",
              "italicsans-serif": "sans-serif-italic",
              "bolditalicsans-serif": "sans-serif-bold-italic",
              monospace: "monospace",
            }[g + y])
              ? s
              : ""),
          (b = `mathvariant="${b}"`));
        let v = {
          "\\exponentialE": "&#x02147;",
          "\\imaginaryI": "&#x2148;",
          "\\differentialD": "&#x2146;",
          "\\capitalDifferentialD": "&#x2145;",
          "\\alpha": "&#x03b1;",
          "\\pi": "&#x03c0;",
          "\\infty": "&#x221e;",
          "\\forall": "&#x2200;",
          "\\nexists": "&#x2204;",
          "\\exists": "&#x2203;",
          "\\hbar": "\u210f",
          "\\cdotp": "\u22c5",
          "\\ldots": "\u2026",
          "\\cdots": "\u22ef",
          "\\ddots": "\u22f1",
          "\\vdots": "\u22ee",
          "\\ldotp": ".",
        };
        if (v[f.command]) {
          e.index += 1;
          let t = `<mi${dd(f.id, n)}${b}>${v[f.command]}</mi>`;
          return (
            ("mi" === e.lastType ||
              "mn" === e.lastType ||
              "mtext" === e.lastType ||
              "fence" === e.lastType) &&
              (t = ld + t),
            hd(t, e, n) || ((e.mathML += t), (e.lastType = "mi")),
            !0
          );
        }
        if ("\\operatorname" === f.command) (m = vd(f.body)), (e.index += 1);
        else if (y || g)
          for (
            ;
            e.index < t &&
            ("mord" === f.type || "macro" === f.type) &&
            !f.isDigit() &&
            y ===
              (null != (c = null == (l = f.style) ? void 0 : l.variant)
                ? c
                : "") &&
            g ===
              (null != (u = null == (d = f.style) ? void 0 : d.variantStyle)
                ? u
                : "");

          )
            (m += vd([f])), (e.index += 1), (f = e.atoms[e.index]);
        else
          ("mord" === f.type || "macro" === f.type) &&
            !f.isDigit() &&
            ((m += vd([f])), (e.index += 1));
        if (m.length > 0) {
          (h = !0), (p = `<mi${b}>${m}</mi>`);
          let t = e.lastType;
          p.endsWith(">f</mi>") || p.endsWith(">g</mi>")
            ? ((p += sd), (e.lastType = "applyfunction"))
            : (e.lastType = /^<mo>(.*)<\/mo>$/.test(p) ? "mo" : "mi"),
            hd(p, e, n) ||
              (("mi" === t || "mn" === t || "mtext" === t || "fence" === t) &&
                (p = ld + p),
              (e.mathML += p));
        }
        return h;
      }
      function hd(e, t, n) {
        var i;
        let r = t.atoms[t.index - 1];
        if (!r) return !1;
        if (!r.superscript && !r.subscript) {
          if ("subsup" !== (null == (i = t.atoms[t.index]) ? void 0 : i.type))
            return !1;
          (r = t.atoms[t.index]), (t.index += 1);
        }
        let a = t.lastType;
        t.lastType = "";
        let o = gd(r.superscript, n);
        t.lastType = "";
        let s = gd(r.subscript, n);
        if (((t.lastType = a), !o && !s)) return !1;
        let l = "";
        return (
          o && s
            ? (l = `<msubsup>${e}${s}${o}</msubsup>`)
            : o
            ? (l = `<msup>${e}${o}</msup>`)
            : s && (l = `<msub>${e}${s}</msub>`),
          (t.mathML += l),
          (t.lastType = ""),
          !0
        );
      }
      function pd(e, t, n) {
        t = null != t ? t : e.atoms.length;
        let i = e.index,
          r = "";
        for (; e.index < t && "text" === e.atoms[e.index].mode; )
          (r += e.atoms[e.index].value ? e.atoms[e.index].value : " "),
            (e.index += 1);
        return (
          r.length > 0 &&
          ((e.mathML += `<mtext ${dd(e.atoms[i].id, n)}\n      >${r}</mtext>`),
          (e.lastType = "mtext"),
          !0)
        );
      }
      function md(e, t, n) {
        t = null != t ? t : e.atoms.length;
        let i = e.index,
          r = "",
          a = (function (e) {
            let t = -1,
              n = e.index,
              i = !1,
              r = !1;
            for (; n < e.atoms.length && !i && !r; ) {
              let t = e.atoms[n];
              (i = !t.isDigit()), (r = !i && void 0 !== t.superscript), n++;
            }
            return r && (t = n - 1), t;
          })(e);
        for (
          a >= 0 && a < t && (t = a);
          e.index < t && e.atoms[e.index].isDigit();

        )
          (r += e.atoms[e.index].asDigit()), (e.index += 1);
        return (
          !(r.length <= 0) &&
          ((r = "<mn" + dd(e.atoms[i].id, n) + ">" + r + "</mn>"),
          a < 0 &&
            (function (e) {
              return (
                e.index < e.atoms.length &&
                e.atoms[e.index].superscript &&
                "subsup" === e.atoms[e.index].type
              );
            })(e) &&
            ((a = e.index), (e.index += 1)),
          hd(r, e, n) || ((e.mathML += r), (e.lastType = "mn")),
          !0)
        );
      }
      function fd(e, t, n) {
        let i = !1;
        t = null != t ? t : e.atoms.length;
        let r = "",
          a = "";
        if (e.index < t && "mopen" === e.atoms[e.index].type) {
          let o = !1,
            s = 0,
            l = e.index,
            c = -1,
            d = l + 1;
          for (; d < t && !o; )
            "mopen" === e.atoms[d].type
              ? (s += 1)
              : "mclose" === e.atoms[d].type && (s -= 1),
              -1 === s && ((o = !0), (c = d)),
              (d += 1);
          o &&
            ((r = "<mrow>"),
            (r += bd(e.atoms[l], n)),
            (r += gd(e.atoms, n, l + 1, c)),
            (r += bd(e.atoms[c], n)),
            (r += "</mrow>"),
            (e.index = c + 1),
            ("mi" === e.lastType ||
              "mn" === e.lastType ||
              "mfrac" === e.lastType ||
              "fence" === e.lastType) &&
              (e.mathML += ld),
            hd(r, e, n) && ((i = !0), (e.lastType = ""), (r = "")),
            (a = "fence"));
        }
        return r.length > 0 && ((i = !0), (e.mathML += r), (e.lastType = a)), i;
      }
      function yd(e, t, n) {
        let i = !1;
        t = null != t ? t : e.atoms.length;
        let r = "",
          a = "",
          o = e.atoms[e.index],
          s = {
            "\\ne": "&ne;",
            "\\neq": "&neq;",
            "\\pm": "&#177;",
            "\\times": "&#215;",
            "\\colon": ":",
            "\\vert": "|",
            "\\Vert": "\u2225",
            "\\mid": "\u2223",
            "\\lbrace": "{",
            "\\rbrace": "}",
            "\\lparen": "(",
            "\\rparen": ")",
            "\\langle": "\u27e8",
            "\\rangle": "\u27e9",
            "\\lfloor": "\u230a",
            "\\rfloor": "\u230b",
            "\\lceil": "\u2308",
            "\\rceil": "\u2309",
          };
        if (s[o.command]) {
          e.index += 1;
          let t = `<mo${dd(o.id, n)}>${s[o.command]}</mo>`;
          return hd(t, e, n) || ((e.mathML += t), (e.lastType = "mo")), !0;
        }
        if (e.index < t && ("mbin" === o.type || "mrel" === o.type))
          (r += xd(e.atoms[e.index], n)), (e.index += 1), (a = "mo");
        else if (e.index < t && "mop" === o.type) {
          if (
            "over-under" === o.subsupPlacement &&
            (o.superscript || o.subscript)
          ) {
            let e = bd(o, n);
            o.superscript && o.subscript
              ? ((r += "<munderover>" + e),
                (r += gd(o.subscript, n)),
                (r += gd(o.superscript, n)),
                (r += "</munderover>"))
              : o.superscript
              ? ((r += "<mover>" + e),
                (r += gd(o.superscript, n)),
                (r += "</mover>"))
              : o.subscript &&
                ((r += "<munder>" + e),
                (r += gd(o.subscript, n)),
                (r += "</munder>")),
              (a = "mo");
          } else {
            let t = e.atoms[e.index],
              i = "\\operatorname" === t.value,
              o = i
                ? '<mi class="MathML-Unit"' +
                  dd(t.id, n) +
                  ">" +
                  vd(t.value) +
                  "</mi>"
                : bd(t, n);
            (r += o),
              i || /^<mo>(.*)<\/mo>$/.test(o)
                ? (a = i ? "mi" : "mo")
                : ((r += sd), (a = "applyfunction"));
          }
          ("mi" === e.lastType || "mn" === e.lastType) &&
            !/^<mo>(.*)<\/mo>$/.test(r) &&
            (r = ld + r),
            (e.index += 1);
        }
        return (
          r.length > 0 &&
            ((i = !0), hd(r, e, n) || ((e.mathML += r), (e.lastType = a))),
          i
        );
      }
      function gd(e, t, n, i) {
        null != t || (t = {});
        let r = {
          atoms: [],
          index: null != n ? n : 0,
          mathML: "",
          lastType: "",
        };
        if ("number" == typeof e || "boolean" == typeof e)
          r.mathML = e.toString();
        else if ("string" == typeof e) r.mathML = e;
        else if (e instanceof Eo) r.mathML = xd(e, t);
        else if (Array.isArray(e)) {
          r.atoms = e;
          let n = 0;
          for (i = i || (e ? e.length : 0); r.index < i; )
            if (
              pd(r, i, t) ||
              md(r, i, t) ||
              ud(r, i, t) ||
              yd(r, i, t) ||
              fd(r, i, t)
            )
              n += 1;
            else if (r.index < i) {
              let e = xd(r.atoms[r.index], t);
              "mn" === r.lastType &&
                e.length > 0 &&
                "genfrac" === r.atoms[r.index].type &&
                (e = "<mo>&#x2064;</mo>" + e),
                "genfrac" === r.atoms[r.index].type
                  ? (r.lastType = "mfrac")
                  : (r.lastType = ""),
                (r.index += 1),
                hd(e, r, t)
                  ? (n += 1)
                  : e.length > 0 && ((r.mathML += e), (n += 1));
            }
          n > 1 && (r.mathML = "<mrow>" + r.mathML + "</mrow>");
        }
        return r.mathML;
      }
      function bd(e, t) {
        let n = "",
          i = vd(e.value);
        return i && (n = "<mo" + dd(e.id, t) + ">" + i + "</mo>"), n;
      }
      function vd(e) {
        if (!e) return "";
        if ("string" == typeof e) return cd(e);
        if (!Array.isArray(e) && "string" == typeof e.body) return cd(e.body);
        let t = "";
        for (let n of e) "string" == typeof n.value && (t += n.value);
        return cd(t);
      }
      function xd(e, t) {
        var n, i, r, a, o, s, l, c, d, u, h, p, m, f, y, g, b, v, x, w, k, _;
        if ("text" === e.mode) return `<mi${dd(e.id, t)}>${e.value}</mi>`;
        let S,
          M,
          L,
          C,
          z,
          A,
          E = {
            widehat: "^",
            widecheck: "\u02c7",
            widetilde: "~",
            utilde: "~",
            overleftarrow: "\u2190",
            underleftarrow: "\u2190",
            xleftarrow: "\u2190",
            longleftarrow: "\u2190",
            overrightarrow: "\u2192",
            underrightarrow: "\u2192",
            xrightarrow: "\u2192",
            longrightarrow: "\u2192",
            underbrace: "\u23df",
            overbrace: "\u23de",
            overgroup: "\u23e0",
            undergroup: "\u23e1",
            overleftrightarrow: "\u2194",
            underleftrightarrow: "\u2194",
            xleftrightarrow: "\u2194",
            Overrightarrow: "\u21d2",
            xRightarrow: "\u21d2",
            overleftharpoon: "\u21bc",
            xleftharpoonup: "\u21bc",
            overrightharpoon: "\u21c0",
            xrightharpoonup: "\u21c0",
            xLeftarrow: "\u21d0",
            xLeftrightarrow: "\u21d4",
            xhookleftarrow: "\u21a9",
            xhookrightarrow: "\u21aa",
            xmapsto: "\u21a6",
            xrightharpoondown: "\u21c1",
            xleftharpoondown: "\u21bd",
            xrightleftharpoons: "\u21cc",
            longrightleftharpoons: "\u21cc",
            xleftrightharpoons: "\u21cb",
            xtwoheadleftarrow: "\u219e",
            xtwoheadrightarrow: "\u21a0",
            xlongequal: "=",
            xtofrom: "\u21c4",
            xleftrightarrows: "\u21c4",
            xRightleftharpoons: "\u21cc",
            longRightleftharpoons: "\u21cc",
            xLeftrightharpoons: "\u21cb",
            longLeftrightharpoons: "\u21cb",
          },
          K = {
            "\\!": -3 / 18,
            "\\ ": 6 / 18,
            "\\,": 3 / 18,
            "\\:": 4 / 18,
            "\\;": 5 / 18,
            "\\enspace": 0.5,
            "\\quad": 1,
            "\\qquad": 2,
            "\\enskip": 0.5,
          },
          D = "",
          T = "",
          { command: B } = e;
        if ("\\error" === e.command)
          return `<merror${dd(e.id, t)}>${gd(e.body, t)}</merror>`;
        let $ = {
            "\\vert": "|",
            "\\Vert": "\u2225",
            "\\mid": "\u2223",
            "\\lbrace": "{",
            "\\rbrace": "}",
            "\\lparen": "(",
            "\\rparen": ")",
            "\\langle": "\u27e8",
            "\\rangle": "\u27e9",
            "\\lfloor": "\u230a",
            "\\rfloor": "\u230b",
            "\\lceil": "\u2308",
            "\\rceil": "\u2309",
          },
          P = {
            "\\vec": "&#x20d7;",
            "\\acute": "&#x00b4;",
            "\\grave": "&#x0060;",
            "\\dot": "&#x02d9;",
            "\\ddot": "&#x00a8;",
            "\\tilde": "&#x007e;",
            "\\bar": "&#x00af;",
            "\\breve": "&#x02d8;",
            "\\check": "&#x02c7;",
            "\\hat": "&#x005e;",
          };
        switch (e.type) {
          case "first":
          case "line":
          case "overlap":
          case "subsup":
          case "phantom":
          case "composition":
          case "rule":
          case "chem":
            break;
          case "group":
          case "root":
            D = gd(e.body, t);
            break;
          case "array":
            if (
              (((e.leftDelim && "." !== e.leftDelim) ||
                (e.rightDelim && "." !== e.rightDelim)) &&
                ((D += "<mrow>"),
                e.leftDelim &&
                  "." !== e.leftDelim &&
                  (D += "<mo>" + ($[e.leftDelim] || e.leftDelim) + "</mo>")),
              (D += "<mtable"),
              e.colFormat)
            ) {
              for (D += ' columnalign="', L = 0; L < e.colFormat.length; L++)
                e.colFormat[L].align &&
                  (D +=
                    { l: "left", c: "center", r: "right" }[
                      e.colFormat[L].align
                    ] + " ");
              D += '"';
            }
            for (D += ">", M = 0; M < e.array.length; M++) {
              for (D += "<mtr>", S = 0; S < e.array[M].length; S++)
                D += "<mtd>" + gd(e.array[M][S], t) + "</mtd>";
              D += "</mtr>";
            }
            (D += "</mtable>"),
              ((e.leftDelim && "." !== e.leftDelim) ||
                (e.rightDelim && "." !== e.rightDelim)) &&
                (e.rightDelim &&
                  "." !== e.rightDelim &&
                  (D += "<mo>" + ($[e.leftDelim] || e.rightDelim) + "</mo>"),
                (D += "</mrow>"));
            break;
          case "genfrac":
            (e.leftDelim || e.rightDelim) && (D += "<mrow>"),
              e.leftDelim &&
                "." !== e.leftDelim &&
                (D +=
                  "<mo" +
                  dd(e.id, t) +
                  ">" +
                  ($[e.leftDelim] || e.leftDelim) +
                  "</mo>"),
              e.hasBarLine
                ? ((D += "<mfrac>"),
                  (D += gd(e.above, t) || "<mi>&nbsp;</mi>"),
                  (D += gd(e.below, t) || "<mi>&nbsp;</mi>"),
                  (D += "</mfrac>"))
                : ((D += "<mtable" + dd(e.id, t) + ">"),
                  (D += "<mtr>" + gd(e.above, t) + "</mtr>"),
                  (D += "<mtr>" + gd(e.below, t) + "</mtr>"),
                  (D += "</mtable>")),
              e.rightDelim &&
                "." !== e.rightDelim &&
                (D +=
                  "<mo" +
                  dd(e.id, t) +
                  ">" +
                  ($[e.rightDelim] || e.rightDelim) +
                  "</mo>"),
              (e.leftDelim || e.rightDelim) && (D += "</mrow>");
            break;
          case "surd":
            e.hasEmptyBranch("above")
              ? ((D += "<msqrt" + dd(e.id, t) + ">"),
                (D += gd(e.body, t)),
                (D += "</msqrt>"))
              : ((D += "<mroot" + dd(e.id, t) + ">"),
                (D += gd(e.body, t)),
                (D += gd(e.above, t)),
                (D += "</mroot>"));
            break;
          case "leftright":
            (D = "<mrow>"),
              e.leftDelim &&
                "." !== e.leftDelim &&
                (D += `<mo${dd(e.id, t)}>${
                  null != (n = $[e.leftDelim]) ? n : e.leftDelim
                }</mo>`),
              e.body && (D += gd(e.body, t)),
              e.rightDelim &&
                "." !== e.rightDelim &&
                (D += `<mo${dd(e.id, t)}>${
                  null != (i = $[e.rightDelim]) ? i : e.rightDelim
                }</mo>`),
              (D += "</mrow>");
            break;
          case "sizeddelim":
          case "delim":
            D += `<mo${dd(e.id, t)}>${$[e.delim] || e.delim}</mo>`;
            break;
          case "accent":
            (D += '<mover accent="true"' + dd(e.id, t) + ">"),
              (D += gd(e.body, t)),
              (D += "<mo>" + (P[B] || e.accent) + "</mo>"),
              (D += "</mover>");
            break;
          case "overunder":
            (z = e.above),
              (C = e.below),
              (e.svgAbove || z) && (e.svgBelow || C)
                ? (A = e.body)
                : z && z.length > 0
                ? ((A = e.body),
                  null != (a = null == (r = e.body) ? void 0 : r[0]) && a.below
                    ? ((C = e.body[0].below), (A = e.body[0].body))
                    : "first" ===
                        (null == (s = null == (o = e.body) ? void 0 : o[0])
                          ? void 0
                          : s.type) &&
                      null != (c = null == (l = e.body) ? void 0 : l[1]) &&
                      c.below &&
                      ((C = e.body[1].below), (A = e.body[1].body)))
                : C &&
                  C.length > 0 &&
                  ((A = e.body),
                  null != (u = null == (d = e.body) ? void 0 : d[0]) && u.above
                    ? ((z = e.body[0].above), (A = e.body[0].body))
                    : "first" ===
                        (null == (p = null == (h = e.body) ? void 0 : h[0])
                          ? void 0
                          : p.type) &&
                      null != (f = null == (m = e.body) ? void 0 : m[1]) &&
                      f.above &&
                      ((z = e.body[1].overscript), (A = e.body[1].body))),
              (e.svgAbove || z) && (e.svgBelow || C)
                ? ((D += `<munderover ${dd(e.id, t)}>`),
                  (D += null != (y = E[e.svgBody]) ? y : gd(A, t)),
                  (D += null != (g = E[e.svgBelow]) ? g : gd(C, t)),
                  (D += null != (b = E[e.svgAbove]) ? b : gd(z, t)),
                  (D += "</munderover>"))
                : e.svgAbove || z
                ? ((D +=
                    `<mover ${dd(e.id, t)}>` +
                    (null != (v = E[e.svgBody]) ? v : gd(A, t))),
                  (D += null != (x = E[e.svgAbove]) ? x : gd(z, t)),
                  (D += "</mover>"))
                : (e.svgBelow || C) &&
                  ((D +=
                    `<munder ${dd(e.id, t)}>` +
                    (null != (w = E[e.svgBody]) ? w : gd(A, t))),
                  (D += null != (k = E[e.svgBelow]) ? k : gd(C, t)),
                  (D += "</munder>"));
            break;
          case "placeholder":
            D += "?";
            break;
          case "mord": {
            D = "string" == typeof e.value ? e.value : B;
            let n = B ? B.match(/{?\\char"([\dabcdefABCDEF]*)}?/) : null;
            n
              ? (D = "&#x" + n[1] + ";")
              : D.length > 0 &&
                D.startsWith("\\") &&
                ("string" == typeof e.value && e.value.charCodeAt(0) > 255
                  ? (D =
                      "&#x" +
                      ("000000" + e.value.charCodeAt(0).toString(16)).slice(
                        -4
                      ) +
                      ";")
                  : "string" == typeof e.value
                  ? (D = e.value.charAt(0))
                  : (console.error("Did not expect this"), (D = "")));
            let i = /\d/.test(D) ? "mn" : "mi";
            D = `<${i}${dd(e.id, t)}>${cd(D)}</${i}>`;
            break;
          }
          case "mbin":
          case "mrel":
          case "minner":
            D = bd(e, t);
            break;
          case "mpunct":
            D = '<mo separator="true"' + dd(e.id, t) + ">" + B + "</mo>";
            break;
          case "mop":
            "\u200b" !== e.body &&
              ((D = "<mo" + dd(e.id, t) + ">"),
              (D += "\\operatorname" === B ? e.body : B || e.body),
              (D += "</mo>"));
            break;
          case "box":
            (D = '<menclose notation="box"'),
              e.backgroundcolor &&
                (D += ' mathbackground="' + e.backgroundcolor + '"'),
              (D += dd(e.id, t) + ">" + gd(e.body, t) + "</menclose>");
            break;
          case "spacing":
            D += '<mspace width="' + (null != (_ = K[B]) ? _ : 0) + 'em"/>';
            break;
          case "enclose":
            D = '<menclose notation="';
            for (let t in e.notation)
              Object.prototype.hasOwnProperty.call(e.notation, t) &&
                e.notation[t] &&
                ((D += T + t), (T = " "));
            D += dd(e.id, t) + '">' + gd(e.body, t) + "</menclose>";
            break;
          case "prompt":
            D =
              '<menclose notation="roundexbox""">' +
              gd(e.body, t) +
              "</menclose>";
            break;
          case "space":
            D += "&nbsp;";
            break;
          case "mopen":
          case "mclose":
            D += bd(e, t);
            break;
          case "macro":
            {
              let n = e.command + vd(e.macroArgs);
              n && (D += `<mo ${dd(e.id, t)}>${n}</mo>`);
            }
            break;
          case "latexgroup":
          case "tooltip":
            D += gd(e.body, t);
            break;
          case "latex":
            D += "<mtext" + dd(e.id, t) + ">" + e.value + "</mtext>";
        }
        return D;
      }
      var wd = {
          "\\ne": "\u2260",
          "\\neq": "\u2260",
          "\u2212": "-",
          "-": "-",
          "\\alpha": "alpha",
          "\\beta": "beta",
          "\\gamma": "gamma",
          "\\delta": "delta",
          "\\epsilon": "epsilon",
          "\\varepsilon": "varepsilon",
          "\\zeta": "zeta",
          "\\eta": "eta",
          "\\theta": "theta",
          "\\vartheta": "vartheta",
          "\\iota": "iota",
          "\\kappa": "kappa",
          "\\lambda": "lambda",
          "\\mu": "mu",
          "\\nu": "nu",
          "\\xi": "xi",
          "\\pi": "pi",
          "\\rho": "rho",
          "\\sigma": "sigma",
          "\\tau": "tau",
          "\\upsilon": "upsilon",
          "\\phi": "phi",
          "\\varphi": "varphi",
          "\\chi": "chi",
          "\\psi": "psi",
          "\\omega": "omega",
          "\\Gamma": "Gamma",
          "\\Delta": "Delta",
          "\\Theta": "Theta",
          "\\Lambda": "Lambda",
          "\\Xi": "Xi",
          "\\Pi": "Pi",
          "\\Sigma": "Sigma",
          "\\Phi": "Phi",
          "\\Psi": "Psi",
          "\\Omega": "Omega",
          "\\exponentialE": "e",
          "\\imaginaryI": "i",
          "\\imaginaryJ": "j",
          "\\!": " ",
          "\\,": " ",
          "\\:": " ",
          "\\;": " ",
          "\\enskip": " ",
          "\\enspace": " ",
          "\\qquad": " ",
          "\\quad": " ",
        },
        kd = {
          "\\pm": "+-",
          "\\times": "xx",
          "\\colon": ":",
          "\\vert": "|",
          "\\Vert": "||",
          "\\mid": "|",
          "\\lbrace": "{",
          "\\rbrace": "}",
          "\\lparen": "(",
          "\\rparen": ")",
          "\\langle": "(:",
          "\\rangle": ":)",
        };
      function _d(e) {
        var t, n, i, r, a, o, s, l, c, d, u, h, p;
        if (!e) return "";
        if (m(e)) {
          if (
            0 === e.length ||
            ("first" === e[0].type && (e = e.slice(1)), 0 === e.length)
          )
            return "";
          let n = "";
          if ("latex" === e[0].mode) for (let t of e) n += _d(t);
          else if ("text" === e[0].mode) {
            let i = 0;
            for (n = '"'; "text" === (null == (t = e[i]) ? void 0 : t.mode); )
              (n += e[i].body ? _d(e[i].body) : e[i].value), i++;
            n += '"' + _d(e.slice(i));
          } else if ("math" === e[0].mode) {
            let t = 0;
            for (; e[t] && "math" === e[t].mode; ) (n += _d(e[t])), t++;
            n += _d(e.slice(t));
          } else console.warn("toASCIIMath: Unexpected mode");
          return n.trim();
        }
        if ("text" === e.mode) return '"' + e.value + '"';
        let f,
          y = "",
          { command: g } = e;
        if ("\\placeholder" === g) return `(${_d(e.body)})`;
        switch (e.type) {
          case "first":
            return "";
          case "group":
          case "root":
            y = null != (n = wd[g]) ? n : _d(e.body);
            break;
          case "genfrac":
            {
              let t = e;
              (t.leftDelim || t.rightDelim) &&
                (y += "." !== t.leftDelim && t.leftDelim ? t.leftDelim : "{:"),
                t.hasBarLine
                  ? ((y += "("),
                    (y += _d(t.above)),
                    (y += ")/("),
                    (y += _d(t.below)),
                    (y += ")"))
                  : ((y += "(" + _d(t.above) + "),"),
                    (y += "(" + _d(t.below) + ")")),
                (t.leftDelim || t.rightDelim) &&
                  (y +=
                    "." !== t.rightDelim && t.rightDelim ? t.rightDelim : "{:");
            }
            break;
          case "surd":
            y += e.hasEmptyBranch("above")
              ? "sqrt(" + _d(e.body) + ")"
              : "root(" + _d(e.above) + ")(" + _d(e.body) + ")";
            break;
          case "latex":
            y = e.value;
            break;
          case "leftright":
            {
              let t = e;
              (y += "." !== t.leftDelim && t.leftDelim ? t.leftDelim : "{:"),
                (y += _d(t.body)),
                (y +=
                  "." !== t.rightDelim && t.rightDelim ? t.rightDelim : ":}");
            }
            break;
          case "sizeddelim":
          case "delim":
          case "overlap":
          case "overunder":
          case "box":
            break;
          case "mord":
            (y =
              null != (r = null != (i = wd[g]) ? i : g)
                ? r
                : "string" == typeof e.value
                ? e.value
                : ""),
              y.startsWith("\\") && (y += " "),
              (f = g ? g.match(/{?\\char"([\dabcdefABCDEF]*)}?/) : null),
              f
                ? (y = String.fromCodePoint(Number.parseInt("0x" + f[1])))
                : y.length > 0 &&
                  y.startsWith("\\") &&
                  (y =
                    "string" == typeof e.value ? e.value.charAt(0) : e.command);
            break;
          case "mbin":
          case "mrel":
          case "minner":
            y = null != (o = null != (a = wd[g]) ? a : kd[g]) ? o : e.value;
            break;
          case "mopen":
          case "mclose":
            y += e.value;
            break;
          case "mpunct":
            y = null != (s = kd[g]) ? s : g;
            break;
          case "mop":
            "\u200b" !== e.value &&
              ((y = ""),
              (y +=
                "\\operatorname" === g
                  ? _d(e.body)
                  : null != (l = e.value)
                  ? l
                  : g),
              (y += " "));
            break;
          case "array":
            let t = e.array,
              m = e.environmentName,
              b =
                null != (c = { bmatrix: ["[", "]"], "bmatrix*": ["[", "]"] }[m])
                  ? c
                  : ["(", ")"],
              v = [];
            for (let e of t) {
              let t = [];
              for (let n of e) t.push(b[0] + _d(n) + b[1]);
              v.push(t.join(","));
            }
            let x =
              null !=
              (d = {
                bmatrix: ["[", "]"],
                "bmatrix*": ["[", "]"],
                cases: ["{", ":}"],
              }[m])
                ? d
                : ["(", ")"];
            y = x[0] + v.join(",") + x[1];
            break;
          case "spacing":
            y = null != (u = wd[g]) ? u : " ";
            break;
          case "enclose":
            y = "(" + _d(e.body) + ")";
            break;
          case "space":
            y = " ";
            break;
          case "subsup":
            y = "";
            break;
          case "macro":
            y = null != (p = null != (h = wd[g]) ? h : kd[g]) ? p : _d(e.body);
        }
        if (!e.hasEmptyBranch("subscript")) {
          y += "_";
          let t = _d(e.subscript);
          y += t.length > 1 ? "(" + t + ")" : t;
        }
        if (!e.hasEmptyBranch("superscript")) {
          y += "^";
          let t = _d(e.superscript);
          y += t.length > 1 ? "(" + t + ")" : t;
        }
        return y;
      }
      var Sd = {
          "\\alpha": "alpha ",
          "\\mu": "mew ",
          "\\sigma": "sigma ",
          "\\pi": "pie ",
          "\\imaginaryI": "eye ",
          "\\sum": "Summation ",
          "\\prod": "Product ",
          "+": "plus ",
          "-": "minus ",
          ";": '<break time="150ms"/> semi-colon <break time="150ms"/>',
          ",": '<break time="150ms"/> comma  <break time="150ms"/>',
          "|": '<break time="150ms"/>Vertical bar<break time="150ms"/>',
          "(": '<break time="150ms"/>Open paren. <break time="150ms"/>',
          ")": '<break time="150ms"/> Close paren. <break time="150ms"/>',
          "=": "equals ",
          "<": "is less than ",
          "\\lt": "is less than ",
          "<=": "is less than or equal to ",
          "\\le": "is less than or equal to ",
          "\\gt": "is greater than ",
          ">": "is greater than ",
          "\\pm": "plus or minus",
          "\\mp": "minus or plus",
          "\\ge": "is greater than or equal to ",
          "\\geq": "is greater than or equal to ",
          "\\leq": "is less than or equal to ",
          "!": "factorial ",
          "\\sin": "sine ",
          "\\cos": "cosine ",
          "\u200b": "",
          "\u2212": "minus ",
          ":": '<break time="150ms"/> such that <break time="200ms"/> ',
          "\\colon": '<break time="150ms"/> such that <break time="200ms"/> ',
          "\\hbar": "etch bar ",
          "\\iff":
            '<break time="200ms"/>if, and only if, <break time="200ms"/>',
          "\\Longleftrightarrow":
            '<break time="200ms"/>if, and only if, <break time="200ms"/>',
          "\\land": "and ",
          "\\lor": "or ",
          "\\neg": "not ",
          "\\div": "divided by ",
          "\\forall": "for all ",
          "\\exists": "there exists ",
          "\\nexists": "there does not exists ",
          "\\in": "element of ",
          "\\N":
            'the set <break time="150ms"/><say-as interpret-as="character">n</say-as>',
          "\\C":
            'the set <break time="150ms"/><say-as interpret-as="character">c</say-as>',
          "\\Z":
            'the set <break time="150ms"/><say-as interpret-as="character">z</say-as>',
          "\\Q":
            'the set <break time="150ms"/><say-as interpret-as="character">q</say-as>',
          "\\infty": "infinity ",
          "\\nabla": "nabla ",
          "\\partial": "partial derivative of ",
          "\\cdot": "times ",
          "\\cdots": "dot dot dot ",
          "\\Rightarrow": "implies ",
          "\\lparen": '<break time="150ms"/>open paren<break time="150ms"/>',
          "\\rparen": '<break time="150ms"/>close paren<break time="150ms"/>',
          "\\lbrace": '<break time="150ms"/>open brace<break time="150ms"/>',
          "\\{": '<break time="150ms"/>open brace<break time="150ms"/>',
          "\\rbrace": '<break time="150ms"/>close brace<break time="150ms"/>',
          "\\}": '<break time="150ms"/>close brace<break time="150ms"/>',
          "\\langle":
            '<break time="150ms"/>left angle bracket<break time="150ms"/>',
          "\\rangle":
            '<break time="150ms"/>right angle bracket<break time="150ms"/>',
          "\\lfloor": '<break time="150ms"/>open floor<break time="150ms"/>',
          "\\rfloor": '<break time="150ms"/>close floor<break time="150ms"/>',
          "\\lceil": '<break time="150ms"/>open ceiling<break time="150ms"/>',
          "\\rceil": '<break time="150ms"/>close ceiling<break time="150ms"/>',
          "\\vert": '<break time="150ms"/>vertical bar<break time="150ms"/>',
          "\\mvert": '<break time="150ms"/>divides<break time="150ms"/>',
          "\\lvert":
            '<break time="150ms"/>left vertical bar<break time="150ms"/>',
          "\\rvert":
            '<break time="150ms"/>right vertical bar<break time="150ms"/>',
          "\\lbrack":
            '<break time="150ms"/> open square bracket <break time="150ms"/>',
          "\\rbrack":
            '<break time="150ms"/> close square bracket <break time="150ms"/>',
          mm: "millimeters",
          cm: "centimeters",
          km: "kilometers",
          kg: "kilograms",
        },
        Md = {
          array: "array",
          matrix: "matrix",
          pmatrix: "parenthesis matrix",
          bmatrix: "square brackets matrix",
          Bmatrix: "braces matrix",
          vmatrix: "bars matrix",
          Vmatrix: "double bars matrix",
          "matrix*": "matrix",
          smallmatrix: "small matrix",
        };
      function Ld(e) {
        let t = 0;
        if (m(e)) for (let n of e) "first" !== n.type && (t += 1);
        return 1 === t;
      }
      function Cd(e) {
        let t = "";
        if (m(e))
          for (let n of e)
            "first" !== n.type && "string" == typeof n.value && (t += n.value);
        return t;
      }
      function zd(e, t) {
        var n, i, r, a, o;
        function s(e) {
          return "<emphasis>" + e + "</emphasis>";
        }
        if (!t) return "";
        let l = "";
        if (m(t)) {
          let i = !1,
            r = !1;
          for (let a = 0; a < t.length; a++)
            "first" !== t[a].type &&
              ("text" !== t[a].mode && (r = !1),
              a < t.length - 2 &&
              "mopen" === t[a].type &&
              "mclose" === t[a + 2].type &&
              "mord" === t[a + 1].type
                ? ((l += " of "), (l += s(zd(e, t[a + 1]))), (a += 2))
                : "text" === t[a].mode
                ? r
                  ? (l += null != (n = t[a].value) ? n : " ")
                  : ((r = !0), (l += zd("text", t[a])))
                : t[a].isDigit()
                ? i
                  ? (l += t[a].asDigit())
                  : ((i = !0), (l += zd(e, t[a])))
                : ((i = !1), (l += zd(e, t[a]))));
        } else if ("text" === t.mode)
          t.id &&
            "math" === e &&
            (l += '<mark name="' + t.id.toString() + '"/>'),
            (l += t.value);
        else {
          t.id &&
            "math" === e &&
            (l += '<mark name="' + t.id.toString() + '"/>');
          let n = "",
            c = "",
            d = "",
            u = !1,
            { command: h } = t;
          switch (h) {
            case "\\vec":
              return "vector " + zd(e, t.body);
            case "\\acute":
              return zd(e, t.body) + " acute";
            case "\\grave":
              return zd(e, t.body) + " grave";
            case "\\dot":
              return "dot over" + zd(e, t.body);
            case "\\ddot":
              return "double dot over" + zd(e, t.body);
            case "\\mathring":
              return "ring over" + zd(e, t.body);
            case "\\tilde":
            case "\\widetilde":
              return "tilde over" + zd(e, t.body);
            case "\\bar":
              return zd(e, t.body) + " bar";
            case "\\breve":
              return zd(e, t.body) + " breve";
            case "\\check":
            case "\\widecheck":
              return "check over " + zd(e, t.body);
            case "\\hat":
            case "\\widehat":
              return "hat over" + zd(e, t.body);
            case "\\overarc":
            case "\\overparen":
            case "\\wideparen":
              return "arc over " + zd(e, t.body);
            case "\\underarc":
            case "\\underparen":
              return "arc under " + zd(e, t.body);
          }
          switch (t.type) {
            case "prompt":
              l +=
                ' <break time="300ms"/> ' +
                (t.body.length > 1
                  ? 'start input . <break time="500ms"/> ' +
                    zd(e, t.body) +
                    '. <break time="500ms"/> end input'
                  : "blank") +
                '. <break time="700ms"/>' +
                (null != (i = t.correctness) ? i : "") +
                ' . <break time="700ms"/> ';
              break;
            case "array":
              let p = t.array,
                m = t.environmentName;
              if (Object.keys(Md).includes(m)) {
                l += ` begin ${Md[m]} `;
                for (let e = 0; e < p.length; e++) {
                  e > 0 && (l += ","), (l += ` row ${e + 1} `);
                  for (let t = 0; t < p[e].length; t++)
                    t > 0 && (l += ","),
                      (l += ` column ${t + 1}: `),
                      (l += zd("math", p[e][t]));
                }
                l += ` end ${Md[m]} `;
              }
              break;
            case "group":
              "\\ne" === h
                ? (l += " not equal ")
                : ("\\not" === h && (l += " not "), (l += zd("math", t.body)));
              break;
            case "root":
              l += zd("math", t.body);
              break;
            case "genfrac":
              if (
                ((n = zd("math", t.above)),
                (c = zd("math", t.below)),
                Ld(t.above) && Ld(t.below))
              ) {
                let e = {
                  "1/2": " half ",
                  "1/3": " one third ",
                  "2/3": " two third",
                  "1/4": " one quarter ",
                  "3/4": " three quarter ",
                  "1/5": " one fifth ",
                  "2/5": " two fifths ",
                  "3/5": " three fifths ",
                  "4/5": " four fifths ",
                  "1/6": " one sixth ",
                  "5/6": " five sixths ",
                  "1/8": " one eight ",
                  "3/8": " three eights ",
                  "5/8": " five eights ",
                  "7/8": " seven eights ",
                  "1/9": " one ninth ",
                  "2/9": " two ninths ",
                  "4/9": " four ninths ",
                  "5/9": " five ninths ",
                  "7/9": " seven ninths ",
                  "8/9": " eight ninths ",
                }[Cd(t.above) + "/" + Cd(t.below)];
                e ? (l = e) : (l += n + " over " + c);
              } else
                l +=
                  ' the fraction <break time="150ms"/>' +
                  n +
                  ' over <break time="150ms"/>' +
                  c +
                  '.<break time="150ms"/> End fraction.<break time="150ms"/>';
              break;
            case "surd":
              if (((d = zd("math", t.body)), t.hasEmptyBranch("above")))
                l += Ld(t.body)
                  ? " the square root of " + d + " , "
                  : ' the square root of <break time="200ms"/>' +
                    d +
                    '. <break time="200ms"/> End square root';
              else {
                let e = zd("math", t.above);
                e = e.trim();
                let n = e.replace(/<mark([^/]*)\/>/g, "");
                l +=
                  "3" === n
                    ? ' the cube root of <break time="200ms"/>' +
                      d +
                      '. <break time="200ms"/> End cube root'
                    : "n" === n
                    ? ' the nth root of <break time="200ms"/>' +
                      d +
                      '. <break time="200ms"/> End root'
                    : ' the root with index: <break time="200ms"/>' +
                      e +
                      ', of <break time="200ms"/>' +
                      d +
                      '. <break time="200ms"/> End root';
              }
              break;
            case "leftright":
              {
                let e = t;
                (l +=
                  null != (r = e.leftDelim ? Sd[e.leftDelim] : void 0)
                    ? r
                    : e.leftDelim),
                  (l += zd("math", t.body)),
                  (l +=
                    null != (a = e.rightDelim ? Sd[e.rightDelim] : void 0)
                      ? a
                      : e.rightDelim);
              }
              break;
            case "rule":
            case "overunder":
            case "overlap":
            case "space":
            case "spacing":
              break;
            case "macro":
              let f = h.replace(/^\\/g, ""),
                y = Q()[f];
              y &&
                (null != y && y.expand
                  ? (l += zd("math", t.body))
                  : (l += `${f} `));
              break;
            case "placeholder":
              l += "placeholder ";
              break;
            case "delim":
            case "sizeddelim":
            case "mord":
            case "minner":
            case "mbin":
            case "mrel":
            case "mpunct":
            case "mopen":
            case "mclose": {
              if (
                "\\mathbin" === h ||
                "\\mathrel" === h ||
                "\\mathopen" === h ||
                "\\mathclose" === h ||
                "\\mathpunct" === h ||
                "\\mathord" === h ||
                "\\mathinner" === h
              ) {
                l = zd(e, t.body);
                break;
              }
              let n = t.isDigit() ? t.asDigit() : t.value,
                i = t.command;
              if (
                (("delim" === t.type || "sizeddelim" === t.type) &&
                  ((i = t.value), (n = i)),
                "text" === e)
              )
                l += n;
              else {
                if (("mbin" === t.type && (l += '<break time="150ms"/>'), n)) {
                  let e = Sd[n] || (i ? Sd[i.trim()] : "");
                  if (e) l += " " + e;
                  else {
                    let e = i
                      ? (function (e) {
                          let t = "";
                          return (
                            e.startsWith("\\") &&
                              (t = " " + e.replace("\\", "") + " "),
                            t
                          );
                        })(i.trim())
                      : "";
                    l +=
                      e ||
                      (function (e) {
                        return window.MathfieldElement.textToSpeechMarkup
                          ? /[a-z]/.test(e)
                            ? ` <say-as interpret-as="character">${e}</say-as>`
                            : /[A-Z]/.test(e)
                            ? `capital <say-as interpret-as="character">${e.toLowerCase()}</say-as>`
                            : e
                          : /[a-z]/.test(e)
                          ? " '" + e.toUpperCase() + "'"
                          : /[A-Z]/.test(e)
                          ? " 'capital " + e.toUpperCase() + "'"
                          : e;
                      })(n);
                  }
                } else l += zd("math", t.body);
                "mbin" === t.type && (l += '<break time="150ms"/>');
              }
              break;
            }
            case "mop":
              if ("\u200b" !== t.value) {
                let e = t.command;
                if ("\\sum" === e)
                  if (
                    t.hasEmptyBranch("superscript") ||
                    t.hasEmptyBranch("subscript")
                  )
                    if (t.hasEmptyBranch("subscript")) l += " the summation of";
                    else {
                      let e = zd("math", t.subscript);
                      (e = e.trim()),
                        (l +=
                          ' the summation from <break time="200ms"/>' +
                          e +
                          '<break time="200ms"/> of <break time="150ms"/>'),
                        (u = !0);
                    }
                  else {
                    let e = zd("math", t.superscript);
                    e = e.trim();
                    let n = zd("math", t.subscript);
                    (n = n.trim()),
                      (l +=
                        ' the summation from <break time="200ms"/>' +
                        n +
                        '<break time="200ms"/> to  <break time="200ms"/>' +
                        e +
                        '<break time="200ms"/> of <break time="150ms"/>'),
                      (u = !0);
                  }
                else if ("\\prod" === e)
                  if (
                    t.hasEmptyBranch("superscript") ||
                    t.hasEmptyBranch("subscript")
                  )
                    if (t.hasEmptyBranch("subscript")) l += " the product  of ";
                    else {
                      let e = zd("math", t.subscript);
                      (e = e.trim()),
                        (l +=
                          ' the product from <break time="200ms"/>' +
                          e +
                          '<break time="200ms"/> of <break time="150ms"/>'),
                        (u = !0);
                    }
                  else {
                    let e = zd("math", t.superscript);
                    e = e.trim();
                    let n = zd("math", t.subscript);
                    (n = n.trim()),
                      (l +=
                        ' the product from <break time="200ms"/>' +
                        n +
                        '<break time="200ms"/> to <break time="200ms"/>' +
                        e +
                        '<break time="200ms"/> of <break time="150ms"/>'),
                      (u = !0);
                  }
                else if ("\\int" === e)
                  if (
                    t.hasEmptyBranch("superscript") ||
                    t.hasEmptyBranch("subscript")
                  )
                    l += ' the integral of <break time="200ms"/> ';
                  else {
                    let e = zd("math", t.superscript);
                    e = e.trim();
                    let n = zd("math", t.subscript);
                    (n = n.trim()),
                      (l +=
                        ' the integral from <break time="200ms"/>' +
                        s(n) +
                        '<break time="200ms"/> to <break time="200ms"/>' +
                        s(e) +
                        ' <break time="200ms"/> of '),
                      (u = !0);
                  }
                else if ("string" == typeof t.value) {
                  l +=
                    (null != (o = Sd[t.value])
                      ? o
                      : t.command
                      ? Sd[t.command]
                      : void 0) || " " + t.value;
                } else
                  t.command &&
                    ("\\mathop" === t.command
                      ? (l += zd("math", t.body))
                      : "\\operatorname" === t.command
                      ? (l += (function (e) {
                          return e ? e.map((e) => e.value).join("") : "";
                        })(t.body))
                      : (l += t.command.startsWith("\\")
                          ? " " + t.command.slice(1)
                          : " " + t.command));
              }
              break;
            case "enclose":
              (d = zd("math", t.body)),
                (l += " crossed out " + d + ". End crossed out.");
          }
          if (!u && !t.hasEmptyBranch("superscript")) {
            let n = zd(e, t.superscript);
            n = n.trim();
            let i = n.replace(/<[^>]*>/g, "");
            if (Ld(t.superscript)) {
              if ("math" === e) {
                let e = (function (e) {
                  if (m(e))
                    for (let t of e)
                      if ("first" !== t.type && t.id) return t.id.toString();
                  return "";
                })(t.superscript);
                e && (l += '<mark name="' + e + '"/>');
              }
              "\u2032" === i
                ? (l += " prime ")
                : "2" === i
                ? (l += " squared ")
                : "3" === i
                ? (l += " cubed ")
                : Number.isNaN(Number.parseInt(i))
                ? (l += " to the " + n + "; ")
                : (l +=
                    ' to the <say-as interpret-as="ordinal">' +
                    i +
                    "</say-as> power; ");
            } else
              Number.isNaN(Number.parseInt(i))
                ? (l += " raised to the " + n + "; ")
                : (l +=
                    ' raised to the <say-as interpret-as="ordinal">' +
                    i +
                    "</say-as> power; ");
          }
          if (!u && !t.hasEmptyBranch("subscript")) {
            let e = zd("math", t.subscript);
            (e = e.trim()),
              (l += Ld(t.subscript)
                ? " sub " + e
                : " subscript " + e + ". End subscript. ");
          }
        }
        return l;
      }
      function Ad(e) {
        var t, n;
        if (
          "sre" === window.MathfieldElement.textToSpeechRules &&
          ("sre" in window || "SRE" in window)
        ) {
          let i = gd(e);
          if (i) {
            window.MathfieldElement.textToSpeechMarkup &&
              ((window.MathfieldElement.textToSpeechRulesOptions =
                null != (t = window.MathfieldElement.textToSpeechRulesOptions)
                  ? t
                  : {}),
              (window.MathfieldElement.textToSpeechRulesOptions.markup =
                window.MathfieldElement.textToSpeechMarkup),
              "ssml" ===
                window.MathfieldElement.textToSpeechRulesOptions.markup &&
                (window.MathfieldElement.textToSpeechRulesOptions.markup =
                  "ssml_step"),
              (window.MathfieldElement.textToSpeechRulesOptions.rate =
                window.MathfieldElement.speechEngineRate));
            let e =
              null != (n = window.SRE) ? n : window.sre.System.getInstance();
            window.MathfieldElement.textToSpeechRulesOptions &&
              e.setupEngine(window.MathfieldElement.textToSpeechRulesOptions);
            let a = "";
            try {
              a = e.toSpeech(i);
            } catch (r) {
              console.error(
                "MathLive 0.95.0: `SRE.toSpeech()` runtime error",
                r
              );
            }
            return a;
          }
          return "";
        }
        let i = zd("math", e);
        if ("ssml" === window.MathfieldElement.textToSpeechMarkup) {
          let e = "";
          window.MathfieldElement.speechEngineRate &&
            (e =
              '<prosody rate="' +
              window.MathfieldElement.speechEngineRate +
              '">'),
            (i =
              '<?xml version="1.0"?><speak version="1.1" xmlns="http://www.w3.org/2001/10/synthesis" xml:lang="en-US"><amazon:auto-breaths>' +
              e +
              "<p><s>" +
              i +
              "</s></p>" +
              (e ? "</prosody>" : "") +
              "</amazon:auto-breaths></speak>");
        } else
          i =
            "mac" === window.MathfieldElement.textToSpeechMarkup &&
            "macos" === g()
              ? i
                  .replace(/<mark([^/]*)\/>/g, "")
                  .replace(/<emphasis>/g, "[[emph+]]")
                  .replace(/<\/emphasis>/g, "")
                  .replace(/<break time="(\d*)ms"\/>/g, "[[slc $1]]")
                  .replace(/<say-as[^>]*>/g, "")
                  .replace(/<\/say-as>/g, "")
              : i.replace(/<[^>]*>/g, "").replace(/\s{2,}/g, " ");
        return i;
      }
      function Ed(e, t) {
        return e + Ad(t);
      }
      function Kd(e) {
        var t;
        let n;
        if ("prompt" === e.parent.type)
          "body" === e.parentBranch && (n = "prompt");
        else if ("body" === e.parentBranch)
          n =
            e.type &&
            null !=
              (t = {
                enclose: "cross out",
                leftright: "delimiter",
                surd: "square root",
                root: "math field",
                mop: "operator",
                first: "first",
              }[e.type])
              ? t
              : "parent";
        else if ("genfrac" === e.parent.type) {
          if ("above" === e.parentBranch) return "numerator";
          if ("below" === e.parentBranch) return "denominator";
        } else
          "surd" === e.parent.type
            ? "above" === e.parentBranch && (n = "index")
            : "superscript" === e.parentBranch
            ? (n = "superscript")
            : "subscript" === e.parentBranch && (n = "subscript");
        return null != n ? n : "parent";
      }
      function Dd(e, t, n, i) {
        let r = "";
        if ("plonk" === t)
          window.MathfieldElement.playSound("plonk"),
            e.flushInlineShortcutBuffer();
        else if ("delete" === t) r = Ed("deleted: ", i);
        else if ("focus" === t || t.includes("move"))
          r =
            (function (e, t) {
              if (Number.isNaN(t)) return "";
              let n = e.at(t);
              if (!n || n.treeDepth <= e.at(e.position).treeDepth) return "";
              let i = "",
                r = n.parent,
                a = e.at(e.position).parent;
              for (; r !== e.root && r !== a; )
                (i += `out of ${Kd(r)};`), (r = r.parent);
              return i;
            })(e.model, n) +
            (e.model.selectionIsCollapsed ? "" : "selected: ") +
            (function (e) {
              if (!e.selectionIsCollapsed)
                return Ed("", e.getAtoms(e.selection));
              let t = "",
                n = e.at(e.position),
                i = Kd(n);
              return (
                n.isFirstSibling &&
                  (t = (i ? "start of " + i : "unknown") + ": "),
                n.isLastSibling
                  ? n.isFirstSibling || (t += i ? "end of " + i : "unknown")
                  : (t += Ed("", n)),
                t
              );
            })(e.model);
        else if ("replacement" === t) r = Ed("", e.model.at(e.model.position));
        else if ("line" === t) {
          let t = Ed("", e.model.root);
          e.keyboardDelegate.setAriaLabel(t);
        } else r = i ? Ed(t + " ", i) : t;
        if (r) {
          let t = e.ariaLiveText.textContent.includes("\xa0")
            ? " \u202f "
            : " \xa0 ";
          e.ariaLiveText.textContent = r + t;
        }
      }
      xc(
        {
          speak: (e, t, n) =>
            (function (e, t, n) {
              var i, r;
              n = null != n ? n : { withHighlighting: !1 };
              let { model: a } = e;
              function o(e) {
                let t = null;
                switch (e) {
                  case "all":
                  default:
                    t = a.root;
                    break;
                  case "selection":
                    t = a.getAtoms(a.selection);
                    break;
                  case "left":
                    t = a.getAtoms(
                      a.offsetOf(a.at(a.position).leftSibling),
                      a.position
                    );
                    break;
                  case "right":
                    t = a.getAtoms(
                      a.position,
                      a.offsetOf(a.at(a.position).rightSibling)
                    );
                    break;
                  case "group":
                    t = a.getAtoms(a.getSiblingsRange(a.position));
                    break;
                  case "parent": {
                    let { parent: e } = a.at(a.position);
                    t = null != e && e.parent ? e : a.root;
                    break;
                  }
                }
                return t;
              }
              function s(e) {
                let t = "";
                switch (e) {
                  case "all":
                  case "group":
                  default:
                    break;
                  case "selection":
                    t = "no selection";
                    break;
                  case "left":
                    t = "at start";
                    break;
                  case "right":
                    t = "at end";
                    break;
                  case "parent":
                    t = "no parent";
                }
                return t;
              }
              let l = o(t);
              if (null === l)
                return (
                  null == (r = (i = window.MathfieldElement).speakHook) ||
                    r.call(i, s(t)),
                  !1
                );
              (n.withHighlighting ||
                "amazon" === window.MathfieldElement.speechEngine) &&
                (window.MathfieldElement.textToSpeechMarkup =
                  window.sre &&
                  "sre" === window.MathfieldElement.textToSpeechRules
                    ? "ssml_step"
                    : "ssml");
              let c = Ad(l);
              return (
                f() && n.withHighlighting
                  ? ((yh().readAloudMathField = e),
                    gc(e, { forHighlighting: !0 }),
                    window.MathfieldElement.readAloudHook &&
                      window.MathfieldElement.readAloudHook(e.field, c))
                  : window.MathfieldElement.speakHook &&
                    window.MathfieldElement.speakHook(c),
                !1
              );
            })(e, t, n),
        },
        { target: "mathfield" }
      );
      function Td(e, t, n, i) {
        let r = e.offsetOf(t);
        if (r < n || r > i) return !1;
        if (!t.hasChildren) return !0;
        let a = e.offsetOf(t.firstChild);
        if (a >= n && a <= i) {
          let r = e.offsetOf(t.lastChild);
          if (r >= n && r <= i) return !0;
        }
        return !1;
      }
      function Bd(e, t, n) {
        if (null == t || !t.hasChildren) return !1;
        let [i, r] = n,
          a = e.offsetOf(t.firstChild),
          o = e.offsetOf(t.lastChild);
        return a >= i && a <= r && o >= a && o <= r;
      }
      function $d(e, t = 1) {
        return (function (e) {
          for (let t of e) for (let e of t) if (e.length > 0) return !1;
          return !0;
        })(e)
          ? Array(t).fill([[new Eo({ type: "first" }), new As()]])
          : e.map((e) =>
              0 === e.length
                ? [[new Eo({ type: "first" })]]
                : e.map((e) =>
                    0 === e.length
                      ? [new Eo({ type: "first" })]
                      : ("first" !== e[0].type &&
                          e.unshift(new Eo({ type: "first" })),
                        e)
                  )
            );
      }
      function Pd(e, t = [[[]]], n = [], i = []) {
        switch (
          ((t = $d(
            t,
            ["split", "align", "align*", "aligned", "eqnarray"].includes(e)
              ? 2
              : 1
          )),
          e)
        ) {
          case "math":
          case "displaymath":
            return new $s(e, t, n, { mathstyleName: "textstyle" });
          case "center":
            return new $s(e, t, n, { columns: [{ align: "c" }] });
          case "multline":
          case "multline*":
            return new $s(e, t, n, {
              columns: [{ align: "m" }],
              leftDelim: ".",
              rightDelim: ".",
            });
          case "split":
            return new $s(e, t, n, {
              columns: [{ align: "r" }, { align: "l" }],
              minColumns: 2,
            });
          case "gather":
          case "gathered":
            return new $s(e, t, n, {
              columns: [{ gap: 0.25 }, { align: "c" }, { gap: 0 }],
            });
          case "pmatrix":
          case "pmatrix*":
            return new $s(e, t, n, {
              mathstyleName: "textstyle",
              leftDelim: "(",
              rightDelim: ")",
              columns: Od(i[0]),
            });
          case "bmatrix":
          case "bmatrix*":
            return new $s(e, t, n, {
              mathstyleName: "textstyle",
              leftDelim: "[",
              rightDelim: "]",
              columns: Od(i[0]),
            });
          case "Bmatrix":
          case "Bmatrix*":
            return new $s(e, t, n, {
              mathstyleName: "textstyle",
              leftDelim: "\\lbrace",
              rightDelim: "\\rbrace",
              columns: Od(i[0]),
            });
          case "vmatrix":
          case "vmatrix*":
            return new $s(e, t, n, {
              mathstyleName: "textstyle",
              leftDelim: "\\vert",
              rightDelim: "\\vert",
              columns: Od(i[0]),
            });
          case "Vmatrix":
          case "Vmatrix*":
            return new $s(e, t, n, {
              mathstyleName: "textstyle",
              leftDelim: "\\Vert",
              rightDelim: "\\Vert",
              columns: Od(i[0]),
            });
          case "matrix":
          case "matrix*":
            return new $s(e, t, n, {
              mathstyleName: "textstyle",
              leftDelim: ".",
              rightDelim: ".",
              columns: Od(null == i ? void 0 : i[0]),
            });
          case "smallmatrix":
          case "smallmatrix*":
            return new $s(e, t, n, {
              mathstyleName: "scriptstyle",
              columns: Od(null == i ? void 0 : i[0]),
              colSeparationType: "small",
              arraystretch: 0.5,
            });
          case "cases":
          case "dcases":
            return new $s(e, t, n, {
              mathstyleName: "dcases" === e ? "displaystyle" : "textstyle",
              arraystretch: 1.2,
              leftDelim: "\\lbrace",
              rightDelim: ".",
              columns: [{ align: "l" }, { gap: 1 }, { align: "l" }],
            });
          case "rcases":
            return new $s(e, t, n, {
              arraystretch: 1.2,
              leftDelim: ".",
              rightDelim: "\\rbrace",
              columns: [{ align: "l" }, { gap: 1 }, { align: "l" }],
            });
          case "lines":
            return new $s(e, t, n, {
              leftDelim: ".",
              rightDelim: ".",
              columns: [{ align: "l" }],
            });
          case "align":
          case "align*":
          case "aligned":
          case "eqnarray": {
            let i = 0;
            for (let e of t) i = Math.max(i, e.length);
            let r = [{ gap: 0 }, { align: "r" }, { gap: 0.25 }, { align: "l" }],
              a = 2;
            for (; a < i; )
              r.push({ gap: 1 }, { align: "r" }, { gap: 0.25 }, { align: "l" }),
                (a += 2);
            return (
              r.push({ gap: 0 }),
              new $s(e, t, n, { arraycolsep: 0, columns: r, minColumns: 2 })
            );
          }
        }
        return new $s(e, t, n, { mathstyleName: "textstyle" });
      }
      function Od(e) {
        return null != e
          ? e
          : [
              { align: "c" },
              { align: "c" },
              { align: "c" },
              { align: "c" },
              { align: "c" },
              { align: "c" },
              { align: "c" },
              { align: "c" },
              { align: "c" },
              { align: "c" },
            ];
      }
      function Fd(e, t, n) {
        let i = e.getCell(t, n);
        return !(!i || 2 !== i.length) && "placeholder" === i[1].type;
      }
      function Nd(e, t, n, i) {
        let r = (function (e, t, n, i) {
          let r = t.getCell(n, i);
          return r ? [e.offsetOf(r[0]), e.offsetOf(r[r.length - 1])] : -1;
        })(e, t, n, i);
        "number" != typeof r && e.setSelection(r);
      }
      function qd(e, t, n, i, r) {
        let a = t.getCell(n, i);
        a &&
          e.setPositionHandlingPlaceholder(
            e.offsetOf(a["start" === r ? 0 : a.length - 1])
          );
      }
      function Rd(e, t) {
        let [n, [i, r]] = (function (e, t) {
          let n = e.at(e.position);
          for (; n && !(n.parent instanceof $s); ) n = n.parent;
          if (
            (n && "array" === n.type && n.environmentName,
            !n || !(n.parent instanceof $s))
          ) {
            let i = e.at(e.position);
            if (((n = i), !n.parent.parent)) {
              let n,
                r = e.extractAtoms([e.position, e.lastOffset]),
                a = e.extractAtoms([0, e.position]);
              return (
                0 === a.length && (a = Hd()),
                0 === r.length && (r = Hd()),
                t.endsWith("column")
                  ? ((n = Pd("split", [[a, r]])),
                    (e.root = n),
                    Fd(n, 0, 0)
                      ? Nd(e, n, 0, 0)
                      : Fd(n, 0, 1)
                      ? Nd(e, n, 0, 1)
                      : (e.position = e.offsetOf(i)))
                  : ((n = Pd("lines", [[a], [r]])),
                    (e.root = n),
                    Fd(n, 0, 0)
                      ? Nd(e, n, 0, 0)
                      : Fd(n, 1, 0)
                      ? Nd(e, n, 1, 0)
                      : (e.position = e.offsetOf(i))),
                [void 0, [0, 0]]
              );
            }
            if (n.parent instanceof Vs) {
              let i = n.parent,
                r = e.extractAtoms([e.position, e.offsetOf(i.lastChild)]),
                a = e.extractAtoms([e.offsetOf(i.firstChild), e.position]);
              0 === a.length && (a = Hd()), 0 === r.length && (r = Hd());
              let o = "pmatrix",
                s = i.leftDelim,
                l = i.rightDelim;
              "(" !== s || (")" !== l && "?" !== l)
                ? ("[" !== s && "\\lbrack" !== s) ||
                  ("]" !== l && "\\rbrack" !== l && "?" !== l)
                  ? "\\vert" === s && "\\vert" === l
                    ? (o = "vmatrix")
                    : "\\Vert" === s && "\\Vert" === l
                    ? (o = "Vmatrix")
                    : ("{" === s || "\\lbrace" === s) &&
                      ("." === l || "?" === l) &&
                      (o = "cases")
                  : (o = "bmatrix")
                : (o = "pmatrix");
              let c = Pd(o, t.endsWith("column") ? [[a, r]] : [[a], [r]]);
              return (
                i.parent.addChildBefore(c, i),
                i.parent.removeChild(i),
                Fd(c, 0, 0)
                  ? Nd(e, c, 0, 0)
                  : t.endsWith("column")
                  ? Fd(c, 0, 1)
                    ? Nd(e, c, 0, 1)
                    : (e.position = e.offsetOf(n))
                  : Fd(c, 1, 0)
                  ? Nd(e, c, 1, 0)
                  : (e.position = e.offsetOf(n)),
                [void 0, [0, 0]]
              );
            }
          }
          return n && n.parent instanceof $s
            ? [n.parent, n.parentBranch]
            : [void 0, [0, 0]];
        })(e, t);
        if (n)
          switch (t) {
            case "after row":
              n.addRowAfter(i), qd(e, n, i + 1, 0, "end");
              break;
            case "after column":
              if (n.maxColumns <= n.colCount) return void e.announce("plonk");
              n.addColumnAfter(r), qd(e, n, i, r + 1, "end");
              break;
            case "before row":
              n.addRowBefore(i), qd(e, n, i, 0, "start");
              break;
            case "before column":
              if (n.maxColumns <= n.colCount) return void e.announce("plonk");
              n.addColumnBefore(r), qd(e, n, i, r, "start");
          }
      }
      function Id(e) {
        return (
          !!Ul(e, { inputType: "insertText" }) &&
          (Rd(e, "after row"), Jl(e, { inputType: "insertText" }), !0)
        );
      }
      function Vd(e) {
        return (
          !!Ul(e, { inputType: "insertText" }) &&
          (Rd(e, "after column"), Jl(e, { inputType: "insertText" }), !0)
        );
      }
      function jd(e, t) {
        let n = e.at(e.position);
        for (
          ;
          n && !(Array.isArray(n.parentBranch) && n.parent instanceof $s);

        )
          n = n.parent;
        if (
          Array.isArray(null == n ? void 0 : n.parentBranch) &&
          (null == n ? void 0 : n.parent) instanceof $s
        ) {
          let i,
            r = n.parent,
            a = n.parentBranch;
          switch (t) {
            case "row":
              if (r.rowCount > 1) {
                r.removeRow(a[0]);
                let t = r.getCell(Math.max(0, a[0] - 1), a[1]);
                i = e.offsetOf(t[t.length - 1]);
              }
              break;
            case "column":
              if (r.colCount > r.minColumns) {
                r.removeColumn(a[1]);
                let t = r.getCell(a[0], Math.max(0, a[1] - 1));
                i = e.offsetOf(t[t.length - 1]);
              }
          }
          i && e.setPositionHandlingPlaceholder(i);
        }
      }
      function Hd() {
        return [new As()];
      }
      function Wd(e, t, n, i) {
        var r, a, o, s, l, c;
        let d = n.parent;
        if (d && n instanceof Vs) {
          let r = (!i && "forward" === t) || ("body" === i && "backward" === t),
            a = r ? e.offsetOf(n.firstChild) : e.offsetOf(n.lastChild);
          return (
            r
              ? "?" !== n.rightDelim && "." !== n.rightDelim
                ? ((n.leftDelim = "."), (n.isDirty = !0))
                : (d.addChildrenAfter(n.removeBranch("body"), n),
                  d.removeChild(n),
                  a--)
              : "?" !== n.leftDelim && "." !== n.leftDelim
              ? ((n.rightDelim = "."), (n.isDirty = !0))
              : (d.addChildrenAfter(n.removeBranch("body"), n),
                d.removeChild(n),
                a--),
            (e.position = a),
            !0
          );
        }
        if (d && "surd" === n.type) {
          if (("forward" === t && !i) || ("backward" === t && "body" === i)) {
            let t = n.leftSibling;
            n.hasChildren && d.addChildrenAfter(n.removeBranch("body"), n),
              d.removeChild(n),
              (e.position = e.offsetOf(t));
          } else
            "forward" === t && "body" === i
              ? (e.position = e.offsetOf(n))
              : i || "backward" !== t
              ? "above" === i &&
                (n.hasEmptyBranch("above") && n.removeBranch("above"),
                (e.position =
                  "backward" === t
                    ? e.offsetOf(n.leftSibling)
                    : e.offsetOf(n.body[0])))
              : n.hasChildren
              ? (e.position = e.offsetOf(n.lastChild))
              : ((e.position = Math.max(0, e.offsetOf(n) - 1)),
                d.removeChild(n));
          return !0;
        }
        if (d && ("box" === n.type || "enclose" === n.type)) {
          let r =
            (i && "backward" === t) || (!i && "forward" === t)
              ? n.leftSibling
              : n.lastChild;
          return (
            d.addChildrenAfter(n.removeBranch("body"), n),
            d.removeChild(n),
            (e.position = e.offsetOf(r)),
            !0
          );
        }
        if ("genfrac" === n.type || "overunder" === n.type) {
          if (!i)
            return (
              !(
                ("overunder" === n.type && n.hasEmptyBranch("body")) ||
                ("genfrac" === n.type &&
                  n.hasEmptyBranch("below") &&
                  n.hasEmptyBranch("above"))
              ) &&
              ((e.position = e.offsetOf(
                "forward" === t ? n.firstChild : n.lastChild
              )),
              !0)
            );
          let r =
              "numerator-denominator" === fh.fractionNavigationOrder
                ? "above"
                : "below",
            a = "above" === r ? "below" : "above";
          if (
            d &&
            (("forward" === t && i === r) || ("backward" === t && i === a))
          ) {
            let t = n.removeBranch(r),
              i = n.removeBranch(a);
            return (
              d.addChildrenAfter([...t, ...i], n),
              d.removeChild(n),
              (e.position = e.offsetOf(t.length > 0 ? t[t.length - 1] : i[0])),
              !0
            );
          }
          return (
            (e.position =
              "backward" === t ? e.offsetOf(n.leftSibling) : e.offsetOf(n)),
            !0
          );
        }
        if (n.isExtensibleSymbol || "subsup" === n.type) {
          if (!i && "forward" === t) return !1;
          if (!i) {
            if (n.subscript || n.superscript) {
              let i =
                "forward" === t
                  ? null != (o = null == (r = n.superscript) ? void 0 : r[0])
                    ? o
                    : null == (a = n.subscript)
                    ? void 0
                    : a[0]
                  : null !=
                    (c = null == (s = n.subscript) ? void 0 : s[0].lastSibling)
                  ? c
                  : null == (l = n.superscript)
                  ? void 0
                  : l[0].lastSibling;
              return i && (e.position = e.offsetOf(i)), !0;
            }
            return !1;
          }
          if ((i && n.hasEmptyBranch(i) && n.removeBranch(i), !n.hasChildren)) {
            let i =
              "forward" === t ? e.offsetOf(n) : Math.max(0, e.offsetOf(n) - 1);
            return n.parent.removeChild(n), (e.position = i), !0;
          }
          if ("superscript" === i)
            if ("backward" === t) {
              let t = e.offsetOf(n.firstChild) - 1;
              e.position = t;
            } else
              n.subscript
                ? (e.position = e.offsetOf(n.subscript[0]))
                : (e.position = e.offsetOf(n));
          else
            "subscript" === i &&
              ("backward" === t && n.superscript
                ? (e.position = e.offsetOf(n.superscript[0].lastSibling))
                : (e.position =
                    "backward" === t
                      ? e.offsetOf(n.firstChild) - 1
                      : e.offsetOf(n)));
          return !0;
        }
        if (
          "genfrac" === (null == d ? void 0 : d.type) &&
          !i &&
          "first" !== n.type
        ) {
          let t = e.offsetOf(n.leftSibling);
          return (
            d.removeChild(n),
            d.hasEmptyBranch("above") && d.hasEmptyBranch("below")
              ? ((t = e.offsetOf(d.leftSibling)),
                d.parent.removeChild(d),
                e.announce("delete", void 0, [d]),
                (e.position = t),
                !0)
              : (e.announce("delete", void 0, [n]), (e.position = t), !0)
          );
        }
        return !1;
      }
      function Ud(e, t, n) {
        let i = e.getAtoms(t);
        if (i.length > 0 && i[0].parent) {
          let r = i[0].parent.firstChild;
          "first" === r.type && (r = r.rightSibling);
          let a = i[i.length - 1].parent.lastChild,
            o = i[0];
          "first" === o.type && (o = o.rightSibling);
          let s = i[i.length - 1];
          if (o === r && s === a) {
            let n = i[0].parent;
            n.parent &&
              "prompt" !== n.type &&
              (t = [e.offsetOf(n.leftSibling), e.offsetOf(n)]);
          }
          if (
            1 === i.length &&
            "placeholder" === i[0].type &&
            "genfrac" === i[0].parent.type
          ) {
            let t = i[0].parent,
              r = "below" === i[0].parentBranch ? "above" : "below",
              a = e.offsetOf(t.leftSibling);
            return e.deferNotifications(
              { content: !0, selection: !0, type: n },
              () => {
                var n, i;
                let o = t.removeBranch(r);
                if (1 === o.length && "placeholder" === o[0].type)
                  null == (i = t.parent) || i.removeChild(t),
                    (e.position = Math.max(0, a));
                else {
                  let i = t.parent.addChildrenAfter(o, t);
                  null == (n = t.parent) || n.removeChild(t),
                    (e.position = e.offsetOf(i));
                }
              }
            );
          }
        }
        return e.deferNotifications(
          { content: !0, selection: !0, type: n },
          () => e.deleteAtoms(t)
        );
      }
      function Jd(e, t) {
        let n,
          i = e.at(t);
        if (i) {
          n = i.mode;
          let e = i.parent;
          for (; !n && e; ) e && (n = e.mode), (e = e.parent);
        }
        return n;
      }
      function Xd(e, t) {
        !e ||
          !t ||
          (m(e)
            ? e.forEach((e) => Xd(e, t))
            : "object" == typeof e &&
              !e.style.color &&
              !e.style.backgroundColor &&
              !e.style.fontFamily &&
              !e.style.fontShape &&
              !e.style.fontSeries &&
              !e.style.fontSize &&
              !e.style.variant &&
              !e.style.variantStyle &&
              (e.applyStyle(t),
              Xd(e.body, t),
              Xd(e.above, t),
              Xd(e.below, t),
              Xd(e.subscript, t),
              Xd(e.superscript, t)));
      }
      function Gd(e, t, n, i) {
        function r(e, t) {
          for (let n of a) if (n.style[e] !== t) return !1;
          return !0;
        }
        if ((t = e.normalizeRange(t))[0] === t[1]) return !1;
        let a = e.getAtoms(t, { includeChildren: !0 });
        "toggle" === i.operation &&
          (n.color &&
            r("color", n.color) &&
            ((n.color = "none"), delete n.verbatimColor),
          n.backgroundColor &&
            r("backgroundColor", n.backgroundColor) &&
            ((n.backgroundColor = "none"), delete n.verbatimBackgroundColor),
          n.fontFamily &&
            r("fontFamily", n.fontFamily) &&
            (n.fontFamily = "none"),
          n.fontSeries &&
            r("fontSeries", n.fontSeries) &&
            (n.fontSeries = "auto"),
          n.fontShape && r("fontShape", n.fontShape) && (n.fontShape = "auto"),
          n.fontSize && r("fontSize", n.fontSize) && (n.fontSize = 5));
        for (let o of a) o.applyStyle(n);
        return !0;
      }
      G(["math", "displaymath"], Pd),
        G("center", Pd),
        Z(
          "array",
          "{columns:colspec}",
          (e, t, n, i) =>
            new $s(e, $d(t), n, { columns: i[0], mathstyleName: "textstyle" })
        ),
        Z(
          ["equation", "equation*", "subequations"],
          "",
          (e, t, n) => new $s(e, $d(t), n, { columns: [{ align: "c" }] })
        ),
        Z(["multline", "multline*"], "", Pd),
        Z(["align", "align*", "aligned", "eqnarray"], "", Pd),
        Z("split", "", Pd),
        Z(["gather", "gathered"], "", Pd),
        Z(
          [
            "matrix",
            "pmatrix",
            "bmatrix",
            "Bmatrix",
            "vmatrix",
            "Vmatrix",
            "matrix*",
            "pmatrix*",
            "bmatrix*",
            "Bmatrix*",
            "vmatrix*",
            "Vmatrix*",
          ],
          "[columns:colspec]",
          Pd
        ),
        Z(["smallmatrix", "smallmatrix*"], "[columns:colspec]", Pd),
        Z(["cases", "dcases", "rcases"], "", Pd),
        xc(
          {
            addRowAfter: Id,
            addColumnAfter: Vd,
            addRowBefore: function (e) {
              return (
                !!Ul(e, { inputType: "insertText" }) &&
                (Rd(e, "before row"), Jl(e, { inputType: "insertText" }), !0)
              );
            },
            addColumnBefore: function (e) {
              return (
                !!Ul(e, { inputType: "insertText" }) &&
                (Rd(e, "before column"), Jl(e, { inputType: "insertText" }), !0)
              );
            },
            removeRow: function (e) {
              return (
                !!Ul(e, { inputType: "deleteContent" }) &&
                (jd(e, "row"), Jl(e, { inputType: "deleteContent" }), !0)
              );
            },
            removeColumn: function (e) {
              return (
                !!Ul(e, { inputType: "deleteContent" }) &&
                (jd(e, "column"), Jl(e, { inputType: "deleteContent" }), !0)
              );
            },
            setEnvironment: function (e, t) {
              if (!Ul(e, {})) return !1;
              e.mathfield.snapshot();
              let n = ".",
                i = ".";
              switch (t) {
                case "pmatrix":
                case "pmatrix*":
                  (n = "("), (i = ")");
                  break;
                case "bmatrix":
                case "bmatrix*":
                  (n = "["), (i = "]");
                  break;
                case "Bmatrix":
                case "Bmatrix*":
                  (n = "\\lbrace"), (i = "\\rbrace");
                  break;
                case "vmatrix":
                case "vmatrix*":
                  (n = "\\vert"), (i = "\\vert");
                  break;
                case "Vmatrix":
                case "Vmatrix*":
                  (n = "\\Vert"), (i = "\\Vert");
                  break;
                case "matrix":
                case "matrix*":
                  (n = "."), (i = ".");
                  break;
                case "cases":
                case "dcases":
                  n = "\\lbrace";
                  break;
                case "rcases":
                  i = "\\rbrace";
              }
              let r = e.parentEnvironment;
              return (
                (r.environmentName = t),
                (r.leftDelim = n),
                (r.rightDelim = i),
                Jl(e, {}),
                !0
              );
            },
          },
          {
            target: "model",
            canUndo: !0,
            changeContent: !0,
            changeSelection: !0,
          }
        );
      var Zd = new Set([
        "Backquote",
        "Digit0",
        "Digit1",
        "Digit2",
        "Digit3",
        "Digit4",
        "Digit5",
        "Digit6",
        "Digit7",
        "Digit8",
        "Digit9",
        "Minus",
        "Equal",
        "IntlYen",
        "KeyQ",
        "KeyW",
        "KeyE",
        "KeyR",
        "KeyT",
        "KeyY",
        "KeyU",
        "KeyI",
        "KeyO",
        "KeyP",
        "BracketLeft",
        "BracketRight",
        "Backslash",
        "KeyA",
        "KeyS",
        "KeyD",
        "KeyF",
        "KeyG",
        "KeyH",
        "KeyJ",
        "KeyK",
        "KeyL",
        "Semicolon",
        "Quote",
        "IntlBackslash",
        "KeyZ",
        "KeyX",
        "KeyC",
        "KeyV",
        "KeyB",
        "KeyN",
        "KeyM",
        "Comma",
        "Period",
        "Slash",
        "IntlRo",
        "Space",
        "Numpad0",
        "Numpad1",
        "Numpad2",
        "Numpad3",
        "Numpad4",
        "Numpad5",
        "Numpad6",
        "Numpad7",
        "Numpad8",
        "Numpad9",
        "NumpadAdd",
        "NumpadComma",
        "NumpadDecimal",
        "NumpadDivide",
        "NumpadEqual",
        "NumpadHash",
        "NumpadMultiply",
        "NumpadParenLeft",
        "NumpadParenRight",
        "NumpadStar",
        "NumpadSubstract",
      ]);
      function Yd(e) {
        return (
          !(e.ctrlKey || e.metaKey || ["Dead", "Process"].includes(e.key)) &&
          ("" === e.code || Zd.has(e.code))
        );
      }
      function Qd(e) {
        e = (function (e) {
          if (e.code) return e;
          let t = Object.entries(Nl().mapping),
            n = !1,
            i = !1,
            r = "";
          for (let a = 0; a < 4; a++) {
            for (let [o, s] of t)
              if (s[a] === e.key) {
                (r = o),
                  3 === a
                    ? ((n = !0), (i = !0))
                    : 2 === a
                    ? (n = !0)
                    : 1 === a && (i = !0);
                break;
              }
            if (r) break;
          }
          return new KeyboardEvent(
            e.type,
            u(d({}, e), { altKey: n, shiftKey: i, code: r })
          );
        })(e);
        let t = [];
        return (
          e.ctrlKey && t.push("ctrl"),
          e.metaKey && t.push("meta"),
          e.altKey && t.push("alt"),
          e.shiftKey && t.push("shift"),
          0 === t.length ? `[${e.code}]` : (t.push(`[${e.code}]`), t.join("+"))
        );
      }
      function eu(e, t, n) {
        let i = null,
          r = null,
          a = !1,
          o = !1,
          s = !1,
          l = new AbortController(),
          c = l.signal;
        return (
          e.addEventListener(
            "keydown",
            (t) => {
              a ||
              "Process" === t.key ||
              "CapsLock" === t.code ||
              /(Control|Meta|Alt|Shift)(Left|Right)/.test(t.code)
                ? (i = null)
                : ((i = t),
                  (r = null),
                  n.onKeystroke(Qd(t), t) ? (e.textContent = "") : (i = null));
            },
            { capture: !0, signal: c }
          ),
          e.addEventListener(
            "keypress",
            (e) => {
              a || (i && r && n.onKeystroke(Qd(i), i), (r = e));
            },
            { capture: !0, signal: c }
          ),
          e.addEventListener(
            "compositionstart",
            (t) => {
              (e.textContent = ""), (a = !0), n.onCompositionStart(t.data);
            },
            { capture: !0, signal: c }
          ),
          e.addEventListener(
            "compositionupdate",
            (e) => {
              a && n.onCompositionUpdate(e.data);
            },
            { capture: !0, signal: c }
          ),
          e.addEventListener(
            "compositionend",
            (t) => {
              (e.textContent = ""), a && ((a = !1), n.onCompositionEnd(t.data));
            },
            { capture: !0, signal: c }
          ),
          e.addEventListener(
            "beforeinput",
            (e) => e.stopImmediatePropagation(),
            { signal: c }
          ),
          e.addEventListener(
            "input",
            (t) => {
              var i;
              if (
                !a &&
                ((e.textContent = ""), "insertCompositionText" !== t.inputType)
              ) {
                if ("insertFromPaste" === t.inputType)
                  return t.preventDefault(), void t.stopPropagation();
                n.onInput(null != (i = t.data) ? i : ""),
                  t.preventDefault(),
                  t.stopPropagation();
              }
            },
            { signal: c }
          ),
          e.addEventListener(
            "paste",
            (t) => {
              e.focus({ preventScroll: !0 }),
                (e.textContent = ""),
                n.onPaste(t) || t.preventDefault(),
                t.stopImmediatePropagation();
            },
            { signal: c }
          ),
          e.addEventListener("cut", (e) => n.onCut(e), {
            capture: !0,
            signal: c,
          }),
          e.addEventListener("copy", (e) => n.onCopy(e), {
            capture: !0,
            signal: c,
          }),
          e.addEventListener(
            "blur",
            (a) => {
              var l, c, d;
              if (
                (null ==
                (c = null == (l = a.relatedTarget) ? void 0 : l._mathfield)
                  ? void 0
                  : c.element) === t
              )
                return (
                  e.focus({ preventScroll: !0 }),
                  a.preventDefault(),
                  void a.stopPropagation()
                );
              let u = null == (d = Cc.scrim) ? void 0 : d.state;
              return "open" === u ||
                "opening" === u ||
                a.relatedTarget === a.target.getRootNode().host
                ? (a.preventDefault(), void a.stopPropagation())
                : void (
                    s ||
                    o ||
                    ((s = !0), (i = null), (r = null), n.onBlur(), (s = !1))
                  );
            },
            { capture: !0, signal: c }
          ),
          e.addEventListener(
            "focus",
            (e) => {
              s || o || ((o = !0), n.onFocus(), (o = !1));
            },
            { capture: !0, signal: c }
          ),
          {
            dispose: () => l.abort(),
            cancelComposition: () => {
              a &&
                (e.blur(),
                requestAnimationFrame(() => e.focus({ preventScroll: !0 })));
            },
            blur: () => {
              "function" == typeof e.blur && e.blur();
            },
            focus: () => {
              !o &&
                "function" == typeof e.focus &&
                e.focus({ preventScroll: !0 });
            },
            hasFocus: () =>
              (function () {
                var e;
                let t = document.activeElement;
                for (
                  ;
                  null != (e = null == t ? void 0 : t.shadowRoot) &&
                  e.activeElement;

                )
                  t = t.shadowRoot.activeElement;
                return t;
              })() === e,
            setAriaLabel: (t) => e.setAttribute("aria-label", t),
            setValue: (t) => {
              var n;
              (e.textContent = t),
                (e.style.left = "-1000px"),
                null == (n = window.getSelection()) || n.selectAllChildren(e);
            },
            moveTo: (t, n) => {
              (e.style.top = `${n}px`), (e.style.left = `${t}px`);
            },
          }
        );
      }
      function tu(e) {
        var t;
        if (!e || !Yd(e)) return "";
        let n;
        return (
          "Unidentified" === e.key && e.target && (n = e.target.value),
          (n = null != (t = null != n ? n : e.key) ? t : e.code),
          /^(Dead|Return|Enter|Tab|Escape|Delete|PageUp|PageDown|Home|End|Help|ArrowLeft|ArrowRight|ArrowUp|ArrowDown)$/.test(
            n
          ) && (n = ""),
          n
        );
      }
      var nu = class e {
        constructor(e) {
          (this.recording = !1), (this.model = e), this.reset();
        }
        reset() {
          (this.stack = []), (this.index = -1), (this.lastOp = "");
        }
        startRecording() {
          this.recording = !0;
        }
        stopRecording() {
          this.recording = !1;
        }
        canUndo() {
          return this.index - 1 >= 0;
        }
        canRedo() {
          return this.stack.length - 1 > this.index;
        }
        stopCoalescing(e) {
          e && this.index >= 0 && (this.stack[this.index].selection = e),
            (this.lastOp = "");
        }
        undo() {
          return (
            !!this.canUndo() &&
            (this.model.setState(this.stack[this.index - 1], {
              silenceNotifications: !1,
              type: "undo",
            }),
            (this.index -= 1),
            (this.lastOp = ""),
            !0)
          );
        }
        redo() {
          return (
            !!this.canRedo() &&
            ((this.index += 1),
            this.model.setState(this.stack[this.index], {
              silenceNotifications: !1,
              type: "redo",
            }),
            (this.lastOp = ""),
            !0)
          );
        }
        pop() {
          this.canUndo() &&
            (this.stack.splice(this.index, this.stack.length - this.index),
            (this.index -= 1));
        }
        snapshot(t) {
          return (
            !!this.recording &&
            (t && t === this.lastOp && this.pop(),
            this.stack.splice(
              this.index + 1,
              this.stack.length - this.index - 1
            ),
            this.stack.push(this.model.getState()),
            (this.index += 1),
            this.stack.length > e.maximumDepth &&
              (this.stack.shift(), (this.index -= 1)),
            (this.lastOp = null != t ? t : ""),
            !0)
          );
        }
      };
      nu.maximumDepth = 1e3;
      var iu = nu;
      function ru(e) {
        let t = e.position,
          n = e.at(t).parent;
        return null != n && n.parent
          ? ((e.position = e.offsetOf(n)),
            e.mathfield.stopCoalescingUndo(),
            e.announce("move", t),
            !0)
          : (e.announce("plonk"), !1);
      }
      function au(e) {
        var t;
        if (
          (e.collapseSelection(),
          (function (e) {
            let t = 0,
              n = e.at(e.position),
              i = !1;
            for (; n; )
              (!n.hasEmptyBranch("superscript") ||
                !n.hasEmptyBranch("subscript")) &&
                (t += 1),
                n.hasEmptyBranch("superscript")
                  ? n.hasEmptyBranch("subscript") || (i = !1)
                  : (i = !0),
                (n = n.parent);
            return i ? t : 0;
          })(e) >= e.mathfield.options.scriptDepth[1])
        )
          return e.announce("plonk"), !1;
        let n = e.at(e.position);
        return (
          void 0 === n.subsupPlacement &&
            ("subsup" !== (null == (t = n.rightSibling) ? void 0 : t.type) &&
              n.parent.addChildAfter(new Js({ style: n.computedStyle }), n),
            (n = n.rightSibling)),
          n.createBranch("superscript"),
          e.setSelection(e.getSiblingsRange(e.offsetOf(n.superscript[0]))),
          !0
        );
      }
      function ou(e) {
        var t;
        if (
          (e.collapseSelection(),
          (function (e) {
            let t = 0,
              n = e.at(e.position),
              i = !1;
            for (; n; )
              (!n.hasEmptyBranch("superscript") ||
                !n.hasEmptyBranch("subscript")) &&
                (t += 1),
                n.hasEmptyBranch("superscript")
                  ? n.hasEmptyBranch("subscript") || (i = !0)
                  : (i = !1),
                (n = n.parent);
            return i ? t : 0;
          })(e) >= e.mathfield.options.scriptDepth[0])
        )
          return e.announce("plonk"), !1;
        let n = e.at(e.position);
        return (
          void 0 === n.subsupPlacement &&
            ("subsup" !==
              (null == (t = e.at(e.position + 1)) ? void 0 : t.type) &&
              n.parent.addChildAfter(
                new Js({ style: e.at(e.position).computedStyle }),
                n
              ),
            (n = e.at(e.position + 1))),
          n.createBranch("subscript"),
          e.setSelection(e.getSiblingsRange(e.offsetOf(n.subscript[0]))),
          !0
        );
      }
      function su() {
        function e(e) {
          return !(
            !(function (e) {
              return !(
                e.disabled ||
                ("hidden" === e.type && "INPUT" === e.tagName.toUpperCase()) ||
                (function (e) {
                  if (
                    !f() ||
                    e === document.activeElement ||
                    e.contains(document.activeElement)
                  )
                    return !1;
                  if ("hidden" === getComputedStyle(e).visibility) return !0;
                  let t = e.getBoundingClientRect();
                  if (0 === t.width || 0 === t.height) return !0;
                  for (; e; ) {
                    if ("none" === getComputedStyle(e).display) return !0;
                    e = e.parentElement;
                  }
                  return !1;
                })(e)
              );
            })(e) ||
            (function (e) {
              return (
                "INPUT" === e.tagName.toUpperCase() &&
                "radio" === e.type &&
                !(function (e) {
                  var t;
                  if (!e.name) return !0;
                  let n = (function (e, t) {
                    for (let n of e) if (n.checked && n.form === t) return n;
                    return null;
                  })(
                    (null != (t = e.form)
                      ? t
                      : e.ownerDocument
                    ).querySelectorAll(
                      'input[type="radio"][name="' + e.name + '"]'
                    ),
                    e.form
                  );
                  return !n || n === e;
                })(e)
              );
            })(e) ||
            t(e) < 0
          );
        }
        function t(e) {
          var t;
          let n = Number.parseInt(
            null != (t = e.getAttribute("tabindex")) ? t : "NaN",
            10
          );
          return Number.isNaN(n)
            ? "true" === e.contentEditable ||
              (("AUDIO" === e.nodeName || "VIDEO" === e.nodeName) &&
                null === e.getAttribute("tabindex"))
              ? 0
              : e.tabIndex
            : n;
        }
        return f()
          ? (function (n) {
              let i = [],
                r = [];
              return (
                [
                  ...n.querySelectorAll(
                    'input, select, textarea, a[href], button,\n        [tabindex], audio[controls], video[controls],\n        [contenteditable]:not([contenteditable="false"]), details>summary'
                  ),
                ]
                  .filter(e)
                  .forEach((e, n) => {
                    let a = t(e);
                    0 === a
                      ? i.push(e)
                      : r.push({ documentOrder: n, tabIndex: a, node: e });
                  }),
                r
                  .sort((e, t) =>
                    e.tabIndex === t.tabIndex
                      ? e.documentOrder - t.documentOrder
                      : e.tabIndex - t.tabIndex
                  )
                  .map((e) => e.node)
                  .concat(i)
              );
            })(document.body)
          : [];
      }
      function lu(e, t, n = "forward") {
        let i = e.position;
        if (Array.isArray(t)) {
          let r = e.offsetOf(t[0]),
            a = e.offsetOf(t[t.length - 1]);
          return (
            "forward" === n ? e.setSelection(r, a) : e.setSelection(a, r),
            e.announce("move", i),
            e.mathfield.stopCoalescingUndo(),
            !0
          );
        }
        return lu(e, "forward" === n ? [t.leftSibling, t] : [t, t.leftSibling]);
      }
      function cu(e, t) {
        let n = e.position;
        if (("number" == typeof t && (t = e.at(t)), "prompt" === t.type))
          e.setSelection(e.offsetOf(t.firstChild), e.offsetOf(t.lastChild));
        else {
          let n = e.offsetOf(t);
          "placeholder" === t.type
            ? e.setSelection(n - 1, n)
            : (e.position = n);
        }
        return e.announce("move", n), e.mathfield.stopCoalescingUndo(), !0;
      }
      function du(e, t, n = !0) {
        var i, r;
        let a = "forward" === t ? 1 : -1;
        "placeholder" === e.at(e.anchor).type && Qu(e, t);
        let o,
          s = e.at(e.anchor).parentPrompt;
        o = s
          ? "forward" === t
            ? e.offsetOf(s) + 1
            : e.offsetOf(s.leftSibling)
          : Math.max(e.position + a, 0);
        let l = uu(e, o, t);
        if (
          !l ||
          ("forward" === t && e.offsetOf(l) < o) ||
          ("backward" === t && e.offsetOf(l) > o)
        ) {
          if (
            !n ||
            (null !=
              (r =
                null == (i = e.mathfield.host)
                  ? void 0
                  : i.dispatchEvent(
                      new CustomEvent("move-out", {
                        detail: { direction: t },
                        cancelable: !0,
                        bubbles: !0,
                        composed: !0,
                      })
                    )) &&
              !r)
          )
            return e.announce("plonk"), !1;
          let o = su();
          if (!document.activeElement || o.length <= 1)
            return e.announce("plonk"), !1;
          let s = o.indexOf(document.activeElement) + a;
          return (
            s < 0 && (s = o.length - 1),
            s >= o.length && (s = 0),
            o[s].focus(),
            e.mathfield.stopCoalescingUndo(),
            !0
          );
        }
        return cu(e, l), !0;
      }
      function uu(e, t = 0, n = "forward") {
        return e.findAtom(
          (t) =>
            "placeholder" === t.type ||
            "prompt" === t.type ||
            (!e.mathfield.readOnly &&
              t.treeDepth > 2 &&
              t.isFirstSibling &&
              t.isLastSibling),
          t,
          n
        );
      }
      function hu(e, t, n, i) {
        if ("forward" === i) {
          let e = t.rightSibling;
          for (; e && !n(e); ) e = e.rightSibling;
          return e;
        }
        let r = t.leftSibling;
        for (; r && !n(r); ) r = r.leftSibling;
        return r;
      }
      function pu(e, t, n) {
        "function" == typeof t && ((n = t), (t = 1 / 0)),
          void 0 === t && (t = 1 / 0);
        let i = e.position,
          r = !1,
          a = "";
        for (; !r; ) {
          let o = e.at(i);
          (r =
            0 === t ||
            void 0 === o ||
            "math" !== o.mode ||
            !(
              (o.type && /mord|mpunct/.test(o.type)) ||
              ("mop" === o.type && /[a-zA-Z]+/.test(o.value))
            ) ||
            !o.hasEmptyBranch("superscript") ||
            !o.hasEmptyBranch("subscript") ||
            ("function" == typeof n && !n(o))),
            r ||
              ((o.mode = "text"),
              (o.command = o.value),
              (o.verbatimLatex = void 0),
              (a += o.value)),
            (i -= 1),
            (t -= 1);
        }
        Jl(e, { data: a, inputType: "insertText" });
      }
      function mu(e, t, n) {
        "function" == typeof t && ((n = t), (t = 1 / 0)),
          void 0 === t && (t = 1 / 0);
        let i = e.position,
          r = !1,
          a = [];
        for (; !r; ) {
          let o = e.at(i);
          (r =
            0 === t ||
            !o ||
            o.isFirstSibling ||
            "text" !== o.mode ||
            " " === o.value ||
            (n && !n(o))),
            r ||
              (a.push(Eo.serialize([o], { defaultMode: "math" })),
              (o.mode = "math")),
            (i -= 1),
            (t -= 1);
        }
        fu(e), Jl(e, { data: Ja(a), inputType: "insertText" });
      }
      function fu(e) {
        var t;
        let n = e.position - 1;
        for (; n >= 0 && "math" === (null == (t = e.at(n)) ? void 0 : t.mode); )
          n -= 1;
        if (
          !(n < 0) &&
          "text" === e.at(n).mode &&
          " " === e.at(n).value &&
          "math" === e.at(n - 1).mode
        ) {
          e.at(n - 1).parent.removeChild(e.at(n - 1));
          let t = e.silenceNotifications;
          (e.silenceNotifications = !0),
            (e.position -= 1),
            (e.silenceNotifications = t),
            Jl(e, { inputType: "deleteContent" });
        }
      }
      function yu() {
        return (
          document.getElementById("mathlive-keystroke-caption-panel") ||
          (ds("keystroke-caption"),
          ds("core"),
          tc("mathlive-keystroke-caption-panel"))
        );
      }
      function gu(e, t, n) {
        var i, r, a, o;
        let { model: s } = e;
        if (n.isTrusted) {
          !(function (e) {
            var t, n;
            if (!e || "Unidentified" === e.key || "Dead" === e.key) return;
            let i =
              e.shiftKey && e.altKey ? 3 : e.altKey ? 2 : e.shiftKey ? 1 : 0;
            for (let r of Pl)
              (null == (t = r.mapping[e.code]) ? void 0 : t[i]) === e.key
                ? (r.score += 1)
                : null != (n = r.mapping[e.code]) && n[i] && (r.score = 0);
            Pl.sort((e, t) => t.score - e.score);
          })(n);
          let t = Nl();
          e.keyboardLayout !== t.id &&
            ((e.keyboardLayout = t.id), (e._keybindings = void 0));
        }
        if (
          (clearTimeout(e.inlineShortcutBufferFlushTimer),
          (e.inlineShortcutBufferFlushTimer = 0),
          (function (e, t) {
            if (!e.isSelectionEditable || !e.keystrokeCaptionVisible) return;
            let n = yu(),
              i = e.element.getBoundingClientRect();
            (n.style.left = `${i.left}px`),
              (n.style.top = i.top - 64 + "px"),
              (n.innerHTML = window.MathfieldElement.createHTML(
                "<span>" + (Il(t) || t) + "</span>" + n.innerHTML
              )),
              (n.style.visibility = "visible"),
              setTimeout(() => {
                n.childNodes.length > 0 &&
                  n.childNodes[n.childNodes.length - 1].remove(),
                  0 === n.childNodes.length && (n.style.visibility = "hidden");
              }, 3e3);
          })(e, t),
          n.isTrusted && n.defaultPrevented)
        )
          return e.flushInlineShortcutBuffer(), !1;
        if (s.mathfield.smartFence) {
          if (wu(s, tu(n), e.style))
            return (
              e.flushInlineShortcutBuffer(),
              (e.dirty = !0),
              e.scrollIntoView(),
              n.preventDefault && n.preventDefault(),
              !1
            );
        } else {
          let { parent: i } = s.at(s.position);
          if (
            i instanceof Vs &&
            "?" === i.rightDelim &&
            s.at(s.position).isLastSibling &&
            /^[)}\]|]$/.test(t)
          )
            return (
              e.snapshot(),
              (i.isDirty = !0),
              (i.rightDelim = t),
              (s.position += 1),
              Wl(s),
              Jl(s, { data: tu(n), inputType: "insertText" }),
              e.snapshot("insert-fence"),
              (e.dirty = !0),
              e.scrollIntoView(),
              n.preventDefault && n.preventDefault(),
              !1
            );
          if (!s.selectionIsCollapsed) {
            let t = tu(n);
            if ("(" === t || "{" === t || "[" === t) {
              let i = { "(": "(", "{": "\\lbrace", "[": "\\lbrack" }[t],
                r = { "(": ")", "{": "\\rbrace", "[": "\\rbrack" }[t],
                [a, o] = $o(s.selection);
              return (
                e.snapshot(),
                (s.position = o),
                Wo.insert(s, r, { format: "latex" }),
                (s.position = a),
                Wo.insert(s, i, { format: "latex" }),
                s.setSelection(a + 1, o + 1),
                Jl(s, { data: t, inputType: "insertText" }),
                e.snapshot("insert-fence"),
                (e.dirty = !0),
                e.scrollIntoView(),
                n.preventDefault && n.preventDefault(),
                !1
              );
            }
          }
        }
        let l,
          c,
          u = "",
          h = e.inlineShortcutBuffer;
        if (e.isSelectionEditable) {
          if ("math" === s.mode)
            if ("[Backspace]" === t)
              h.pop(), e.flushInlineShortcutBuffer({ defer: !0 });
            else if (Yd(n)) {
              let t = tu(n),
                a = [
                  ...(null !=
                  (r = null == (i = h[h.length - 1]) ? void 0 : i.keystrokes)
                    ? r
                    : []),
                  t,
                ];
              h.push({
                state: s.getState(),
                keystrokes: a,
                leftSiblings: vu(e),
              });
              let o = 0,
                d = "";
              for (; !l && o < a.length; )
                (c = h.length - (a.length - o)),
                  (d = a.slice(o).join("")),
                  (l = Po(h[c].leftSiblings, d, e.options.inlineShortcuts)),
                  !l &&
                    /^[a-zA-Z][a-zA-Z0-9]+?([_\^][a-zA-Z0-9\*\+\-]+?)?$/.test(
                      d
                    ) &&
                    (l = e.options.onInlineShortcut(e, d)),
                  (o += 1);
              e.flushInlineShortcutBuffer({ defer: !0 });
            } else e.flushInlineShortcutBuffer();
          if (e.options.smartMode) {
            let i = s.mode;
            l
              ? (s.mode = "math")
              : (function (e, t, n) {
                  if (e.smartModeSuppressed) return !1;
                  let { model: i } = e;
                  if (!i.at(i.position).isLastSibling || !n || !Yd(n))
                    return !1;
                  let r = tu(n);
                  if (!i.selectionIsCollapsed)
                    return !("text" !== e.model.mode || !/[/_^]/.test(r));
                  let a =
                    (function (e) {
                      let t = "",
                        n = e.position,
                        i = !1;
                      for (; !i; ) {
                        let r = e.at(n);
                        (i = !(
                          r &&
                          ("text" === r.mode ||
                            ("math" === r.mode &&
                              r.type &&
                              /mord|mpunct/.test(r.type)))
                        )),
                          i || (t = r.value + t),
                          (n -= 1);
                      }
                      return t;
                    })(i) + r;
                  if ("text" === e.model.mode) {
                    if ("Esc" === t || /[/\\]/.test(r)) return !0;
                    if (/[\^_]/.test(r))
                      return /(^|\s)[a-zA-Z][^_]$/.test(a) && mu(i, 1), !0;
                    let e = { ")": "(", "}": "{", "]": "[" }[r],
                      { parent: n } = i.at(i.position);
                    if (e && n instanceof Vs && n.leftDelim === e) return !0;
                    if (/(^|[^a-zA-Z])(a|I) $/.test(a)) return !1;
                    if (
                      /[$\u20ac\xa3\u20a4\u20ba\xa5\xa4\u0e3f\xa2\u20a1\u20a7\u20a8\u20b9\u20a9\u20b1]/u.test(
                        r
                      )
                    )
                      return !0;
                    if (/(^|[^a-zA-Z'\u2019])[a-zA-Z] $/.test(a))
                      return mu(i, 1), !1;
                    if (/\D\.[^\d\s]$/.test(a)) {
                      mu(i, 1);
                      let e = i.at(i.position);
                      return (
                        (e.value = "\u22c5"),
                        (e.style.variant = "normal"),
                        (e.command = "\\cdot"),
                        (e.verbatimLatex = void 0),
                        Jl(i, { data: "\\cdot", inputType: "insertText" }),
                        !0
                      );
                    }
                    if (
                      /(^|\s)[a-zA-Z][^a-zA-Z]$/.test(a) ||
                      /\.\d$/.test(a) ||
                      /\([\d+\-.]$/.test(a)
                    )
                      return mu(i, 1), !0;
                    if (/\([a-z][,;]$/.test(a)) return mu(i, 2), !0;
                    if (/[\d+\-=><*|]$/.test(r)) return fu(i), !0;
                  } else {
                    if ("[Space]" === t)
                      return (
                        pu(i, void 0, (e) => /[a-z][:,;.]$/.test(e.value)), !0
                      );
                    if (
                      /[a-zA-Z]{3,}$/.test(a) &&
                      !/(dxd|abc|xyz|uvw)$/.test(a)
                    )
                      return pu(i, void 0, (e) => /[a-zA-Z]/.test(e.value)), !0;
                    if (/(^|\W)(if)$/i.test(a)) return pu(i, 1), !0;
                    if (
                      /(\u0393|\u0394|\u0398|\u039B|\u039E|\u03A0|\u03A3|\u03A5|\u03A6|\u03A8|\u03A9|[\u03B1-\u03C9]|\u03D1|\u03D5|\u03D6|\u03F1|\u03F5){3,}$/u.test(
                        a
                      ) &&
                      !/(\u03b1\u03b2\u03b3)$/.test(a)
                    )
                      return (
                        pu(i, void 0, (e) =>
                          /(:|,|;|.|\u0393|\u0394|\u0398|\u039B|\u039E|\u03A0|\u03A3|\u03A5|\u03A6|\u03A8|\u03A9|[\u03B1-\u03C9]|\u03D1|\u03D5|\u03D6|\u03F1|\u03F5)/u.test(
                            e.value
                          )
                        ),
                        !0
                      );
                    if ("?" === r || ("." === r && !/[\d-+]\.$/.test(a)))
                      return !0;
                  }
                  return !1;
                })(e, t, n) &&
                ((s.mode = { math: "text", text: "math" }[s.mode]), (u = "")),
              s.mode !== i &&
                ((null != (a = e.host) &&
                  a.dispatchEvent(
                    new Event("mode-change", {
                      bubbles: !0,
                      composed: !0,
                      cancelable: !0,
                    })
                  )) ||
                  (s.mode = i));
          }
        }
        if (!l) {
          if (
            (u ||
              (u = (function (e, t, n) {
                if (0 === e.length) return "";
                let i = Dl(Kl(n));
                for (let r = e.length - 1; r >= 0; r--)
                  if (e[r].key === i && (!e[r].ifMode || e[r].ifMode === t))
                    return e[r].command;
                return "";
              })(e.keybindings, s.mode, t)),
            !u && ("[Enter]" === t || "[Return]" === t))
          ) {
            let t = !1;
            return (
              Ul(s, { inputType: "insertLineBreak" }) &&
                (e.host &&
                  (t = !e.host.dispatchEvent(
                    new Event("change", { bubbles: !0, composed: !0 })
                  )),
                t ||
                  (n.preventDefault &&
                    (n.preventDefault(), n.stopPropagation())),
                Jl(s, { inputType: "insertLineBreak" })),
              t
            );
          }
          if ((!u || "[Space]" === t) && "math" === s.mode) {
            if ("[Space]" === t) {
              if (
                ((e.adoptStyle = "none"),
                e.flushInlineShortcutBuffer(),
                e.options.mathModeSpace)
              )
                return (
                  Wo.insert(s, e.options.mathModeSpace, {
                    format: "latex",
                    mode: "math",
                  }),
                  e.snapshot("insert-space"),
                  (u = ""),
                  (e.dirty = !0),
                  e.scrollIntoView(),
                  n.preventDefault && (n.preventDefault(), n.stopPropagation()),
                  !1
                );
              let t = s.at(s.position + 1),
                i = s.at(s.position - 1);
              if (
                "text" === (null == t ? void 0 : t.mode) ||
                "text" === (null == i ? void 0 : i.mode)
              )
                return (
                  Wo.insert(s, " ", { mode: "text" }),
                  e.snapshot("insert-space"),
                  (e.dirty = !0),
                  e.scrollIntoView(),
                  !1
                );
            }
            null != (o = s.at(s.position)) &&
              o.isDigit() &&
              "," === window.MathfieldElement.decimalSeparator &&
              "," === tu(n) &&
              (u = "insertDecimalSeparator");
          }
        }
        if (!l && !u) return !0;
        let p = s.at(Math.max(s.position, s.anchor)),
          { parent: m } = p;
        if (
          ("moveAfterParent" === u &&
            "leftright" === (null == m ? void 0 : m.type) &&
            p.isLastSibling &&
            e.options.smartFence &&
            wu(s, ".", e.style) &&
            ((u = ""), fc(e)),
          e.keyboardDelegate.cancelComposition(),
          u)
        )
          e.executeCommand(u);
        else if (l) {
          let t = d(d({}, s.at(s.position).computedStyle), e.style);
          s.setState(h[c].state);
          let n = h[h.length - 1].keystrokes;
          for (let e of n)
            Wo.insert(s, e, { silenceNotifications: !0, style: t });
          e.snapshot("insert-shortcut"),
            s.setState(h[c].state),
            s.deferNotifications(
              { content: !0, selection: !0, data: l, type: "insertText" },
              () => (
                Wo.insert(s, l, { format: "latex", style: t }),
                fu(e.model),
                l.endsWith(" ") &&
                  ((s.mode = "text"),
                  Wo.insert(s, " ", { style: t, mode: "text" })),
                e.snapshot(),
                s.selectionIsCollapsed || e.flushInlineShortcutBuffer(),
                !0
              )
            ),
            (e.dirty = !0),
            s.announce("replacement");
        }
        return e.scrollIntoView(), n.preventDefault && n.preventDefault(), !1;
      }
      function bu(e, t, n) {
        let { model: i } = e;
        if (!e.isSelectionEditable) return void i.announce("plonk");
        null != n || (n = {}),
          n.focus && e.focus(),
          n.feedback && window.MathfieldElement.playSound("keypress"),
          "string" == typeof n.mode && (e.switchMode(n.mode), e.snapshot());
        let r = Ha(t),
          a = window.mathVirtualKeyboard;
        if (
          (null != a &&
            a.visible &&
            a.isShifted &&
            (r =
              "string" == typeof r
                ? r.toUpperCase()
                : r.map((e) => e.toUpperCase())),
          n.simulateKeystroke)
        ) {
          let t = !0;
          for (let n of r)
            gu(e, n, new KeyboardEvent("keypress", { key: n })) && (t = !1);
          if (t) return;
        }
        let o = i.at(i.position),
          s = d(d({}, o.computedStyle), e.style);
        if (
          (i.selectionIsCollapsed ||
            (i.deleteAtoms($o(i.selection)), e.snapshot("delete")),
          "latex" === i.mode)
        )
          i.deferNotifications(
            { content: !0, selection: !0, data: t, type: "insertText" },
            () => {
              Zl(e);
              for (let e of r) Wo.insert(i, e);
              e.snapshot("insert-latex"), Yl(e);
            }
          );
        else if ("text" === i.mode) {
          for (let e of r) Wo.insert(i, e, { style: s });
          e.snapshot("insert-text");
        } else if ("math" === i.mode) for (let l of r) xu(e, l, s, o);
        (e.dirty = !0), e.scrollIntoView();
      }
      function vu(e) {
        let t = e.model,
          n = [],
          i = t.at(Math.min(t.position, t.anchor));
        for (; "first" !== i.type; ) n.push(i), (i = i.leftSibling);
        return n;
      }
      function xu(e, t, n, i) {
        var r;
        let a = e.model,
          o = {
            "^": "moveToSuperscript",
            _: "moveToSubscript",
            " ": "moveAfterParent",
          }[t];
        if (
          (" " === t &&
            e.options.mathModeSpace &&
            (o = ["insert", e.options.mathModeSpace]),
          o)
        )
          e.executeCommand(o);
        else {
          if (
            /\d/.test(t) &&
            e.options.smartSuperscript &&
            "superscript" === i.parentBranch &&
            "mop" !== (null == (r = i.parent) ? void 0 : r.type) &&
            i.hasNoSiblings
          )
            return (
              (function (e) {
                e.selectionIsCollapsed ||
                  (e.deleteAtoms($o(e.selection)),
                  e.mathfield.snapshot("delete"));
              })(a),
              Wo.insert(a, t, { style: n }),
              e.snapshot(),
              ru(a),
              void e.snapshot()
            );
          if ("none" !== e.adoptStyle) {
            let r =
              "left" === e.adoptStyle ? i : i.parent ? i.rightSibling : null;
            "mord" === (null == r ? void 0 : r.type) &&
              /[a-zA-Z0-9]/.test(r.value) &&
              /[a-zA-Z0-9]/.test(t) &&
              ((n = d({}, n)),
              r.style.variant && (n.variant = r.style.variant),
              r.style.variantStyle && (n.variantStyle = r.style.variantStyle));
          }
          Wo.insert(a, t, { style: n }),
            e.snapshot(`insert-${a.at(a.position).type}`);
        }
      }
      function wu(e, t, n) {
        if (!t || "math" !== e.mode) return !1;
        let i = e.at(e.position),
          { parent: r } = i,
          a = {
            "(": "(",
            ")": ")",
            "{": "\\lbrace",
            "}": "\\rbrace",
            "[": "\\lbrack",
            "]": "\\rbrack",
            "|": "|",
          }[t];
        if (!a) return !1;
        let o = ms[a],
          s = ps[a];
        if (!e.selectionIsCollapsed) {
          e.mathfield.snapshot();
          let [t, n] = $o(e.selection),
            i = e.extractAtoms([t, n]),
            o = r.addChildrenAfter(
              [new Vs("left...right", i, { leftDelim: a, rightDelim: s })],
              e.at(t)
            );
          return (
            e.setSelection(e.offsetOf(o.firstChild), e.offsetOf(o.lastChild)),
            e.mathfield.snapshot("insert-fence"),
            Jl(e, { data: a, inputType: "insertText" }),
            !0
          );
        }
        if ("|" === a) {
          let t = r instanceof Vs ? r.leftDelim + r.rightDelim : "";
          if ("\\lbrace\\rbrace" === t || "\\{\\}" === t || "\\lbrace?" === t)
            return (
              e.mathfield.snapshot(),
              Wo.insert(e, "\\,\\middle\\vert\\,", {
                format: "latex",
                style: n,
              }),
              e.mathfield.snapshot("insert-fence"),
              Jl(e, { data: a, inputType: "insertText" }),
              !0
            );
        }
        if (s) {
          if (
            r instanceof Vs &&
            r.firstChild === i &&
            ("?" === r.leftDelim || "." === r.leftDelim)
          )
            return (
              (r.leftDelim = a),
              (r.isDirty = !0),
              e.mathfield.snapshot(),
              Jl(e, { data: a, inputType: "insertText" }),
              e.mathfield.snapshot("insert-fence"),
              !0
            );
          if (!(r instanceof Vs)) {
            let t = i;
            for (; t && ("mclose" !== t.type || t.value !== s); )
              t = t.rightSibling;
            if (t) {
              e.mathfield.snapshot();
              let n = e.extractAtoms([e.offsetOf(i), e.offsetOf(t)]);
              return (
                n.pop(),
                r.addChildrenAfter(
                  [new Vs("left...right", n, { leftDelim: a, rightDelim: s })],
                  i
                ),
                (e.position = e.offsetOf(r.firstChild) + 1),
                Jl(e, { data: a, inputType: "insertText" }),
                e.mathfield.snapshot("insert-fence"),
                !0
              );
            }
          }
          let t,
            o = e.offsetOf(i.lastSibling);
          for (t = e.position; t <= o; t++) {
            let n = e.at(t);
            if (
              n instanceof Vs &&
              ("?" === n.leftDelim || "." === n.leftDelim) &&
              _u(a, n.rightDelim)
            )
              break;
          }
          let l = e.at(t);
          if (t <= o && l instanceof Vs) {
            (l.leftDelim = a), e.mathfield.snapshot();
            let n = e.extractAtoms([e.position, t - 1]);
            return (
              (n = n.filter((e) => "first" !== e.type)),
              l.addChildren(n, l.parentBranch),
              (e.position += 1),
              Jl(e, { data: a, inputType: "insertText" }),
              e.mathfield.snapshot("insert-fence"),
              !0
            );
          }
          if (
            r instanceof Vs &&
            ("?" === r.leftDelim || "." === r.leftDelim) &&
            _u(a, r.rightDelim)
          ) {
            (r.isDirty = !0), (r.leftDelim = a), e.mathfield.snapshot();
            let t = e.extractAtoms([e.offsetOf(i.firstSibling), e.position]);
            for (let e of t) r.parent.addChildBefore(e, r);
            return (
              Jl(e, { data: a, inputType: "insertText" }),
              e.mathfield.snapshot("insert-fence"),
              !0
            );
          }
          if (!(r instanceof Vs && "|" === r.leftDelim)) {
            if (
              (e.mathfield.snapshot(),
              Wo.insert(e, `\\left${a}\\right?`, { format: "latex", style: n }),
              "first" !== i.lastSibling.type)
            ) {
              let t = e.offsetOf(i.lastSibling),
                n = e.extractAtoms([e.position, t]);
              (e.at(e.position).body = n), (e.position -= 1);
            }
            return e.mathfield.snapshot("insert-fence"), !0;
          }
        }
        if (o) {
          let t = i;
          for (; t; ) {
            if ("mopen" === t.type && t.value === o) {
              e.mathfield.snapshot();
              let n = t.leftSibling,
                s = e.extractAtoms([e.offsetOf(t.leftSibling), e.offsetOf(i)]);
              s.shift();
              let l = new Vs("left...right", s, {
                leftDelim: o,
                rightDelim: a,
              });
              return (
                r.addChildrenAfter([l], n),
                (e.position = e.offsetOf(l)),
                Jl(e, { data: a, inputType: "insertText" }),
                e.mathfield.snapshot("insert-fence"),
                !0
              );
            }
            t = t.leftSibling;
          }
          if (r instanceof Vs && i.isLastSibling && ku(r.leftDelim, a))
            return (
              e.mathfield.snapshot(),
              (r.isDirty = !0),
              (r.rightDelim = a),
              (e.position += 1),
              Jl(e, { data: a, inputType: "insertText" }),
              e.mathfield.snapshot("insert-fence"),
              !0
            );
          let s,
            l = e.offsetOf(i.firstSibling);
          for (s = e.position; s >= l; s--) {
            let t = e.at(s);
            if (
              t instanceof Vs &&
              ("?" === t.rightDelim || "." === t.rightDelim) &&
              ku(t.leftDelim, a)
            )
              break;
          }
          let c = e.at(s);
          if (s >= l && c instanceof Vs)
            return (
              e.mathfield.snapshot(),
              (c.rightDelim = a),
              c.addChildren(e.extractAtoms([s, e.position]), c.parentBranch),
              Jl(e, { data: a, inputType: "insertText" }),
              e.mathfield.snapshot("insert-fence"),
              !0
            );
          if (
            r instanceof Vs &&
            ("?" === r.rightDelim || "." === r.rightDelim) &&
            ku(r.leftDelim, a)
          )
            return (
              e.mathfield.snapshot(),
              (r.isDirty = !0),
              (r.rightDelim = a),
              r.parent.addChildren(
                e.extractAtoms([e.position, e.offsetOf(i.lastSibling)]),
                r.parentBranch
              ),
              (e.position = e.offsetOf(r)),
              Jl(e, { data: a, inputType: "insertText" }),
              e.mathfield.snapshot("insert-fence"),
              !0
            );
          let d = r.parent;
          return (
            !(
              !(d instanceof Vs) ||
              ("?" !== d.rightDelim && "." !== d.rightDelim) ||
              !e.at(e.position).isLastSibling
            ) && ((e.position = e.offsetOf(d)), wu(e, a, n))
          );
        }
        return !1;
      }
      function ku(e, t) {
        return (
          !e ||
          (["(", "{", "[", "\\lbrace", "\\lparen", "\\{", "\\lbrack"].includes(
            e
          )
            ? [
                ")",
                "}",
                "]",
                "\\rbrace",
                "\\rparen",
                "\\}",
                "\\rbrack",
              ].includes(t)
            : ps[e] === t)
        );
      }
      function _u(e, t) {
        return (
          !t ||
          ([")", "}", "]", "\\rbrace", "\\rparen", "\\}", "\\rbrack"].includes(
            t
          )
            ? [
                "(",
                "{",
                "[",
                "\\lbrace",
                "\\lparen",
                "\\{",
                "\\lbrack",
              ].includes(e)
            : ms[t] === e)
        );
      }
      xc(
        {
          moveToOpposite: (e) => {
            let t = e.at(e.position),
              { parent: n } = t;
            if (!n) return e.announce("plonk"), !1;
            let i,
              r = t.parentBranch;
            if (
              ("string" == typeof r &&
                (i = {
                  superscript: "subscript",
                  subscript: "superscript",
                  above: "below",
                  below: "above",
                }[r]),
              !i)
            ) {
              let n = t.subsupPlacement ? ou(e) : au(e);
              return e.mathfield.stopCoalescingUndo(), n;
            }
            n.branch(i) || n.createBranch(i);
            let a = e.setSelection(e.getBranchRange(e.offsetOf(n), i));
            return e.mathfield.stopCoalescingUndo(), a;
          },
          moveBeforeParent: (e) => {
            let { parent: t } = e.at(e.position);
            return t
              ? ((e.position = e.offsetOf(t)),
                e.mathfield.stopCoalescingUndo(),
                !0)
              : (e.announce("plonk"), !1);
          },
          moveAfterParent: (e) => ru(e),
          moveToNextChar: (e) => Qu(e, "forward"),
          moveToPreviousChar: (e) => Qu(e, "backward"),
          moveUp: (e) => Qu(e, "upward"),
          moveDown: (e) => Qu(e, "downward"),
          moveToNextWord: (e) => Yu(e, "forward"),
          moveToPreviousWord: (e) => Yu(e, "backward"),
          moveToGroupStart: (e) => {
            let t = e.offsetOf(e.at(e.position).firstSibling);
            return t === e.position
              ? (e.announce("plonk"), !1)
              : ((e.position = t), e.mathfield.stopCoalescingUndo(), !0);
          },
          moveToGroupEnd: (e) => {
            let t = e.offsetOf(e.at(e.position).lastSibling);
            return t === e.position
              ? (e.announce("plonk"), !1)
              : ((e.position = t), e.mathfield.stopCoalescingUndo(), !0);
          },
          moveToNextGroup: (e) => {
            var t, n, i, r;
            if (e.position === e.lastOffset && e.anchor === e.lastOffset)
              return du(e, "forward");
            let a = e.at(e.position);
            if ("text" === a.mode) {
              if (e.selectionIsCollapsed) {
                let n = a;
                for (; n && "text" === n.mode; ) n = n.leftSibling;
                let i = a;
                for (
                  ;
                  "text" === (null == (t = i.rightSibling) ? void 0 : t.mode);

                )
                  i = i.rightSibling;
                if (n && i) return lu(e, [n, i]);
              }
              if ("text" === a.rightSibling.mode) {
                let t = a;
                for (; t && "text" === t.mode; ) t = t.rightSibling;
                return t
                  ? (cu(e, null != (n = t.leftSibling) ? n : t),
                    e.mathfield.switchMode("math"),
                    !0)
                  : cu(e, e.lastOffset);
              }
            }
            let o = uu(e, e.position + 1, "forward");
            if (o) return cu(e, o);
            let s = hu(
              e,
              a,
              (e) => "leftright" === e.type || "text" === e.type,
              "forward"
            );
            if (s) {
              if ("text" === s.mode) {
                let t = s;
                for (; t && "text" === t.mode; ) t = t.rightSibling;
                return lu(e, [
                  null != (i = s.leftSibling) ? i : s,
                  null != (r = t.leftSibling) ? r : t,
                ]);
              }
              return lu(e, s);
            }
            let l = a.parent;
            if (l) {
              if ("leftright" === l.type || "surd" === l.type) return lu(e, l);
              if ("superscript" === a.parentBranch && l.subscript)
                return lu(e, l.subscript);
              if ("above" === a.parentBranch && l.below) return lu(e, l.below);
              if (
                "superscript" === a.parentBranch ||
                "subscript" === a.parentBranch
              )
                return cu(e, l);
              if ("above" === a.parentBranch || "below" === a.parentBranch)
                return lu(e, l);
            }
            return cu(e, e.lastOffset);
          },
          moveToPreviousGroup: (e) => {
            var t;
            if (0 === e.position && 0 === e.anchor) return du(e, "backward");
            let n = e.at(e.position),
              i = n.mode;
            if ("text" === i) {
              if (e.selectionIsCollapsed) {
                let i = n;
                for (; i && "text" === i.mode; ) i = i.leftSibling;
                let r = n;
                for (
                  ;
                  "text" === (null == (t = r.rightSibling) ? void 0 : t.mode);

                )
                  r = r.rightSibling;
                if (i && r) return lu(e, [i, r]);
              }
              for (; n && "text" === n.mode; ) n = n.leftSibling;
              return cu(e, n || 0);
            }
            let r = uu(e, e.position - 1, "backward");
            if (r) return cu(e, r);
            if ("math" === i) {
              let t = hu(
                e,
                n,
                (e) => "leftright" === e.type || "text" === e.type,
                "backward"
              );
              if (t) {
                if ("text" === t.mode) {
                  let n = t;
                  for (; n && "text" === n.mode; ) n = n.leftSibling;
                  return lu(e, [t, n]);
                }
                return lu(e, t);
              }
              let i = n.parent;
              if (i) {
                if ("leftright" === i.type || "surd" === i.type)
                  return lu(e, i);
                if ("subscript" === n.parentBranch && i.superscript)
                  return lu(e, i.superscript);
                if ("below" === n.parentBranch && i.above)
                  return lu(e, i.above);
                if (
                  "superscript" === n.parentBranch ||
                  "subscript" === n.parentBranch
                )
                  return cu(e, i);
                if ("above" === n.parentBranch || "below" === n.parentBranch)
                  return lu(e, i);
              }
              return cu(e, 0);
            }
            return !1;
          },
          moveToMathfieldStart: (e) =>
            0 === e.position
              ? (e.announce("plonk"), !1)
              : ((e.position = 0), e.mathfield.stopCoalescingUndo(), !0),
          moveToMathfieldEnd: (e) =>
            e.position === e.lastOffset
              ? (e.announce("plonk"), !1)
              : ((e.position = e.lastOffset),
                e.mathfield.stopCoalescingUndo(),
                !0),
          moveToSuperscript: (e) => au(e),
          moveToSubscript: (e) => ou(e),
        },
        { target: "model", changeSelection: !0 }
      ),
        xc(
          {
            moveToNextPlaceholder: (e) => du(e, "forward"),
            moveToPreviousPlaceholder: (e) => du(e, "backward"),
          },
          { target: "model", changeSelection: !0, audioFeedback: "return" }
        );
      var Su = {
        acute: 714,
        grave: 715,
        dot: 729,
        ddot: 168,
        mathring: 730,
        tilde: 126,
        bar: 713,
        breve: 728,
        check: 711,
        hat: 94,
        vec: 8407,
      };
      Y(Object.keys(Su), "{body:auto}", {
        createAtom: (e) =>
          new hs(
            u(d({}, e), {
              body: T(e.args[0]),
              accentChar: Su[e.command.slice(1)],
            })
          ),
      }),
        Y(["widehat", "widecheck", "widetilde"], "{body:auto}", {
          createAtom: (e) => {
            let t = X(T(e.args[0]));
            return new hs(
              u(d({}, e), {
                body: T(e.args[0]),
                svgAccent:
                  e.command.slice(1) +
                  (t.length > 5
                    ? "4"
                    : ["1", "1", "2", "2", "3", "3"][t.length]),
              })
            );
          },
        }),
        Y(["overarc", "overparen", "wideparen"], "{body:auto}", {
          createAtom: (e) =>
            new hs(u(d({}, e), { body: T(e.args[0]), svgAccent: "overarc" })),
        }),
        Y(["underarc", "underparen"], "{body:auto}", {
          createAtom: (e) =>
            new dl(u(d({}, e), { body: T(e.args[0]), svgBelow: "underarc" })),
        }),
        Y("utilde", "{body:auto}", {
          createAtom: (e) => {
            let t = T(e.args[0]),
              n = X(t),
              i =
                "widetilde" +
                (n.length > 5 ? "4" : ["1", "1", "2", "2", "3", "3"][n.length]);
            return new dl(
              u(d({}, e), { body: t, svgBelow: i, boxType: ro(t) })
            );
          },
        }),
        Y("^", "{:string}", {
          createAtom: (e) => {
            var t;
            return new Eo(
              u(d({}, e), {
                type: "mord",
                isFunction: !1,
                limits: "adjacent",
                value:
                  e.args[0] &&
                  null !=
                    (t = {
                      a: "\xe2",
                      e: "\xea",
                      i: "\xee",
                      o: "\xf4",
                      u: "\xfb",
                      A: "\xc2",
                      E: "\xca",
                      I: "\xce",
                      O: "\xd4",
                      U: "\xdb",
                    }[e.args[0]])
                    ? t
                    : "^",
              })
            );
          },
        }),
        Y("`", "{:string}", {
          createAtom: (e) => {
            var t;
            return new Eo(
              u(d({}, e), {
                type: "mord",
                isFunction: !1,
                limits: "adjacent",
                value:
                  e.args[0] &&
                  null !=
                    (t = {
                      a: "\xe0",
                      e: "\xe8",
                      i: "\xec",
                      o: "\xf2",
                      u: "\xf9",
                      A: "\xc0",
                      E: "\xc8",
                      I: "\xcc",
                      O: "\xd2",
                      U: "\xd9",
                    }[e.args[0]])
                    ? t
                    : "`",
              })
            );
          },
        }),
        Y("'", "{:string}", {
          createAtom: (e) => {
            var t;
            return new Eo(
              u(d({}, e), {
                type: "mord",
                isFunction: !1,
                limits: "adjacent",
                value:
                  e.args[0] &&
                  null !=
                    (t = {
                      a: "\xe1",
                      e: "\xe9",
                      i: "\xed",
                      o: "\xf3",
                      u: "\xfa",
                      A: "\xc1",
                      E: "\xc9",
                      I: "\xcd",
                      O: "\xd3",
                      U: "\xda",
                    }[e.args[0]])
                    ? t
                    : "^",
              })
            );
          },
        }),
        Y("~", "{:string}", {
          createAtom: (e) => {
            var t;
            return new Eo(
              u(d({ type: "mord" }, e), {
                isFunction: !1,
                limits: "adjacent",
                value:
                  e.args[0] &&
                  null !=
                    (t = {
                      n: "\xf1",
                      N: "\xd1",
                      a: "\xe3",
                      o: "\xf5",
                      A: "\xc3",
                      O: "\xd5",
                    }[e.args[0]])
                    ? t
                    : "\xb4",
              })
            );
          },
        }),
        Y("c", "{:string}", {
          createAtom: (e) => {
            var t;
            return new Eo(
              u(d({}, e), {
                type: "mord",
                isFunction: !1,
                limits: "adjacent",
                value:
                  e.args[0] && null != (t = { c: "\xe7", C: "\xc7" }[e.args[0]])
                    ? t
                    : "",
              })
            );
          },
        }),
        Y("enclose", "{notation:string}[style:string]{body:auto}", {
          createAtom: (e) => {
            var t, n;
            let i = e.args,
              r = {
                strokeColor: "currentColor",
                strokeWidth: "",
                strokeStyle: "solid",
                backgroundcolor: "transparent",
                padding: "auto",
                shadow: "auto",
                svgStrokeStyle: void 0,
                borderStyle: void 0,
                style: null != (t = e.style) ? t : {},
              };
            if (i[1]) {
              let e = i[1].split(/,(?![^(]*\)(?:(?:[^(]*\)){2})*[^"]*$)/);
              for (let t of e) {
                let e = t.match(/\s*(\S+)\s+(\S+)\s+(.*)/);
                if (e)
                  (r.strokeWidth = e[1]),
                    (r.strokeStyle = e[2]),
                    (r.strokeColor = e[3]);
                else {
                  let e = t.match(/\s*([a-z]*)\s*=\s*"(.*)"/);
                  e &&
                    ("mathbackground" === e[1]
                      ? (r.backgroundcolor = e[2])
                      : "mathcolor" === e[1]
                      ? (r.strokeColor = e[2])
                      : "padding" === e[1]
                      ? (r.padding = e[2])
                      : "shadow" === e[1] && (r.shadow = e[2]));
                }
              }
              "dashed" === r.strokeStyle
                ? (r.svgStrokeStyle = "5,5")
                : "dotted" === r.strokeStyle && (r.svgStrokeStyle = "1,5");
            }
            r.borderStyle = `${r.strokeWidth} ${r.strokeStyle} ${r.strokeColor}`;
            let a = {};
            return (
              (null != (n = i[0]) ? n : "")
                .split(/[, ]/)
                .filter((e) => e.length > 0)
                .forEach((e) => {
                  a[e.toLowerCase()] = !0;
                }),
              new rl(e.command, T(i[2]), a, r)
            );
          },
        }),
        Y("cancel", "{body:auto}", {
          createAtom: (e) => {
            var t;
            return new rl(
              e.command,
              T(e.args[0]),
              { updiagonalstrike: !0 },
              {
                strokeColor: "currentColor",
                strokeWidth: "",
                strokeStyle: "solid",
                borderStyle: "1px solid currentColor",
                backgroundcolor: "transparent",
                padding: "auto",
                shadow: "auto",
                style: null != (t = e.style) ? t : {},
              }
            );
          },
        }),
        Y("bcancel", "{body:auto}", {
          createAtom: (e) => {
            var t;
            return new rl(
              e.command,
              T(e.args[0]),
              { downdiagonalstrike: !0 },
              {
                strokeColor: "currentColor",
                strokeWidth: "",
                strokeStyle: "solid",
                borderStyle: "1px solid currentColor",
                backgroundcolor: "transparent",
                padding: "auto",
                shadow: "auto",
                style: null != (t = e.style) ? t : {},
              }
            );
          },
        }),
        Y("xcancel", "{body:auto}", {
          createAtom: (e) => {
            var t;
            return new rl(
              e.command,
              T(e.args[0]),
              { updiagonalstrike: !0, downdiagonalstrike: !0 },
              {
                strokeColor: "currentColor",
                strokeWidth: "",
                strokeStyle: "solid",
                borderStyle: "1px solid currentColor",
                backgroundcolor: "transparent",
                padding: "auto",
                shadow: "auto",
                style: null != (t = e.style) ? t : {},
              }
            );
          },
        }),
        Y(
          [
            "overrightarrow",
            "overleftarrow",
            "Overrightarrow",
            "overleftharpoon",
            "overrightharpoon",
            "overleftrightarrow",
            "overlinesegment",
            "overgroup",
          ],
          "{:auto}",
          {
            createAtom: (e) => {
              var t;
              return new dl(
                u(d({}, e), {
                  body: T(null == (t = e.args) ? void 0 : t[0]),
                  skipBoundary: !1,
                  supsubPlacement: "over-under",
                  paddedBody: !0,
                  boxType: "rel",
                  svgAbove: e.command.slice(1),
                })
              );
            },
          }
        ),
        Y("overbrace", "{:auto}", {
          createAtom: (e) =>
            new dl(
              u(d({}, e), {
                body: T(e.args[0]),
                skipBoundary: !1,
                supsubPlacement: "over-under",
                paddedBody: !0,
                boxType: "ord",
                svgAbove: e.command.slice(1),
              })
            ),
        }),
        Y(
          [
            "underrightarrow",
            "underleftarrow",
            "underleftrightarrow",
            "underlinesegment",
            "undergroup",
          ],
          "{:auto}",
          {
            createAtom: (e) =>
              new dl(
                u(d({}, e), {
                  body: T(e.args[0]),
                  skipBoundary: !1,
                  supsubPlacement: "over-under",
                  paddedBody: !0,
                  boxType: "rel",
                  svgBelow: e.command.slice(1),
                })
              ),
          }
        ),
        Y(["underbrace"], "{:auto}", {
          createAtom: (e) =>
            new dl(
              u(d({}, e), {
                body: T(e.args[0]),
                skipBoundary: !1,
                supsubPlacement: "over-under",
                paddedBody: !0,
                boxType: "ord",
                svgBelow: e.command.slice(1),
              })
            ),
        }),
        Y(
          [
            "xrightarrow",
            "longrightarrow",
            "xleftarrow",
            "longleftarrow",
            "xRightarrow",
            "xLeftarrow",
            "xleftharpoonup",
            "xleftharpoondown",
            "xrightharpoonup",
            "xrightharpoondown",
            "xlongequal",
            "xtwoheadleftarrow",
            "xtwoheadrightarrow",
            "xleftrightarrow",
            "longleftrightarrow",
            "xLeftrightarrow",
            "xrightleftharpoons",
            "longrightleftharpoons",
            "xleftrightharpoons",
            "xhookleftarrow",
            "xhookrightarrow",
            "xmapsto",
            "xtofrom",
            "xleftrightarrows",
            "longleftrightarrows",
            "xRightleftharpoons",
            "longRightleftharpoons",
            "xLeftrightharpoons",
            "longLeftrightharpoons",
          ],
          "[:auto]{:auto}",
          {
            createAtom: (e) => {
              var t, n, i, r, a;
              return new dl(
                u(d({}, e), {
                  svgBody: e.command.slice(1),
                  above:
                    0 ===
                    (null == (n = T(null == (t = e.args) ? void 0 : t[1]))
                      ? void 0
                      : n.length)
                      ? void 0
                      : T(null == (i = e.args) ? void 0 : i[1]),
                  below:
                    null != (a = T(null == (r = e.args) ? void 0 : r[0]))
                      ? a
                      : null,
                  skipBoundary: !1,
                  supsubPlacement: "over-under",
                  paddedBody: !0,
                  paddedLabels: !0,
                  boxType: "rel",
                })
              );
            },
            serialize: (e, t) =>
              e.command +
              (e.hasEmptyBranch("below") ? "" : `[${e.belowToLatex(t)}]`) +
              `{${e.aboveToLatex(t)}}${e.supsubToLatex(t)}`,
          }
        ),
        Y(
          [
            "arccos",
            "arcsin",
            "arctan",
            "arctg",
            "arcctg",
            "arg",
            "ch",
            "cos",
            "cosh",
            "cot",
            "cotg",
            "coth",
            "ctg",
            "cth",
            "csc",
            "cosec",
            "dim",
            "exp",
            "hom",
            "inf",
            "ker",
            "lb",
            "lg",
            "ln",
            "log",
            "Pr",
            "sec",
            "sh",
            "sin",
            "sinh",
            "sup",
            "tan",
            "tanh",
            "tg",
            "th",
            "arcsec",
            "arccsc",
            "arsinh",
            "arcosh",
            "artanh",
            "arcsech",
            "arccsch",
          ],
          "",
          {
            isFunction: !0,
            ifMode: "math",
            createAtom: (e) =>
              new ll(
                e.command.slice(1),
                u(d({}, e), {
                  limits: "adjacent",
                  isFunction: !0,
                  variant: "main",
                  variantStyle: "up",
                })
              ),
          }
        ),
        Y(["liminf", "limsup"], "", {
          ifMode: "math",
          createAtom: (e) =>
            new ll(
              { "\\liminf": "lim inf", "\\limsup": "lim sup" }[e.command],
              u(d({}, e), { limits: "over-under", variant: "main" })
            ),
        }),
        Y(["lim", "mod"], "", {
          ifMode: "math",
          createAtom: (e) =>
            new ll(
              e.command.slice(1),
              u(d({}, e), { limits: "over-under", variant: "main" })
            ),
        }),
        Y(["det", "max", "min"], "", {
          ifMode: "math",
          isFunction: !0,
          createAtom: (e) =>
            new ll(
              e.command.slice(1),
              u(d({}, e), {
                limits: "over-under",
                isFunction: !0,
                variant: "main",
              })
            ),
        }),
        Y(["ang"], "{:math}", {
          ifMode: "math",
          createAtom: (e) => new Eo(u(d({}, e), { body: T(e.args[0]) })),
          serialize: (e, t) => `\\ang{${e.bodyToLatex(t)}}`,
          render: (e, t) => {
            let n = e.createBox(t),
              i = n.caret;
            n.caret = void 0;
            let r = new oo("\xb0", {
              style: u(d({}, e.style), {
                variant: "normal",
                variantStyle: "up",
              }),
            });
            return new oo([n, r], {
              type: "inner",
              isSelected: e.isSelected,
              caret: i,
            });
          },
        }),
        Y("sqrt", "[index:auto]{radicand:expression}", {
          ifMode: "math",
          createAtom: (e) =>
            new pl(
              u(d({}, e), {
                body: T(e.args[1]),
                index: e.args[0] ? T(e.args[0]) : void 0,
              })
            ),
        }),
        Y(
          ["frac", "dfrac", "tfrac", "cfrac", "binom", "dbinom", "tbinom"],
          "{:expression}{:expression}",
          {
            ifMode: "math",
            createAtom: (e) => {
              let t = d({}, e),
                n = e.command,
                i = e.args;
              switch (n) {
                case "\\dfrac":
                case "\\frac":
                case "\\tfrac":
                  t.hasBarLine = !0;
                  break;
                case "\\atopfrac":
                  t.hasBarLine = !1;
                  break;
                case "\\dbinom":
                case "\\binom":
                case "\\tbinom":
                  (t.hasBarLine = !1),
                    (t.leftDelim = "("),
                    (t.rightDelim = ")");
                  break;
                case "\\cfrac":
                  (t.hasBarLine = !0), (t.continuousFraction = !0);
              }
              switch (n) {
                case "\\dfrac":
                case "\\dbinom":
                  t.mathstyleName = "displaystyle";
                  break;
                case "\\tfrac":
                case "\\tbinom":
                  t.mathstyleName = "textstyle";
              }
              return new al(
                i[0] ? T(i[0]) : [new As()],
                i[1] ? T(i[1]) : [new As()],
                t
              );
            },
            serialize: (e, t) => {
              let n = e.aboveToLatex(t),
                i = e.belowToLatex(t);
              return /^[0-9]$/.test(n) && /^[0-9]$/.test(i)
                ? `${e.command}${n}${i}`
                : Xa(e.command, n, i);
            },
          }
        ),
        Y(["brace", "brack"], "", {
          infix: !0,
          createAtom: (e) =>
            new al(
              T(e.args[0]),
              T(e.args[1]),
              u(d({}, e), {
                hasBarLine: !1,
                leftDelim: "\\brace" === e.command ? "\\lbrace" : "\\lbrack",
                rightDelim: "\\brace" === e.command ? "\\rbrace" : "\\rbrack",
              })
            ),
          serialize: (e, t) =>
            Ja([e.aboveToLatex(t), e.command, e.belowToLatex(t)]),
        }),
        Y(["over", "atop", "choose"], "", {
          infix: !0,
          createAtom: (e) => {
            let t,
              n,
              i = e.args;
            return (
              "\\choose" === e.command && ((t = "("), (n = ")")),
              new al(
                T(i[0]),
                T(i[1]),
                u(d({}, e), {
                  hasBarLine: "\\over" === e.command,
                  leftDelim: t,
                  rightDelim: n,
                })
              )
            );
          },
          serialize: (e, t) =>
            Ja([e.aboveToLatex(t), e.command, e.belowToLatex(t)]),
        }),
        Y(
          ["overwithdelims", "atopwithdelims"],
          "{numer:auto}{denom:auto}{left-delim:delim}{right-delim:delim}",
          {
            infix: !0,
            createAtom: (e) => {
              var t, n;
              let i = e.args;
              return new al(
                T(i[0]),
                T(i[1]),
                u(d({}, e), {
                  leftDelim: null != (t = i[2]) ? t : ".",
                  rightDelim: null != (n = i[3]) ? n : ".",
                  hasBarLine: !1,
                })
              );
            },
            serialize: (e, t) =>
              `${e.aboveToLatex(t)} ${e.command}${e.leftDelim}${
                e.rightDelim
              }${e.belowToLatex(t)}`,
          }
        ),
        Y("pdiff", "{numerator}{denominator}", {
          ifMode: "math",
          createAtom: (e) =>
            new al(
              T(e.args[0]),
              T(e.args[1]),
              u(d({}, e), {
                hasBarLine: !0,
                numerPrefix: "\u2202",
                denomPrefix: "\u2202",
              })
            ),
        }),
        Y(
          [
            "sum",
            "prod",
            "bigcup",
            "bigcap",
            "coprod",
            "bigvee",
            "bigwedge",
            "biguplus",
            "bigotimes",
            "bigoplus",
            "bigodot",
            "bigsqcup",
            "intop",
          ],
          "",
          {
            ifMode: "math",
            createAtom: (e) =>
              new ll(
                {
                  coprod: "\u2210",
                  bigvee: "\u22c1",
                  bigwedge: "\u22c0",
                  biguplus: "\u2a04",
                  bigcap: "\u22c2",
                  bigcup: "\u22c3",
                  intop: "\u222b",
                  prod: "\u220f",
                  sum: "\u2211",
                  bigotimes: "\u2a02",
                  bigoplus: "\u2a01",
                  bigodot: "\u2a00",
                  bigsqcup: "\u2a06",
                  smallint: "\u222b",
                }[e.command.slice(1)],
                u(d({}, e), {
                  isExtensibleSymbol: !0,
                  limits: "auto",
                  variant: "main",
                })
              ),
          }
        ),
        Y("smallint", "", {
          ifMode: "math",
          createAtom: (e) =>
            new ll(
              "\u222b",
              u(d({}, e), {
                limits: "adjacent",
                isExtensibleSymbol: !1,
                variant: "main",
              })
            ),
        });
      var Mu = {
        int: "\u222b",
        iint: "\u222c",
        iiint: "\u222d",
        oint: "\u222e",
        oiint: "\u222f",
        oiiint: "\u2230",
        intclockwise: "\u2231",
        varointclockwise: "\u2232",
        ointctrclockwise: "\u2233",
        intctrclockwise: "\u2a11",
        sqcup: "\u2294",
        sqcap: "\u2293",
        uplus: "\u228e",
        wr: "\u2240",
        amalg: "\u2a3f",
        Cap: "\u22d2",
        Cup: "\u22d3",
        doublecap: "\u22d2",
        doublecup: "\u22d3",
      };
      Y(Object.keys(Mu), "", {
        ifMode: "math",
        createAtom: (e) => {
          let t = e.command,
            n = Mu[t.slice(1)];
          return new ll(
            n,
            u(d({}, e), {
              limits: "adjacent",
              isExtensibleSymbol: !0,
              variant: { "\u22d2": "ams", "\u22d3": "ams" }[n],
            })
          );
        },
      }),
        Y(["Re", "Im"], "", {
          ifMode: "math",
          createAtom: (e) =>
            new ll(
              { "\\Re": "\u211c", "\\Im": "\u2111" }[e.command],
              u(d({}, e), {
                limits: "adjacent",
                isFunction: !0,
                variant: "fraktur",
              })
            ),
        }),
        Y("middle", "{:delim}", {
          ifMode: "math",
          createAtom: (e) => {
            var t;
            return new nl(
              u(d({}, e), { delim: null != (t = e.args[0]) ? t : "|", size: 1 })
            );
          },
        }),
        Y("the", "{:value}", {
          createAtom: (e) =>
            new Eo(u(d({}, e), { captureSelection: !0, verbatimLatex: null })),
          render: (e, t) => {
            var n;
            let i = new Lo({ parent: t }, e.style),
              r = "";
            e.isSelected && (r += " ML__selected");
            let a = i.evaluate(e.args[0]);
            return new oo(
              (null != (n = wo(a)) ? n : "")
                .split("")
                .map(
                  (t) =>
                    new oo(t, {
                      type: "ord",
                      classes: r,
                      mode: e.mode,
                      isSelected: e.isSelected,
                      style: d({ variant: "main" }, e.style),
                    })
                ),
              {
                type: "lift",
                style: e.style,
                caret: e.caret,
                isSelected: e.isSelected,
                classes: r,
              }
            ).wrap(i);
          },
          serialize: (e) => {
            var t;
            return `\\the${null != (t = wo(e.args[0])) ? t : "\\relax"}`;
          },
        }),
        Y("mathtip", "{:auto}{:math}", {
          createAtom: (e) =>
            new xl(
              u(d({}, e), {
                body: T(e.args[0]),
                tooltip: T(e.args[1]),
                content: "math",
              })
            ),
          serialize: (e, t) =>
            t.skipStyles
              ? e.bodyToLatex(t)
              : `\\texttip{${e.bodyToLatex(t)}}{${Eo.serialize(
                  [e.tooltip],
                  u(d({}, t), { defaultMode: "math" })
                )}}`,
        }),
        Y("texttip", "{:auto}{:text}", {
          createAtom: (e) =>
            new xl(
              u(d({}, e), {
                body: T(e.args[0]),
                tooltip: T(e.args[1]),
                content: "text",
              })
            ),
          serialize: (e, t) =>
            t.skipStyles
              ? e.bodyToLatex(t)
              : `\\texttip{${e.bodyToLatex(t)}}{${Eo.serialize(
                  [e.tooltip],
                  u(d({}, t), { defaultMode: "text" })
                )}}`,
        }),
        Y("error", "{:math}", {
          createAtom: (e) => new Eo(u(d({}, e), { body: T(e.args[0]) })),
          serialize: (e, t) => `\\error{${e.bodyToLatex(t)}}`,
          render: (e, t) => e.createBox(t, { classes: "ML__error" }),
        }),
        Y("ensuremath", "{:math}", {
          createAtom: (e) => new Eo(u(d({}, e), { body: T(e.args[0]) })),
          serialize: (e, t) =>
            `${e.command}{${e.bodyToLatex(
              u(d({}, t), { defaultMode: "math" })
            )}}`,
        }),
        Y("color", "{:value}", {
          applyStyle: (e, t, n) => {
            var i, r;
            return {
              verbatimColor: null != (i = wo(t[0])) ? i : void 0,
              color: n.toColor(null != (r = t[0]) ? r : { string: "red" }),
            };
          },
        }),
        Y("textcolor", "{:value}{content:auto*}", {
          applyStyle: (e, t, n) => {
            var i, r;
            return {
              verbatimColor: null != (i = wo(t[0])) ? i : void 0,
              color: n.toColor(null != (r = t[0]) ? r : { string: "red" }),
            };
          },
        }),
        Y("boxed", "{content:math}", {
          createAtom: (e) =>
            new Ns(
              u(d({}, e), {
                body: T(e.args[0]),
                framecolor: { string: "black" },
              })
            ),
        }),
        Y("colorbox", "{:value}{:text*}", {
          applyStyle: (e, t, n) => {
            var i, r;
            return {
              verbatimBackgroundColor: null != (i = wo(t[0])) ? i : void 0,
              backgroundColor: n.toBackgroundColor(
                null != (r = t[0]) ? r : { string: "yellow" }
              ),
            };
          },
        }),
        Y(
          "fcolorbox",
          "{frame-color:value}{background-color:value}{content:text}",
          {
            applyMode: "text",
            createAtom: (e) => {
              var t, n;
              return new Ns(
                u(d({}, e), {
                  body: T(e.args[2]),
                  framecolor: null != (t = e.args[0]) ? t : { string: "blue" },
                  backgroundcolor:
                    null != (n = e.args[1]) ? n : { string: "yellow" },
                })
              );
            },
            serialize: (e, t) => {
              var n, i;
              return t.skipStyles
                ? e.bodyToLatex(u(d({}, t), { defaultMode: "text" }))
                : Xa(
                    e.command,
                    null != (n = wo(e.framecolor)) ? n : "",
                    null != (i = wo(e.backgroundcolor)) ? i : "",
                    e.bodyToLatex(u(d({}, t), { defaultMode: "text" }))
                  );
            },
          }
        ),
        Y("bbox", "[:bbox]{body:auto}", {
          createAtom: (e) => {
            var t;
            let n = e.args[0],
              i = T(e.args[1]);
            return new Ns(
              u(
                d({}, e),
                n
                  ? {
                      body: i,
                      padding: n.padding,
                      border: n.border,
                      backgroundcolor:
                        null != (t = n.backgroundcolor) ? t : void 0,
                    }
                  : { body: i }
              )
            );
          },
          serialize: (e, t) => {
            var n, i;
            if (t.skipStyles) return e.bodyToLatex(t);
            let r = e.command;
            if (
              Number.isFinite(e.padding) ||
              void 0 !== e.border ||
              void 0 !== e.backgroundcolor
            ) {
              let t = [];
              e.padding && t.push(null != (n = wo(e.padding)) ? n : ""),
                e.border && t.push(`border: ${e.border}`),
                e.backgroundcolor &&
                  t.push(null != (i = wo(e.backgroundcolor)) ? i : ""),
                (r += `[${t.join(",")}]`);
            }
            return Xa(r, e.bodyToLatex(t));
          },
        }),
        Y(
          ["displaystyle", "textstyle", "scriptstyle", "scriptscriptstyle"],
          "{:rest}",
          {
            createAtom: (e) => new Eo(u(d({}, e), { body: T(e.args[0]) })),
            render: (e, t) => {
              let n = new Lo(
                  { parent: t, mathstyle: e.command.slice(1) },
                  e.style
                ),
                i = Eo.createBox(n, e.body, { type: "lift" });
              return e.caret && (i.caret = e.caret), e.bind(t, i);
            },
            serialize: (e, t) =>
              t.skipStyles
                ? e.bodyToLatex(t)
                : `{${Ja([e.command, e.bodyToLatex(t)])}}`,
          }
        ),
        Y(
          [
            "tiny",
            "scriptsize",
            "footnotesize",
            "small",
            "normalsize",
            "large",
            "Large",
            "LARGE",
            "huge",
            "Huge",
          ],
          "",
          {
            applyStyle: (e) => ({
              fontSize: {
                "\\tiny": 1,
                "\\scriptsize": 2,
                "\\footnotesize": 3,
                "\\small": 4,
                "\\normalsize": 5,
                "\\large": 6,
                "\\Large": 7,
                "\\LARGE": 8,
                "\\huge": 9,
                "\\Huge": 10,
              }[e],
            }),
          }
        ),
        Y("fontseries", "{:string}", {
          ifMode: "text",
          applyStyle: (e, t) => {
            var n;
            return { fontSeries: null != (n = t[0]) ? n : "auto" };
          },
        }),
        Y("fontshape", "{:string}", {
          ifMode: "text",
          applyStyle: (e, t) => {
            var n;
            return { fontShape: null != (n = t[0]) ? n : "auto" };
          },
        }),
        Y("fontfamily", "{:string}", {
          ifMode: "text",
          applyStyle: (e, t) => {
            var n;
            return { fontFamily: null != (n = t[0]) ? n : "roman" };
          },
        }),
        Y("selectfont", "", { ifMode: "text", applyStyle: () => ({}) }),
        Y("bf", "{:rest}", {
          applyStyle: () => ({
            fontSeries: "b",
            fontShape: "n",
            fontFamily: "roman",
          }),
        }),
        Y(["boldsymbol", "bm"], "{:math}", {
          applyMode: "math",
          createAtom: (e) => new Eo(u(d({}, e), { body: T(e.args[0]) })),
          serialize: (e, t) => `${e.command}{${e.bodyToLatex(t)}}`,
          render: (e, t) => e.createBox(t, { classes: "ML__boldsymbol" }),
        }),
        Y("bold", "{:math*}", {
          applyMode: "math",
          applyStyle: () => ({ variantStyle: "bold" }),
        }),
        Y("bfseries", "{:rest}", {
          applyMode: "text",
          applyStyle: () => ({ fontSeries: "b" }),
        }),
        Y("mdseries", "{:rest}", {
          applyMode: "text",
          applyStyle: () => ({ fontSeries: "m" }),
        }),
        Y("upshape", "{:rest}", {
          applyMode: "text",
          applyStyle: () => ({ fontShape: "n" }),
        }),
        Y("slshape", "{:rest}", {
          applyMode: "text",
          applyStyle: () => ({ fontShape: "sl" }),
        }),
        Y("scshape", "{:rest}", {
          applyMode: "text",
          applyStyle: () => ({ fontShape: "sc" }),
        }),
        Y("textbf", "{:text*}", {
          applyMode: "text",
          applyStyle: () => ({ fontSeries: "b" }),
        }),
        Y("textmd", "{:text*}", {
          applyMode: "text",
          applyStyle: () => ({ fontSeries: "m" }),
        }),
        Y("textup", "{:text*}", {
          applyMode: "text",
          applyStyle: () => ({ fontShape: "n" }),
        }),
        Y("textnormal", "{:text*}", {
          applyMode: "text",
          applyStyle: () => ({ fontShape: "n", fontSeries: "m" }),
        }),
        Y("textsl", "{:text*}", {
          applyMode: "text",
          applyStyle: () => ({ fontShape: "sl" }),
        }),
        Y("textit", "{:text*}", {
          applyMode: "text",
          applyStyle: () => ({ fontShape: "it" }),
        }),
        Y("textsc", "{:text*}", {
          applyMode: "text",
          applyStyle: () => ({ fontShape: "sc" }),
        }),
        Y("textrm", "{:text*}", {
          applyMode: "text",
          applyStyle: () => ({ fontFamily: "roman" }),
        }),
        Y("textsf", "{:text*}", {
          applyMode: "text",
          applyStyle: () => ({ fontFamily: "sans-serif" }),
        }),
        Y("texttt", "{:text*}", {
          applyMode: "text",
          applyStyle: () => ({ fontFamily: "monospace" }),
        }),
        Y("mathbf", "{:math*}", {
          applyMode: "math",
          applyStyle: () => ({ variant: "normal", variantStyle: "bold" }),
        }),
        Y("mathit", "{:math*}", {
          applyMode: "math",
          applyStyle: () => ({ variant: "main", variantStyle: "italic" }),
        }),
        Y("mathnormal", "{:math*}", {
          applyMode: "math",
          applyStyle: () => ({ variant: "normal", variantStyle: "italic" }),
        }),
        Y("mathbfit", "{:math*}", {
          applyMode: "math",
          applyStyle: () => ({ variant: "main", variantStyle: "bolditalic" }),
        }),
        Y("mathrm", "{:math*}", {
          applyMode: "math",
          applyStyle: () => ({ variant: "normal", variantStyle: "up" }),
        }),
        Y("mathsf", "{:math*}", {
          applyMode: "math",
          applyStyle: () => ({ variant: "sans-serif", variantStyle: "up" }),
        }),
        Y("mathtt", "{:math*}", {
          applyMode: "math",
          applyStyle: () => ({ variant: "monospace", variantStyle: "up" }),
        }),
        Y("it", "{:rest}", {
          applyStyle: () => ({
            fontSeries: "m",
            fontShape: "it",
            fontFamily: "roman",
            variantStyle: "italic",
          }),
        }),
        Y("rmfamily", "", { applyStyle: () => ({ fontFamily: "roman" }) }),
        Y("sffamily", "", { applyStyle: () => ({ fontFamily: "sans-serif" }) }),
        Y("ttfamily", "", { applyStyle: () => ({ fontFamily: "monospace" }) }),
        Y(["Bbb", "mathbb"], "{:math*}", {
          applyStyle: () => ({ variant: "double-struck", variantStyle: "up" }),
        }),
        Y(["frak", "mathfrak"], "{:math*}", {
          applyStyle: () => ({ variant: "fraktur", variantStyle: "up" }),
        }),
        Y("mathcal", "{:math*}", {
          applyStyle: () => ({ variant: "calligraphic", variantStyle: "up" }),
        }),
        Y("mathscr", "{:math*}", {
          applyStyle: () => ({ variant: "script", variantStyle: "up" }),
        }),
        Y("mbox", "{:text}", {
          ifMode: "math",
          createAtom: (e) =>
            new Eo(
              u(d({}, e), { type: "mord", body: T(e.args[0]), mode: "math" })
            ),
          serialize: (e, t) =>
            Xa("\\mbox", e.bodyToLatex(u(d({}, t), { defaultMode: "text" }))),
        }),
        Y("text", "{:text}", { ifMode: "math", applyMode: "text" }),
        Y(["class", "htmlClass"], "{name:string}{content:auto}", {
          createAtom: (e) => new Eo(u(d({}, e), { body: T(e.args[1]) })),
          serialize: (e, t) =>
            !e.args[0] || t.skipStyles
              ? e.bodyToLatex(t)
              : `${e.command}{${e.args[0]}}{${e.bodyToLatex(t)}}`,
          render: (e, t) => {
            var n;
            return e.createBox(t, {
              classes: null != (n = e.args[0]) ? n : "",
            });
          },
        }),
        Y(["cssId", "htmlId"], "{id:string}{content:auto}", {
          createAtom: (e) => new Eo(u(d({}, e), { body: T(e.args[1]) })),
          serialize: (e, t) => {
            var n;
            return null == (n = e.args) || !n[0] || t.skipStyles
              ? e.bodyToLatex(t)
              : `${e.command}{${e.args[0]}}{${e.bodyToLatex(t)}}`;
          },
          render: (e, t) => {
            var n;
            let i = e.createBox(t);
            return (i.cssId = null != (n = e.args[0]) ? n : ""), i;
          },
        }),
        Y("htmlData", "{data:string}{content:auto}", {
          createAtom: (e) => new Eo(u(d({}, e), { body: T(e.args[1]) })),
          serialize: (e, t) => {
            var n;
            return null == (n = e.args) || !n[0] || t.skipStyles
              ? e.bodyToLatex(t)
              : `\\htmlData{${e.args[0]}}{${e.bodyToLatex(t)}}`;
          },
          render: (e, t) => {
            var n;
            let i = e.createBox(t);
            return (i.htmlData = null != (n = e.args[0]) ? n : ""), i;
          },
        }),
        Y(["style", "htmlStyle"], "{data:string}{content:auto}", {
          createAtom: (e) => new Eo(u(d({}, e), { body: T(e.args[1]) })),
          serialize: (e, t) => {
            var n;
            return null == (n = e.args) || !n[0] || t.skipStyles
              ? e.bodyToLatex(t)
              : `${e.command}{${e.args[0]}}{${e.bodyToLatex(t)}}`;
          },
          render: (e, t) => {
            var n;
            let i = e.createBox(t);
            return (i.htmlStyle = null != (n = e.args[0]) ? n : ""), i;
          },
        }),
        Y("em", "{:rest}", {
          createAtom: (e) => new Eo(u(d({}, e), { body: T(e.args[0]) })),
          serialize: (e, t) =>
            t.skipStyles ? e.bodyToLatex(t) : `{\\em ${e.bodyToLatex(t)}}`,
          render: (e, t) =>
            e.createBox(t, { classes: "ML__emph", boxType: "lift" }),
        }),
        Y("emph", "{:auto}", {
          createAtom: (e) => new Eo(u(d({}, e), { body: T(e.args[1]) })),
          serialize: (e, t) =>
            t.skipStyles ? e.bodyToLatex(t) : `\\emph{${e.bodyToLatex(t)}}`,
          render: (e, t) =>
            e.createBox(t, { classes: "ML__emph", boxType: "lift" }),
        });
      var Lu = {
        "\\bigl": { mclass: "mopen", size: 1 },
        "\\Bigl": { mclass: "mopen", size: 2 },
        "\\biggl": { mclass: "mopen", size: 3 },
        "\\Biggl": { mclass: "mopen", size: 4 },
        "\\bigr": { mclass: "mclose", size: 1 },
        "\\Bigr": { mclass: "mclose", size: 2 },
        "\\biggr": { mclass: "mclose", size: 3 },
        "\\Biggr": { mclass: "mclose", size: 4 },
        "\\bigm": { mclass: "mrel", size: 1 },
        "\\Bigm": { mclass: "mrel", size: 2 },
        "\\biggm": { mclass: "mrel", size: 3 },
        "\\Biggm": { mclass: "mrel", size: 4 },
        "\\big": { mclass: "mord", size: 1 },
        "\\Big": { mclass: "mord", size: 2 },
        "\\bigg": { mclass: "mord", size: 3 },
        "\\Bigg": { mclass: "mord", size: 4 },
      };
      function Cu(e, t) {
        var n, i, r, a, o, s;
        let l = {};
        "string" == typeof t.color &&
          ((l.verbatimColor = t.color),
          (l.color = null != (n = e.colorMap(t.color)) ? n : "none")),
          "string" == typeof t.backgroundColor &&
            ((l.verbatimBackgroundColor = t.backgroundColor),
            (l.backgroundColor =
              null != (i = e.backgroundColorMap(t.backgroundColor))
                ? i
                : "none")),
          "string" == typeof t.fontFamily && (l.fontFamily = t.fontFamily),
          "string" == typeof t.series && (l.fontSeries = t.series),
          "string" == typeof t.fontSeries &&
            (l.fontSeries = t.fontSeries.toLowerCase()),
          l.fontSeries &&
            (l.fontSeries =
              null !=
              (r = { bold: "b", medium: "m", normal: "m" }[l.fontSeries])
                ? r
                : l.fontSeries),
          "string" == typeof t.shape && (l.fontShape = t.shape),
          "string" == typeof t.fontShape &&
            (l.fontShape = t.fontShape.toLowerCase()),
          l.fontShape &&
            (l.fontShape =
              null !=
              (a = { italic: "it", up: "n", upright: "n", normal: "n" }[
                l.fontShape
              ])
                ? a
                : l.fontShape);
        let c = null != (o = t.size) ? o : t.fontSize;
        return (
          "number" == typeof c
            ? (l.fontSize = Math.max(1, Math.min(10, c)))
            : "string" == typeof c &&
              (l.fontSize =
                null !=
                (s = {
                  size1: 1,
                  size2: 2,
                  size3: 3,
                  size4: 4,
                  size5: 5,
                  size6: 6,
                  size7: 7,
                  size8: 8,
                  size9: 9,
                  size10: 10,
                }[c.toLowerCase()])
                  ? s
                  : {
                      tiny: 1,
                      scriptsize: 2,
                      footnotesize: 3,
                      small: 4,
                      normal: 5,
                      normalsize: 5,
                      large: 6,
                      Large: 7,
                      LARGE: 8,
                      huge: 9,
                      Huge: 10,
                    }[c]),
          l
        );
      }
      function zu(e) {
        var t, n, i, r, a, o;
        if ("text" === Jd(e, e.position)) {
          let [t, n] = $o(e.selection),
            i = !1;
          for (; !i && t > 0; ) {
            let n = e.at(t);
            "text" === n.mode && $.test(n.value) ? (t -= 1) : (i = !0);
          }
          for (i = !1; !i && n <= e.lastOffset; ) {
            let t = e.at(n);
            "text" === t.mode && $.test(t.value) ? (n += 1) : (i = !0);
          }
          if ((i && (n -= 1), t >= n)) return e.setSelection(n - 1, n), !0;
          e.setSelection(t, n);
        } else {
          let s = e.at(e.position);
          if (s.isDigit()) {
            let [i, r] = $o(e.selection);
            for (; null != (t = e.at(i)) && t.isDigit(); ) i -= 1;
            for (; null != (n = e.at(r)) && n.isDigit(); ) r += 1;
            e.setSelection(i, r - 1);
          } else if (s.style.variant || s.style.variantStyle) {
            let [t, n] = $o(e.selection),
              l = null == (i = e.at(t)) ? void 0 : i.style;
            for (
              ;
              l &&
              l.variant === s.style.variant &&
              l.variantStyle === s.style.variantStyle;

            )
              (t -= 1), (l = null == (r = e.at(t)) ? void 0 : r.style);
            for (
              l = null == (a = e.at(n)) ? void 0 : a.style;
              l &&
              l.variant === s.style.variant &&
              l.variantStyle === s.style.variantStyle;

            )
              (n += 1), (l = null == (o = e.at(n)) ? void 0 : o.style);
            e.setSelection(t, n - 1);
          } else
            e.setSelection(
              e.offsetOf(s.firstSibling),
              e.offsetOf(s.lastSibling)
            );
        }
        return !0;
      }
      Y(
        [
          "bigl",
          "Bigl",
          "biggl",
          "Biggl",
          "bigr",
          "Bigr",
          "biggr",
          "Biggr",
          "bigm",
          "Bigm",
          "biggm",
          "Biggm",
          "big",
          "Big",
          "bigg",
          "Bigg",
        ],
        "{:delim}",
        {
          createAtom: (e) => {
            var t;
            return new il(
              u(d({}, e), {
                delim: null != (t = e.args[0]) ? t : ".",
                size: Lu[e.command].size,
                delimType: Lu[e.command].mclass,
              })
            );
          },
        }
      ),
        Y(["hspace", "hspace*"], "{width:value}", {
          createAtom: (e) => {
            var t;
            return new hl(
              u(d({}, e), {
                width: null != (t = e.args[0]) ? t : { dimension: 0 },
              })
            );
          },
        }),
        Y(["mkern", "kern", "mskip", "hskip", "mspace"], "{width:value}", {
          createAtom: (e) => {
            var t;
            return new hl(
              u(d({}, e), {
                width: null != (t = e.args[0]) ? t : { dimension: 0 },
              })
            );
          },
        }),
        Y("mathchoice", "{:math}{:math}{:math}{:math}", {
          createAtom: (e) => new Eo(e),
          render: (e, t) => {
            let n = 0,
              i = t.mathstyle.id;
            (5 === i || 4 === i) && (n = 1),
              (3 === i || 2 === i) && (n = 2),
              (1 === i || 0 === i) && (n = 3);
            let r = T(e.args[n]);
            return Eo.createBox(t, r);
          },
          serialize: (e, t) =>
            `\\mathchoice{${Eo.serialize(e.args[0], t)}}{${Eo.serialize(
              e.args[1],
              t
            )}}{${Eo.serialize(e.args[2], t)}}{${Eo.serialize(e.args[3], t)}}`,
        }),
        Y("mathop", "{:auto}", {
          createAtom: (e) =>
            new Eo(
              u(d({}, e), {
                type: "mop",
                body: T(e.args[0]),
                limits: "over-under",
                isFunction: !0,
                captureSelection: !0,
              })
            ),
          render: (e, t) => {
            var n;
            let i = Eo.createBox(t, e.body);
            if (e.superscript || e.subscript) {
              let r = null != (n = e.subsupPlacement) ? n : "auto";
              i =
                "over-under" === r || ("auto" === r && t.isDisplayStyle)
                  ? e.attachLimits(t, { base: i })
                  : e.attachSupsub(t, { base: i });
            }
            return new oo(e.bind(t, i), {
              type: "op",
              isSelected: e.isSelected,
              classes: "op-group",
            });
          },
          serialize: (e, t) => {
            let n = [Xa(e.command, e.bodyToLatex(t))];
            return (
              e.explicitSubsupPlacement &&
                ("over-under" === e.subsupPlacement && n.push("\\limits"),
                "adjacent" === e.subsupPlacement && n.push("\\nolimits"),
                "auto" === e.subsupPlacement && n.push("\\displaylimits")),
              n.push(e.supsubToLatex(t)),
              Ja(n)
            );
          },
        }),
        Y(
          [
            "mathbin",
            "mathrel",
            "mathopen",
            "mathclose",
            "mathpunct",
            "mathord",
            "mathinner",
          ],
          "{:auto}",
          {
            createAtom: (e) =>
              new Eo(
                u(d({}, e), {
                  type: {
                    "\\mathbin": "mbin",
                    "\\mathrel": "mrel",
                    "\\mathopen": "mopen",
                    "\\mathclose": "mclose",
                    "\\mathpunct": "mpunct",
                    "\\mathord": "mord",
                    "\\mathinner": "minner",
                  }[e.command],
                  body: T(e.args[0]),
                  captureSelection: !0,
                })
              ),
          }
        ),
        Y(["operatorname", "operatorname*"], "{operator:math}", {
          createAtom: (e) => {
            let t = T(e.args[0]).map((e) => {
              var t;
              return (
                "first" !== e.type &&
                  ((e.type = "mord"),
                  (e.value =
                    null != (t = { "\u2217": "*", "\u2212": "-" }[e.value])
                      ? t
                      : e.value),
                  (e.isFunction = !1),
                  !e.style.variant &&
                    !e.style.variantStyle &&
                    ((e.style.variant = "main"),
                    (e.style.variantStyle = "up"))),
                e
              );
            });
            return new Eo(
              u(d({}, e), {
                type: "mop",
                body: t,
                isFunction: !0,
                limits:
                  "\\operatorname" === e.command ? "adjacent" : "over-under",
              })
            );
          },
          render: (e, t) => {
            var n;
            let i = Eo.createBox(t, e.body);
            if (e.superscript || e.subscript) {
              let r = null != (n = e.subsupPlacement) ? n : "auto";
              i =
                "over-under" === r || ("auto" === r && t.isDisplayStyle)
                  ? e.attachLimits(t, { base: i })
                  : e.attachSupsub(t, { base: i });
            }
            return new oo(e.bind(t, i), {
              type: "op",
              isSelected: e.isSelected,
              classes: "op-group",
            });
          },
          serialize: (e, t) => {
            let n = [Xa(e.command, e.bodyToLatex(t))];
            return (
              e.explicitSubsupPlacement &&
                ("over-under" === e.subsupPlacement && n.push("\\limits"),
                "adjacent" === e.subsupPlacement && n.push("\\nolimits"),
                "auto" === e.subsupPlacement && n.push("\\displaylimits")),
              n.push(e.supsubToLatex(t)),
              Ja(n)
            );
          },
        }),
        Y(["char", "unicode"], "{charcode:value}", {
          createAtom: (e) =>
            new Eo(u(d({}, e), { type: "text" === e.mode ? "text" : "mord" })),
          serialize: (e) => {
            var t;
            return `${e.command}${wo(
              null != (t = e.args[0])
                ? t
                : { number: 10067, base: "hexadecimal" }
            )}`;
          },
          render: (e, t) => {
            let n = t.evaluate(e.args[0]);
            return (
              (!n || !("number" in n)) &&
                (n = { number: 10067, base: "hexadecimal" }),
              (e.value = String.fromCodePoint(n.number)),
              e.createBox(t)
            );
          },
        }),
        Y("rule", "[raise:value]{width:value}{thickness:value}", {
          createAtom: (e) => new Eo(e),
          render: (e, t) => {
            var n, i, r;
            let a = new Lo({ parent: t, mathstyle: "textstyle" }, e.style),
              o = a.toEm(null != (n = e.args[0]) ? n : { dimension: 0 }),
              s = a.toEm(null != (i = e.args[1]) ? i : { dimension: 10 }),
              l = a.toEm(null != (r = e.args[2]) ? r : { dimension: 10 }),
              c = new oo(null, {
                classes: "rule",
                type: "ord",
                width: s,
                height: l + o,
                depth: -o,
              });
            return (
              c.setStyle("border-right-width", s, "em"),
              c.setStyle("border-top-width", l, "em"),
              c.setStyle("border-color", e.style.color),
              c.setStyle("vertical-align", o, "em"),
              e.isSelected && c.setStyle("opacity", "50%"),
              e.bind(a, c),
              e.caret && (c.caret = e.caret),
              c.wrap(t)
            );
          },
          serialize: (e) =>
            `\\rule${e.args[0] ? `[${wo(e.args[0])}]` : ""}{${wo(
              e.args[1]
            )}}{${wo(e.args[2])}}`,
        }),
        Y(["overline", "underline"], "{:auto}", {
          createAtom: (e) => new Eo(u(d({}, e), { body: T(e.args[0]) })),
          render: (e, t) => {
            let n = e.command.substring(1),
              i = new Lo({ parent: t, mathstyle: "cramp" }, e.style),
              r = Eo.createBox(i, e.body);
            if (!r) return null;
            let a,
              o = i.metrics.defaultRuleThickness / i.scalingFactor,
              s = new oo(null, { classes: n + "-line" });
            return (
              (s.height = o),
              (s.maxFontSize = 1.125 * o * i.scalingFactor),
              (a = new mo(
                "overline" === n
                  ? { shift: 0, children: [{ box: r }, 3 * o, { box: s }, o] }
                  : {
                      top: r.height,
                      children: [o, { box: s }, 3 * o, { box: r }],
                    }
              )),
              e.caret && (a.caret = e.caret),
              new oo(a, { classes: n, type: "ignore" })
            );
          },
        }),
        Y("overset", "{:auto}{base:auto}", {
          createAtom: (e) => {
            let t = T(e.args[1]);
            return new dl(
              u(d({}, e), {
                above: T(e.args[0]),
                body: t,
                skipBoundary: !1,
                boxType: ro(t),
              })
            );
          },
          serialize: (e, t) =>
            Xa(e.command, e.aboveToLatex(t), e.bodyToLatex(t)),
        }),
        Y("underset", "{:auto}{base:auto}", {
          createAtom: (e) => {
            let t = T(e.args[1]);
            return new dl(
              u(d({}, e), {
                below: T(e.args[0]),
                body: t,
                skipBoundary: !1,
                boxType: ro(t),
              })
            );
          },
          serialize: (e, t) =>
            Xa(e.command, e.belowToLatex(t), e.bodyToLatex(t)),
        }),
        Y("overunderset", "{above:auto}{below:auto}{base:auto}", {
          createAtom: (e) => {
            let t = T(e.args[2]);
            return new dl(
              u(d({}, e), {
                above: T(e.args[0]),
                below: T(e.args[1]),
                body: t,
                skipBoundary: !1,
                boxType: ro(t),
              })
            );
          },
          serialize: (e, t) =>
            Xa(e.command, e.belowToLatex(t), e.bodyToLatex(t)),
        }),
        Y(["stackrel", "stackbin"], "[below:auto]{above:auto}{base:auto}", {
          createAtom: (e) =>
            new dl(
              u(d({}, e), {
                body: T(e.args[2]),
                above: T(e.args[1]),
                below: T(e.args[0]),
                skipBoundary: !1,
                boxType: "\\stackrel" === e.command ? "rel" : "bin",
              })
            ),
          serialize: (e, t) =>
            Xa(e.command, e.aboveToLatex(t), e.bodyToLatex(t)),
        }),
        Y("smash", "[:string]{:auto}", {
          createAtom: (e) => {
            var t, n, i, r;
            return new ul(
              u(d({}, e), {
                body: T(e.args[1]),
                smashHeight:
                  null ==
                    (n = null == (t = e.args[0]) ? void 0 : t.includes("t")) ||
                  n,
                smashDepth:
                  null ==
                    (r = null == (i = e.args[0]) ? void 0 : i.includes("b")) ||
                  r,
              })
            );
          },
        }),
        Y(["vphantom"], "{:auto}", {
          createAtom: (e) =>
            new ul(
              u(d({}, e), {
                body: T(e.args[0]),
                isInvisible: !0,
                smashWidth: !0,
              })
            ),
        }),
        Y(["hphantom"], "{:auto}", {
          createAtom: (e) =>
            new ul(
              u(d({}, e), {
                body: T(e.args[0]),
                isInvisible: !0,
                smashHeight: !0,
                smashDepth: !0,
              })
            ),
        }),
        Y(["phantom"], "{:auto}", {
          createAtom: (e) =>
            new ul(u(d({}, e), { body: T(e.args[0]), isInvisible: !0 })),
        }),
        Y("not", "{:math}", {
          createAtom: (e) => {
            let t = T(e.args[0]);
            return 0 === t.length
              ? new Eo(u(d({}, e), { type: "mrel", value: "\ue020" }))
              : new Eo(
                  u(d({}, e), {
                    body: [
                      new cl(u(d({}, e), { body: "\ue020", align: "right" })),
                      ...t,
                    ],
                    captureSelection: !0,
                  })
                );
          },
          serialize: (e, t) => {
            let n = e.args[0],
              i = n && "object" == typeof n && "group" in n;
            return "\ue020" !== e.value
              ? i
                ? `\\not{${Eo.serialize(n.group, t)}}`
                : `\\not${Eo.serialize(n, t)}`
              : i
              ? "\\not{}"
              : "\\not";
          },
          render: (e, t) => {
            if (e.value) return e.createBox(t);
            let n =
                e.args[0] &&
                "object" == typeof e.args[0] &&
                "group" in e.args[0]
                  ? "ord"
                  : ro(T(e.args[0])),
              i = Eo.createBox(t, e.body, { type: n });
            return e.caret && (i.caret = e.caret), e.bind(t, i);
          },
        }),
        Y(["ne", "neq"], "", {
          createAtom: (e) =>
            new Eo(
              u(d({}, e), {
                type: "mrel",
                body: [
                  new cl(
                    u(d({}, e), {
                      body: "\ue020",
                      align: "right",
                      boxType: "rel",
                    })
                  ),
                  new Eo(u(d({}, e), { value: "=" })),
                ],
                captureSelection: !0,
              })
            ),
          serialize: (e) => e.command,
        }),
        Y("rlap", "{:auto}", {
          createAtom: (e) =>
            new cl(u(d({}, e), { body: T(e.args[0]), align: "right" })),
        }),
        Y("llap", "{:auto}", {
          createAtom: (e) =>
            new cl(u(d({}, e), { body: T(e.args[0]), align: "left" })),
        }),
        Y("mathrlap", "{:math}", {
          createAtom: (e) =>
            new cl(u(d({}, e), { body: T(e.args[0]), align: "left" })),
        }),
        Y("mathllap", "{:math}", {
          createAtom: (e) =>
            new cl(u(d({}, e), { body: T(e.args[0]), align: "left" })),
        }),
        Y("raisebox", "{:value}{:text}", {
          createAtom: (e) => {
            var t;
            return new Ns(
              u(d({}, e), {
                body: T(e.args[1]),
                padding: { dimension: 0 },
                offset: null != (t = e.args[0]) ? t : { dimension: 0 },
              })
            );
          },
          serialize: (e, t) => {
            var n;
            return Xa(
              "\\raisebox",
              null != (n = wo(e.offset)) ? n : "0pt",
              e.bodyToLatex(t)
            );
          },
        }),
        Y("raise", "{:value}{:auto}", {
          createAtom: (e) => {
            var t;
            return new Ns(
              u(d({}, e), {
                body: T(e.args[1]),
                padding: { dimension: 0 },
                offset: null != (t = e.args[0]) ? t : { dimension: 0 },
              })
            );
          },
          serialize: (e, t) => {
            var n;
            return Xa(
              "\\raise",
              null != (n = wo(e.offset)) ? n : "0pt",
              e.bodyToLatex(t)
            );
          },
        }),
        Y("lower", "{:value}{:auto}", {
          createAtom: (e) => {
            var t;
            return new Ns(
              u(d({}, e), {
                body: T(e.args[1]),
                padding: { dimension: 0 },
                offset: null != (t = ko(e.args[0], -1)) ? t : { dimension: 0 },
              })
            );
          },
          serialize: (e, t) => {
            var n, i;
            return Xa(
              "\\lower",
              null !=
                (i = wo(ko(null != (n = e.offset) ? n : { dimension: 0 }, -1)))
                ? i
                : "0pt",
              e.bodyToLatex(t)
            );
          },
        }),
        H("0123456789/@.?!"),
        W(65, 90),
        W(97, 122),
        H([
          ["\\forall", 8704],
          ["\\exists", 8707],
          ["\\nexists", 8708, "mord", "ams"],
          ["\\mid", 8739, "mrel"],
          ["\\top", 8868],
          ["\\bot", 8869],
        ]),
        H([
          ["\\sharp", 9839],
          ["\\flat", 9837],
          ["\\natural", 9838],
          ["\\#", 35],
          ["\\&", 38],
          ["\\clubsuit", 9827],
          ["\\heartsuit", 9825],
          ["\\spadesuit", 9824],
          ["\\diamondsuit", 9826],
          ["\\parallelogram", 9649],
        ]),
        H([
          ["\\backslash", 92],
          ["\\nabla", 8711],
          ["\\partial", 8706],
          ["\\ell", 8467],
          ["\\hbar", 8463],
          ["\\Q", 81, "mord", "double-struck"],
          ["\\C", 67, "mord", "double-struck"],
          ["\\P", 80, "mord", "double-struck"],
          ["\\pounds", 163],
          ["\\euro", 8364],
        ]),
        H(
          [
            ["\\rightarrow", 8594],
            ["\\to", 8594],
            ["\\leftarrow", 8592],
            ["\\gets", 8592],
            ["\\Rightarrow", 8658],
            ["\\Leftarrow", 8656],
            ["\\longrightarrow", 10230],
            ["\\longleftarrow", 10229],
            ["\\Longrightarrow", 10233],
            ["\\implies", 10233],
            ["\\Longleftarrow", 10232],
            ["\\impliedby", 10232],
            ["\\longleftrightarrow", 10231],
            ["\\biconditional", 10231],
            ["\\Longleftrightarrow", 10234],
            ["\\mapsto", 8614],
            ["\\longmapsto", 10236],
            ["\\uparrow", 8593],
            ["\\downarrow", 8595],
            ["\\Uparrow", 8657],
            ["\\Downarrow", 8659],
            ["\\updownarrow", 8597],
            ["\\Updownarrow", 8661],
            ["\\hookrightarrow", 8618],
            ["\\hookleftarrow", 8617],
            ["\\rightharpoonup", 8640],
            ["\\leftharpoonup", 8636],
            ["\\rightharpoondown", 8641],
            ["\\leftharpoondown", 8637],
            ["\\searrow", 8600],
            ["\\nearrow", 8599],
            ["\\swarrow", 8601],
            ["\\nwarrow", 8598],
            ["\\originalof", 8886],
            ["\\laplace", 8886],
            ["\\imageof", 8887],
            ["\\Laplace", 8887],
          ],
          "mrel"
        ),
        H([
          ["\\lbrace", 123, "mopen"],
          ["\\rbrace", 125, "mclose"],
          ["\\lparen", 40, "mopen"],
          ["\\rparen", 41, "mclose"],
          ["\\langle", 10216, "mopen"],
          ["\\rangle", 10217, "mclose"],
          ["\\lfloor", 8970, "mopen"],
          ["\\rfloor", 8971, "mclose"],
          ["\\lceil", 8968, "mopen"],
          ["\\rceil", 8969, "mclose"],
          ["\\vert", 8739],
          ["\\lvert", 8739, "mopen"],
          ["\\rvert", 8739, "mclose"],
          ["\\|", 8741],
          ["\\Vert", 8741],
          ["\\mVert", 8741],
          ["\\lVert", 8741, "mopen"],
          ["\\rVert", 8741, "mclose"],
          ["\\lbrack", 91, "mopen"],
          ["\\rbrack", 93, "mclose"],
          ["\\{", 123, "mopen"],
          ["\\}", 125, "mclose"],
          ["(", 40, "mopen"],
          [")", 41, "mclose"],
          ["[", 91, "mopen"],
          ["]", 93, "mclose"],
          ["\\ulcorner", 9484, "mopen", "ams"],
          ["\\urcorner", 9488, "mclose", "ams"],
          ["\\llcorner", 9492, "mopen", "ams"],
          ["\\lrcorner", 9496, "mclose", "ams"],
          ["\\lgroup", 10222, "mopen"],
          ["\\rgroup", 10223, "mclose"],
          ["\\lmoustache", 9136, "mopen"],
          ["\\rmoustache", 9137, "mclose"],
        ]),
        H(
          [
            ["\\dashrightarrow", 8674],
            ["\\dashleftarrow", 8672],
            ["\\Rrightarrow", 8667],
            ["\\Lleftarrow", 8666],
            ["\\leftrightarrows", 8646],
            ["\\rightleftarrows", 8644],
            ["\\curvearrowright", 8631],
            ["\\curvearrowleft", 8630],
            ["\\rightrightarrows", 8649],
            ["\\leftleftarrows", 8647],
            ["\\upuparrows", 8648],
            ["\\downdownarrows", 8650],
            ["\\vartriangle", 9651],
            ["\\triangleq", 8796],
            ["\\vartriangleleft", 8882],
            ["\\trianglelefteq", 8884],
            ["\\ntriangleleft", 8938],
            ["\\ntrianglelefteq", 8940],
            ["\\vartriangleright", 8883],
            ["\\trianglerighteq", 8885],
            ["\\ntriangleright", 8939],
            ["\\ntrianglerighteq", 8941],
            ["\\blacktriangleleft", 9664],
            ["\\blacktriangleright", 9654],
            ["\\leftarrowtail", 8610],
            ["\\rightarrowtail", 8611],
            ["\\looparrowright", 8620],
            ["\\looparrowleft", 8619],
            ["\\twoheadleftarrow", 8606],
            ["\\twoheadrightarrow", 8608],
            ["\\twoheadrightarrowtail", 10518],
            ["\\rightleftharpoons", 8652],
            ["\\leftrightharpoons", 8651],
            ["\\Rsh", 8625],
            ["\\Lsh", 8624],
            ["\\circlearrowright", 8635],
            ["\\circlearrowleft", 8634],
            ["\\restriction", 8638],
            ["\\upharpoonright", 8638],
            ["\\upharpoonleft", 8639],
            ["\\downharpoonright", 8642],
            ["\\downharpoonleft", 8643],
            ["\\rightsquigarrow", 8669],
            ["\\leadsto", 8669],
            ["\\leftrightsquigarrow", 8621],
            ["\\multimap", 8888],
            ["\\nleftarrow", 8602],
            ["\\nrightarrow", 8603],
            ["\\nRightarrow", 8655],
            ["\\nLeftarrow", 8653],
            ["\\nleftrightarrow", 8622],
            ["\\nLeftrightarrow", 8654],
            ["\\nvrightarrow", 8696],
            ["\\nvtwoheadrightarrow", 10496],
            ["\\nvrightarrowtail", 10516],
            ["\\nvtwoheadrightarrowtail", 10519],
            ["\\shortparallel", 8741],
            ["\\nless", 8814],
            ["\\nleqslant", 57360],
            ["\\lneq", 10887],
            ["\\lneqq", 8808],
            ["\\nleqq", 57361],
            ["\\lvertneqq", 57356],
            ["\\lnsim", 8934],
            ["\\lnapprox", 10889],
            ["\\nprec", 8832],
            ["\\npreceq", 8928],
            ["\\precnsim", 8936],
            ["\\precnapprox", 10937],
            ["\\nsim", 8769],
            ["\\nshortmid", 57350],
            ["\\nmid", 8740],
            ["\\nvdash", 8876],
            ["\\nvDash", 8877],
            ["\\ngtr", 8815],
            ["\\ngeqslant", 57359],
            ["\\ngeqq", 57358],
            ["\\gneq", 10888],
            ["\\gneqq", 8809],
            ["\\gvertneqq", 57357],
            ["\\gnsim", 8935],
            ["\\gnapprox", 10890],
            ["\\nsucc", 8833],
            ["\\nsucceq", 8929],
            ["\\succnsim", 8937],
            ["\\succnapprox", 10938],
            ["\\ncong", 8774],
            ["\\nshortparallel", 57351],
            ["\\nparallel", 8742],
            ["\\nVDash", 8879],
            ["\\nsupseteqq", 57368],
            ["\\supsetneq", 8843],
            ["\\varsupsetneq", 57371],
            ["\\supsetneqq", 10956],
            ["\\varsupsetneqq", 57369],
            ["\\nVdash", 8878],
            ["\\precneqq", 10933],
            ["\\succneqq", 10934],
            ["\\nsubseteqq", 57366],
            ["\\leqslant", 10877],
            ["\\geqslant", 10878],
            ["\\gtrsim", 8819],
            ["\\approxeq", 8778],
            ["\\thickapprox", 8776],
            ["\\lessapprox", 10885],
            ["\\gtrapprox", 10886],
            ["\\precapprox", 10935],
            ["\\succapprox", 10936],
            ["\\thicksim", 8764],
            ["\\succsim", 8831],
            ["\\precsim", 8830],
            ["\\backsim", 8765],
            ["\\eqsim", 8770],
            ["\\backsimeq", 8909],
            ["\\lesssim", 8818],
            ["\\nleq", 8816],
            ["\\ngeq", 8817],
            ["\\smallsmile", 8995],
            ["\\smallfrown", 8994],
            ["\\leqq", 8806],
            ["\\eqslantless", 10901],
            ["\\lll", 8920],
            ["\\lessgtr", 8822],
            ["\\lesseqgtr", 8922],
            ["\\lesseqqgtr", 10891],
            ["\\risingdotseq", 8787],
            ["\\fallingdotseq", 8786],
            ["\\subseteqq", 10949],
            ["\\Subset", 8912],
            ["\\sqsubset", 8847],
            ["\\preccurlyeq", 8828],
            ["\\curlyeqprec", 8926],
            ["\\vDash", 8872],
            ["\\Vvdash", 8874],
            ["\\bumpeq", 8783],
            ["\\Bumpeq", 8782],
            ["\\geqq", 8807],
            ["\\eqslantgtr", 10902],
            ["\\ggg", 8921],
            ["\\gtrless", 8823],
            ["\\gtreqless", 8923],
            ["\\gtreqqless", 10892],
            ["\\supseteqq", 10950],
            ["\\Supset", 8913],
            ["\\sqsupset", 8848],
            ["\\succcurlyeq", 8829],
            ["\\curlyeqsucc", 8927],
            ["\\Vdash", 8873],
            ["\\shortmid", 8739],
            ["\\between", 8812],
            ["\\pitchfork", 8916],
            ["\\varpropto", 8733],
            ["\\backepsilon", 8717],
            ["\\llless", 8920],
            ["\\gggtr", 8921],
            ["\\doteqdot", 8785],
            ["\\Doteq", 8785],
            ["\\eqcirc", 8790],
            ["\\circeq", 8791],
            ["\\therefore", 8756],
            ["\\because", 8757],
          ],
          "mrel",
          "ams"
        ),
        H(
          [
            ["+", 43],
            ["-", 8722],
            ["\u2212", 8722],
            ["\\pm", 177],
            ["\\mp", 8723],
            ["*", 8727],
            ["\\times", 215],
            ["\\div", 247],
            ["\\divides", 8739],
            ["\\cdot", 8901],
            ["\\cap", 8745],
            ["\\cup", 8746],
            ["\\setminus", 8726],
            ["\\land", 8743],
            ["\\wedge", 8743],
            ["\\lor", 8744],
            ["\\vee", 8744],
            ["\\circ", 8728],
            ["\\bigcirc", 9711],
            ["\\bullet", 8729],
            ["\\oplus", 8853],
            ["\\ominus", 8854],
            ["\\otimes", 8855],
            ["\\odot", 8857],
            ["\\oslash", 8856],
            ["\\bigtriangleup", 9651],
            ["\\bigtriangledown", 9661],
            ["\\triangleleft", 9667],
            ["\\triangleright", 9657],
            ["\\And", 38],
            ["\\dagger", 8224],
            ["\\dag", 8224],
            ["\\ddag", 8225],
            ["\\ddagger", 8225],
            ["\\ast", 8727],
            ["\\star", 8902],
            ["\\bigstar", 9733],
            ["\\diamond", 8900],
          ],
          "mbin"
        ),
        H(
          [
            ["\\lhd", 8882],
            ["\\rhd", 8883],
            ["\\lessdot", 8918],
            ["\\gtrdot", 8919],
            ["\\ltimes", 8905],
            ["\\rtimes", 8906],
            ["\\leftthreetimes", 8907],
            ["\\rightthreetimes", 8908],
            ["\\intercal", 8890],
            ["\\dotplus", 8724],
            ["\\doublebarwedge", 10846],
            ["\\divideontimes", 8903],
            ["\\centerdot", 8901],
            ["\\smallsetminus", 8726],
            ["\\barwedge", 8892],
            ["\\veebar", 8891],
            ["\\nor", 8891],
            ["\\curlywedge", 8911],
            ["\\curlyvee", 8910],
            ["\\boxminus", 8863],
            ["\\boxplus", 8862],
            ["\\boxtimes", 8864],
            ["\\boxdot", 8865],
            ["\\circleddash", 8861],
            ["\\circledast", 8859],
            ["\\circledcirc", 8858],
            ["\\unlhd", 8884],
            ["\\unrhd", 8885],
          ],
          "mbin",
          "ams"
        ),
        H([
          ["\\surd", 8730],
          ["\\infty", 8734],
          ["\\prime", 8242],
          ["\\doubleprime", 8243],
          ["\\angle", 8736],
          ["`", 8216],
          ["\\$", 36],
          ["\\%", 37],
          ["\\_", 95],
          ["\\alpha", 945],
          ["\\beta", 946],
          ["\\gamma", 947],
          ["\\delta", 948],
          ["\\epsilon", 1013],
          ["\\varepsilon", 949],
          ["\\zeta", 950],
          ["\\eta", 951],
          ["\\theta", 952],
          ["\\vartheta", 977],
          ["\\iota", 953],
          ["\\kappa", 954],
          ["\\varkappa", 1008, "mord", "ams"],
          ["\\lambda", 955],
          ["\\mu", 956],
          ["\\nu", 957],
          ["\\xi", 958],
          ["\\omicron", 111],
          ["\\pi", 960],
          ["\\varpi", 982],
          ["\\rho", 961],
          ["\\varrho", 1009],
          ["\\sigma", 963],
          ["\\varsigma", 962],
          ["\\tau", 964],
          ["\\phi", 981],
          ["\\varphi", 966],
          ["\\upsilon", 965],
          ["\\chi", 967],
          ["\\psi", 968],
          ["\\omega", 969],
          ["\\Gamma", 915],
          ["\\Delta", 916],
          ["\\Theta", 920],
          ["\\Lambda", 923],
          ["\\Xi", 926],
          ["\\Pi", 928],
          ["\\Sigma", 931],
          ["\\Upsilon", 933],
          ["\\Phi", 934],
          ["\\Psi", 936],
          ["\\Omega", 937],
          ["\\digamma", 989, "mord", "ams"],
          ["\\emptyset", 8709],
        ]),
        H(
          [
            ["=", 61],
            ["<", 60],
            ["\\lt", 60],
            [">", 62],
            ["\\gt", 62],
            ["\\le", 8804],
            ["\\leq", 8804],
            ["\\ge", 8805],
            ["\\geq", 8805],
            ["\\ll", 8810],
            ["\\gg", 8811],
            ["\\coloneq", 8788],
            ["\\measeq", 8797],
            ["\\eqdef", 8798],
            ["\\questeq", 8799],
            [":", 58],
            ["\\cong", 8773],
            ["\\equiv", 8801],
            ["\\prec", 8826],
            ["\\preceq", 10927],
            ["\\succ", 8827],
            ["\\succeq", 10928],
            ["\\perp", 8869],
            ["\\propto", 8733],
            ["\\Colon", 8759],
            ["\\smile", 8995],
            ["\\frown", 8994],
            ["\\sim", 8764],
            ["\\doteq", 8784],
            ["\\bowtie", 8904],
            ["\\Join", 8904],
            ["\\asymp", 8781],
            ["\\sqsubseteq", 8849],
            ["\\sqsupseteq", 8850],
            ["\\approx", 8776],
            ["\\~", 126],
            ["\\leftrightarrow", 8596],
            ["\\Leftrightarrow", 8660],
            ["\\models", 8872],
            ["\\vdash", 8866],
            ["\\dashv", 8867],
            ["\\roundimplies", 10608],
            ["\\in", 8712],
            ["\\notin", 8713],
            ["\\ni", 8715],
            ["\\owns", 8715],
            ["\\subset", 8834],
            ["\\supset", 8835],
            ["\\subseteq", 8838],
            ["\\supseteq", 8839],
            ["\\differencedelta", 8710],
            ["\\mvert", 8739],
            ["\\parallel", 8741],
            ["\\simeq", 8771],
          ],
          "mrel"
        ),
        H(
          [
            ["\\lnot", 172],
            ["\\neg", 172],
            ["\\triangle", 9651],
            ["\\subsetneq", 8842],
            ["\\varsubsetneq", 57370],
            ["\\subsetneqq", 10955],
            ["\\varsubsetneqq", 57367],
            ["\\nsubset", 8836],
            ["\\nsupset", 8837],
            ["\\nsubseteq", 8840],
            ["\\nsupseteq", 8841],
          ],
          "mrel",
          "ams"
        ),
        H([
          ["\\wp", 8472],
          ["\\aleph", 8501],
        ]),
        H(
          [
            ["\\blacktriangle", 9650],
            ["\\hslash", 8463],
            ["\\Finv", 8498],
            ["\\Game", 8513],
            ["\\eth", 240],
            ["\\mho", 8487],
            ["\\Bbbk", 107],
            ["\\yen", 165],
            ["\\square", 9633],
            ["\\Box", 9633],
            ["\\blacksquare", 9632],
            ["\\circledS", 9416],
            ["\\circledR", 174],
            ["\\triangledown", 9661],
            ["\\blacktriangledown", 9660],
            ["\\checkmark", 10003],
            ["\\diagup", 9585],
            ["\\measuredangle", 8737],
            ["\\sphericalangle", 8738],
            ["\\backprime", 8245],
            ["\\backdoubleprime", 8246],
            ["\\Diamond", 9674],
            ["\\lozenge", 9674],
            ["\\blacklozenge", 10731],
            ["\\varnothing", 8709],
            ["\\complement", 8705],
            ["\\maltese", 10016],
            ["\\beth", 8502],
            ["\\daleth", 8504],
            ["\\gimel", 8503],
          ],
          "mord",
          "ams"
        ),
        H(
          [
            ["\\ ", 160],
            ["~", 160],
          ],
          "space"
        ),
        Y(["!", ",", ":", ";", "enskip", "enspace", "quad", "qquad"], "", {
          createAtom: (e) => new hl(e),
        }),
        Y("space", "", { createAtom: (e) => new hl(e) }),
        H(
          [
            ["\\colon", 58],
            ["\\cdotp", 8901],
            ["\\vdots", 8942, "mord"],
            ["\\ldotp", 46],
            [",", 44],
            [";", 59],
          ],
          "mpunct"
        ),
        H(
          [
            ["\\cdots", 8943],
            ["\\ddots", 8945],
            ["\\ldots", 8230],
            ["\\mathellipsis", 8230],
          ],
          "minner"
        ),
        H([
          ["\\/", 47],
          ["|", 8739, "mord"],
          ["\\imath", 305],
          ["\\jmath", 567],
          ["\\degree", 176],
          ["'", 8242],
          ['"', 8221],
        ]),
        xc({
          undo: (e) => (e.undo(), !0),
          redo: (e) => (e.redo(), !0),
          scrollIntoView: (e) => (e.scrollIntoView(), !0),
          scrollToStart: (e) => (e.field.scroll(0, 0), !0),
          scrollToEnd: (e) => {
            let t = e.field.getBoundingClientRect();
            return e.field.scroll(t.left - window.scrollX, 0), !0;
          },
          toggleKeystrokeCaption: function (e) {
            if (
              ((e.keystrokeCaptionVisible = !e.keystrokeCaptionVisible),
              e.keystrokeCaptionVisible)
            ) {
              yu().innerHTML = "";
            } else {
              tc("mathlive-keystroke-caption-panel").style.visibility =
                "hidden";
            }
            return !1;
          },
          plonk: (e) => (e.model.announce("plonk"), !0),
          switchMode: (e, t, n, i) => (e.switchMode(t, n, i), !0),
          insert: (e, t, n) => e.insert(t, n),
          typedText: (e, t, n) => (bu(e, t, n), !0),
          insertDecimalSeparator: (e) => {
            let t = e.model;
            return "math" === t.mode &&
              "," === window.MathfieldElement.decimalSeparator &&
              t.at(Math.max(t.position, t.anchor)).isDigit()
              ? (e.insert("{,}", { format: "latex" }),
                e.snapshot("insert-mord"),
                !0)
              : (e.insert("."), !0);
          },
          commit: (e) => {
            var t;
            return (
              Ul(e.model, { inputType: "insertLineBreak" }) &&
                (null == (t = e.host) ||
                  t.dispatchEvent(
                    new Event("change", { bubbles: !0, composed: !0 })
                  ),
                Jl(e.model, { inputType: "insertLineBreak" })),
              !0
            );
          },
          insertPrompt: (e, t, n) => {
            let i = e.getPrompts(),
              r =
                "prompt-" +
                Date.now().toString(36).slice(-2) +
                Math.floor(1e5 * Math.random()).toString(36),
              a = 0;
            for (; i.includes(r) && a < 100; ) {
              if (99 === a)
                return (
                  console.error("could not find a unique ID after 100 tries"),
                  !1
                );
              (r =
                "prompt-" +
                Date.now().toString(36).slice(-2) +
                Math.floor(1e5 * Math.random()).toString(36)),
                a++;
            }
            return e.insert(`\\placeholder[${null != t ? t : r}]{}`, n), !0;
          },
        }),
        xc(
          {
            copyToClipboard: (e) => (
              e.focus(),
              e.model.selectionIsCollapsed && e.select(),
              "queryCommandSupported" in document &&
              document.queryCommandSupported("copy")
                ? document.execCommand("copy")
                : e.element
                    .querySelector(".ML__keyboard-sink")
                    .dispatchEvent(
                      new ClipboardEvent("copy", { bubbles: !0, composed: !0 })
                    ),
              !1
            ),
          },
          { target: "mathfield" }
        ),
        xc(
          {
            cutToClipboard: (e) => (
              e.focus(),
              "queryCommandSupported" in document &&
              document.queryCommandSupported("cut")
                ? document.execCommand("cut")
                : e.element
                    .querySelector(".ML__keyboard-sink")
                    .dispatchEvent(
                      new ClipboardEvent("cut", { bubbles: !0, composed: !0 })
                    ),
              !0
            ),
            pasteFromClipboard: (e) => (
              e.focus(),
              "queryCommandSupported" in document &&
              document.queryCommandSupported("paste")
                ? (document.execCommand("paste"), !0)
                : (navigator.clipboard.readText().then((t) => {
                    t && Ul(e.model, { inputType: "insertFromPaste", data: t })
                      ? (e.stopCoalescingUndo(),
                        e.stopRecording(),
                        e.insert(t, { mode: e.model.mode }) &&
                          (Yl(e),
                          e.startRecording(),
                          e.snapshot("paste"),
                          Jl(e.model, { inputType: "insertFromPaste" }),
                          fc(e)))
                      : e.model.announce("plonk"),
                      e.startRecording();
                  }),
                  !0)
            ),
          },
          {
            target: "mathfield",
            canUndo: !0,
            changeContent: !0,
            changeSelection: !0,
          }
        ),
        xc(
          {
            applyStyle: function (e, t) {
              e.flushInlineShortcutBuffer(), e.stopCoalescingUndo();
              let n = Cu(e, t),
                { model: i } = e;
              return (
                i.selectionIsCollapsed
                  ? (e.style.fontSeries &&
                      n.fontSeries === e.style.fontSeries &&
                      (n.fontSeries = "auto"),
                    n.fontShape &&
                      n.fontShape === e.style.fontShape &&
                      (n.fontShape = "auto"),
                    n.color && n.color === e.style.color && (n.color = "none"),
                    n.backgroundColor &&
                      n.backgroundColor === e.style.backgroundColor &&
                      (n.backgroundColor = "none"),
                    n.fontSize &&
                      n.fontSize === e.style.fontSize &&
                      (n.fontSize = "auto"),
                    (e.style = d(d({}, e.style), n)))
                  : e.model.deferNotifications(
                      { content: !0, type: "insertText" },
                      () => {
                        i.selection.ranges.forEach((e) =>
                          Gd(i, e, n, { operation: "toggle" })
                        ),
                          e.snapshot("style-change");
                      }
                    ),
                !0
              );
            },
          },
          { target: "mathfield", canUndo: !0, changeContent: !0 }
        ),
        xc(
          {
            selectGroup: (e) => {
              let t = zu(e);
              return t || e.announce("plonk"), t;
            },
            selectAll: (e) => e.setSelection(0, e.lastOffset),
            extendSelectionForward: (e) => Qu(e, "forward", { extend: !0 }),
            extendSelectionBackward: (e) => Qu(e, "backward", { extend: !0 }),
            extendToNextWord: (e) => Yu(e, "forward", { extend: !0 }),
            extendToPreviousWord: (e) => Yu(e, "backward", { extend: !0 }),
            extendSelectionUpward: (e) => Qu(e, "upward", { extend: !0 }),
            extendSelectionDownward: (e) => Qu(e, "downward", { extend: !0 }),
            extendToNextBoundary: (e) => Yu(e, "forward", { extend: !0 }),
            extendToPreviousBoundary: (e) => Yu(e, "backward", { extend: !0 }),
            extendToGroupStart: (e) => {
              let t = e.setSelection(
                e.anchor,
                e.offsetOf(e.at(e.position).firstSibling)
              );
              return t || e.announce("plonk"), t;
            },
            extendToGroupEnd: (e) => {
              let t = e.setSelection(
                e.anchor,
                e.offsetOf(e.at(e.position).lastSibling)
              );
              return t || e.announce("plonk"), t;
            },
            extendToMathFieldStart: (e) => {
              let t = e.setSelection(e.anchor, 0);
              return t || e.announce("plonk"), t;
            },
            extendToMathFieldEnd: (e) => {
              let t = e.setSelection(e.anchor, e.lastOffset);
              return t || e.announce("plonk"), t;
            },
          },
          { target: "model", changeSelection: !0 }
        );
      var Au = null,
        Eu = 0;
      function Ku(e) {
        return e instanceof PointerEvent;
      }
      function Du(e, t) {
        var n;
        e.atomBoundsCache = new Map();
        let i,
          r = e,
          a = !1,
          o = !1,
          s = "none";
        if (t.buttons > 1) return;
        let l = !1,
          c = !1,
          d = t.clientX,
          u = t.clientY,
          h = Date.now(),
          p = r.field,
          m = setInterval(() => {
            l
              ? p.scroll({ top: 0, left: p.scrollLeft - 16 })
              : c && p.scroll({ top: 0, left: p.scrollLeft + 16 });
          }, 32);
        function f(t) {
          "PointerEvent" in window
            ? (Go(p, "pointermove", y),
              Go(p, "pointerup pointercancel", f),
              t instanceof PointerEvent && p.releasePointerCapture(t.pointerId))
            : (Go(window, "mousemove", y), Go(window, "mouseup blur", f)),
            (a = !1),
            clearInterval(m),
            e.element.classList.remove("tracking"),
            t && t.preventDefault();
        }
        function y(t) {
          if (!r.hasFocus()) return void f(null);
          let n = t.clientX,
            a = t.clientY,
            o = Ku(t) && "touch" === t.pointerType ? 20 : 5;
          if (
            Date.now() < h + 500 &&
            Math.abs(d - n) < o &&
            Math.abs(u - a) < o
          )
            return t.preventDefault(), void t.stopPropagation();
          let s = p.getBoundingClientRect();
          (c = n > s.right), (l = n < s.left);
          let m = i;
          Ku(t) &&
            (t.isPrimary || (m = Pu(r, t.clientX, t.clientY, { bias: 0 })));
          let y = Pu(r, n, a, { bias: n <= d ? (n === d ? 0 : -1) : 1 });
          m >= 0 && y >= 0 && (r.model.extendSelectionTo(m, y), fc(e)),
            t.preventDefault(),
            t.stopPropagation();
        }
        Au &&
        Math.abs(Au.x - d) < 5 &&
        Math.abs(Au.y - u) < 5 &&
        Date.now() < Au.time + 500
          ? ((Eu += 1), (Au.time = h))
          : ((Au = { x: d, y: u, time: h }), (Eu = 1));
        let g = p.getBoundingClientRect();
        if (d >= g.left && d <= g.right && u >= g.top && u <= g.bottom) {
          if (
            (e.hasFocus() || ((s = "none"), e.focus({ preventScroll: !0 })),
            e.flushInlineShortcutBuffer(),
            (e.smartModeSuppressed = !1),
            (e.adoptStyle = "left"),
            (i = Pu(e, d, u, { bias: 0 })),
            i >= 0)
          ) {
            if ((e.element.classList.add("tracking"), t.shiftKey)) {
              let t = e.model.selectionIsCollapsed;
              e.model.extendSelectionTo(e.model.anchor, i),
                (s = Ql(e.model) || t ? "all" : "selection");
            } else
              "placeholder" === e.model.at(i).type
                ? (e.model.setSelection(i - 1, i), (s = "selection"))
                : "placeholder" ===
                  (null == (n = e.model.at(i).rightSibling) ? void 0 : n.type)
                ? (e.model.setSelection(i, i + 1), (s = "selection"))
                : ((e.model.position = i),
                  (s = Ql(e.model) ? "all" : "selection"));
            (e.style = {}),
              3 === t.detail || Eu > 2
                ? (f(t),
                  (3 === t.detail || 3 === Eu) &&
                    ((e.model.selection = {
                      ranges: [[0, e.model.lastOffset]],
                    }),
                    (s = "all")))
                : a ||
                  ((a = !0),
                  "PointerEvent" in window
                    ? (Xo(p, "pointermove", y),
                      Xo(p, "pointerup pointercancel", f),
                      t instanceof PointerEvent &&
                        p.setPointerCapture(t.pointerId))
                    : (Xo(window, "blur", f),
                      Xo(window, "mousemove", y),
                      Xo(window, "mouseup", f)),
                  (2 === t.detail || 2 === Eu) &&
                    ((o = !0), zu(e.model), (s = "all")));
          }
        } else Au = null;
        e.stopCoalescingUndo(),
          "none" !== s && (e.model.selectionIsCollapsed && (s = "all"), fc(e)),
          t.preventDefault();
      }
      function Tu(e, t, n) {
        if (e >= n.left && e <= n.right && t >= n.top && t <= n.bottom)
          return 0;
        let i = e - (n.left + n.right) / 2,
          r = t - (n.top + n.bottom) / 2;
        return i * i + r * r;
      }
      function Bu(e, t, n, i, r) {
        if (!n.id) return [1 / 0, null];
        if (t.has(n.id)) return t.get(n.id);
        let a = ns(e, n);
        if (!a) return [1 / 0, null];
        let o = [1 / 0, null];
        if (n.hasChildren && !n.captureSelection && i >= a.left && i <= a.right)
          for (let s of n.children) {
            let n = Bu(e, t, s, i, r);
            n[0] <= o[0] && (o = n);
          }
        return o[1] || (o = [Tu(i, r, a), n]), t.set(n.id, o), o;
      }
      function $u(e, t, n) {
        let [, i] = Bu(e, new Map(), e.model.root, t, n);
        return i;
      }
      function Pu(e, t, n, i) {
        var r, a;
        let o =
          null == (r = e.fieldContent) ? void 0 : r.getBoundingClientRect();
        if (!o) return 0;
        if (t > o.right || n > o.bottom + 8) return e.model.lastOffset;
        if (t < o.left || n < o.top - 8) return 0;
        (i = null != i ? i : {}).bias = null != (a = i.bias) ? a : 0;
        let s = $u(e, t, n),
          l = [],
          c = s;
        for (; c; ) l.unshift(c), (c = c.parent);
        for (let u of l)
          if (u.captureSelection) {
            s = u;
            break;
          }
        let d = e.model.offsetOf(s);
        if (d < 0) return -1;
        if (s.leftSibling)
          if (0 === i.bias && "placeholder" !== s.type) {
            let n = ns(e, s);
            n &&
              t < (n.left + n.right) / 2 &&
              (d = e.model.offsetOf(s.leftSibling));
          } else i.bias < 0 && (d = e.model.offsetOf(s.leftSibling));
        return d;
      }
      function Ou(e) {
        if (!e || (e[0].type, e.length > 1)) return null;
        let t = e[0];
        return t instanceof Vs && "(" === t.leftDelim && ")" === t.rightDelim
          ? t.removeBranch("body")
          : null;
      }
      function Fu(e) {
        if (e) {
          for (let t = 0; e[t]; t++) {
            let n = e[t];
            if (n instanceof Vs && "(" === n.leftDelim) {
              let i = 0,
                r = 0,
                a = 0;
              for (let e = 0; n.body[e]; e++)
                "genfrac" === n.body[e].type && (i++, (r = e)), a++;
              0 === a && 1 === i && (e[t] = n.body[r]);
            }
          }
          for (let t of e) {
            for (let e of t.branches)
              if (!t.hasEmptyBranch(e)) {
                Fu(t.branch(e));
                let n = Ou(t.branch(e));
                n && t.setChildren(n, e);
              }
            if (t instanceof $s) for (let e of t.cells) Fu(e);
          }
        }
      }
      function Nu(e) {
        return (
          !!e.isDigit() ||
          (!(
            !e.type ||
            !/^(mord|surd|msubsup|leftright|mop|mclose)$/.test(e.type)
          ) &&
            !(e.isExtensibleSymbol || e.isFunction))
        );
      }
      new (class extends Wo {
        constructor() {
          super("math");
        }
        onPaste(e, t) {
          if (
            !t ||
            !Ul(e.model, {
              data: "string" == typeof t ? t : null,
              dataTransfer: "string" == typeof t ? null : t,
              inputType: "insertFromPaste",
            })
          )
            return !1;
          let n = "",
            i = "auto",
            r =
              "string" != typeof t
                ? t.getData("application/json+mathlive")
                : "";
          if (r)
            try {
              let t = JSON.parse(r);
              if (t && Array.isArray(t)) {
                e.snapshot();
                let n = wl(t),
                  { model: i } = e;
                i.selectionIsCollapsed || i.deleteAtoms($o(i.selection));
                let r = i.at(i.position);
                if (r.parent instanceof $s) {
                  r.parentBranch;
                  let e = [],
                    t = [];
                  "first" === n[0].type && n.shift(),
                    "first" === n[n.length - 1].type && n.pop();
                  for (let r of n)
                    "first" === r.type && t.length > 0
                      ? (e.push(t), (t = [r]))
                      : t.push(r);
                  t.length > 0 && e.push(t);
                  let i = Number(r.parentBranch[0]),
                    a = Number(r.parentBranch[1]),
                    o = r.parent.maxColumns;
                  for (
                    ;
                    r.parent.colCount - a < e.length && r.parent.colCount < o;

                  )
                    r.parent.addColumn();
                  r.parent.addChildrenAfter(e[0], r);
                  for (let n = 1; n < e.length; n++)
                    a++,
                      a >= o && ((a = 0), r.parent.addRowAfter(i), i++),
                      r.parent.setCell(i, a, e[n]);
                } else
                  r.parent.addChildrenAfter(
                    n.filter((e) => "first" !== e.type),
                    r
                  );
                return (
                  (i.position = i.offsetOf(n[n.length - 1])),
                  Jl(i, { inputType: "insertFromPaste" }),
                  fc(e),
                  !0
                );
              }
            } catch (a) {}
          if (
            ((r = "string" != typeof t ? t.getData("application/json") : ""),
            r && window.MathfieldElement.computeEngine)
          )
            try {
              let e = JSON.parse(r);
              if (
                ("object" == typeof e &&
                  "latex" in e &&
                  e.latex &&
                  (n = e.latex),
                !n)
              ) {
                let t = window.MathfieldElement.computeEngine.box(e);
                t && !t.has("Error") && (n = t.latex);
              }
              n || (i = "latex");
            } catch (a) {}
          if (
            (!n &&
              "string" != typeof t &&
              ((n = t.getData("application/x-latex")), n && (i = "latex")),
            n || (n = "string" == typeof t ? t : t.getData("text/plain")),
            n)
          ) {
            let t;
            return (
              ([t, n] = Vo(n)),
              "auto" === i && t && (i = "latex"),
              e.stopCoalescingUndo(),
              e.stopRecording(),
              this.insert(e.model, n, { format: i }) &&
                (e.startRecording(), e.snapshot("paste"), fc(e)),
              e.startRecording(),
              !0
            );
          }
          return !1;
        }
        insert(e, t, n) {
          var i, r;
          let a =
            "string" == typeof t
              ? t
              : null !=
                (r =
                  null == (i = window.MathfieldElement.computeEngine)
                    ? void 0
                    : i.box(t).latex)
              ? r
              : "";
          if (
            !n.silenceNotifications &&
            !Ul(e, { data: a, inputType: "insertText" })
          )
            return !1;
          n.insertionMode || (n.insertionMode = "replaceSelection"),
            n.selectionMode || (n.selectionMode = "placeholder"),
            n.format || (n.format = "auto");
          let { silenceNotifications: o } = e;
          n.silenceNotifications && (e.silenceNotifications = !0);
          let s = e.silenceNotifications;
          e.silenceNotifications = !0;
          let l = {};
          if (
            ((l[0] =
              "replaceAll" === n.insertionMode
                ? ""
                : e.getValue(e.selection, "latex-unstyled")),
            (l["?"] = "\\placeholder{}"),
            (l["@"] = l["?"]),
            "replaceSelection" !== n.insertionMode || e.selectionIsCollapsed
              ? "replaceAll" === n.insertionMode
                ? (e.root.setChildren([], "body"), (e.position = 0))
                : "insertBefore" === n.insertionMode
                ? e.collapseSelection("backward")
                : "insertAfter" === n.insertionMode &&
                  e.collapseSelection("forward")
              : e.deleteAtoms($o(e.selection)),
            e.at(e.position).isLastSibling ||
            "placeholder" !== e.at(e.position + 1).type
              ? "placeholder" === e.at(e.position).type &&
                e.deleteAtoms([e.position - 1, e.position])
              : e.deleteAtoms([e.position, e.position + 1]),
            l[0])
          )
            l["@"] = l[0];
          else if ("string" == typeof t && /(^|[^\\])#@/.test(t)) {
            let t = (function (e) {
              let t = e.at(e.position);
              if ("text" === t.mode) {
                for (; !t.isFirstSibling && "text" === t.mode; )
                  t = t.leftSibling;
                return e.offsetOf(t);
              }
              let n = t,
                i = !1;
              if ("mclose" === t.type) {
                let e = ms[t.value];
                for (
                  ;
                  !t.isFirstSibling && ("mopen" !== t.type || t.value !== e);

                )
                  t = t.leftSibling;
                t.isFirstSibling || (t = t.leftSibling), (i = !0);
              } else "leftright" === t.type && ((t = t.leftSibling), (i = !0));
              if (i)
                for (; !t.isFirstSibling && (t.isFunction || Nu(t)); )
                  t = t.leftSibling;
              else {
                let e = [];
                for (; !t.isFirstSibling && (Nu(t) || e.length > 0); )
                  "mclose" === t.type && e.unshift(t.value),
                    "mopen" === t.type &&
                      e.length > 0 &&
                      t.value === ms[e[0]] &&
                      e.shift(),
                    (t = t.leftSibling);
              }
              return n === t ? -1 : e.offsetOf(t);
            })(e);
            t >= 0 &&
              ((l["@"] = e.getValue(t, e.position, "latex-unstyled")),
              e.deleteAtoms([t, e.position]));
          }
          l[0] || (l[0] = l["?"]);
          let c = !1,
            [d, u] = (function (e, t, n, i) {
              var r;
              let a,
                o = [];
              if ("string" != typeof t || "math-json" === i.format) {
                let n = window.MathfieldElement.computeEngine;
                if (!n) return ["math-json", []];
                ([a, t] = ["latex", n.box(t).latex]),
                  (o = Zs(t, { context: e.mathfield.context }));
              } else
                "string" == typeof t && "ascii-math" === i.format
                  ? (([a, t] = Fo(t, {
                      format: "ascii-math",
                      inlineShortcuts: e.mathfield.options.inlineShortcuts,
                    })),
                    (o = Zs(t, { context: e.mathfield.context })),
                    "latex" !== a &&
                      e.mathfield.options.removeExtraneousParentheses &&
                      Fu(o))
                  : ("auto" === i.format ||
                      (null != (r = i.format) && r.startsWith("latex"))) &&
                    ("auto" === i.format &&
                      ([a, t] = Fo(t, {
                        format: "auto",
                        inlineShortcuts: e.mathfield.options.inlineShortcuts,
                      })),
                    "latex" === i.format && ([, t] = Vo(t)),
                    (o = Zs(t, { context: e.mathfield.context, args: n })),
                    "latex" !== i.format &&
                      e.mathfield.options.removeExtraneousParentheses &&
                      Fu(o));
              return Xd(o, i.style), [null != a ? a : "latex", o];
            })(e, t, (e) => ((c = !0), l[e]), n);
          if (!u) return !1;
          let { parent: h } = e.at(e.position);
          if (
            "latex" !== d &&
            e.mathfield.options.removeExtraneousParentheses &&
            h instanceof Vs &&
            "(" === h.leftDelim &&
            h.hasEmptyBranch("body") &&
            1 === u.length &&
            "genfrac" === u[0].type
          ) {
            let e = h.parent,
              t = h.parentBranch;
            e.removeChild(h), e.setChildren(u, t);
          }
          let p = h.hasEmptyBranch("body"),
            m = e.at(e.position);
          m.parent.addChildrenAfter(u, m),
            "latex" === d &&
              "string" == typeof t &&
              "root" === (null == h ? void 0 : h.type) &&
              p &&
              !c &&
              (h.verbatimLatex = t),
            (e.silenceNotifications = s);
          let f = u[u.length - 1];
          if ("placeholder" === n.selectionMode) {
            let t = u
              .flatMap((e) => [e, ...e.children])
              .find((e) => "placeholder" === e.type);
            if (t) {
              let n = e.offsetOf(t);
              e.setSelection(n - 1, n), e.announce("move");
            } else f && (e.position = e.offsetOf(f));
          } else
            "before" === n.selectionMode ||
              ("after" === n.selectionMode
                ? f && (e.position = e.offsetOf(f))
                : "item" === n.selectionMode &&
                  e.setSelection(e.anchor, e.offsetOf(f)));
          return (
            Jl(e, { data: a, inputType: "insertText" }),
            (e.silenceNotifications = o),
            !0
          );
        }
      })();
      new (class extends Wo {
        constructor() {
          super("text");
        }
        onPaste(e, t) {
          if (!t) return !1;
          let n = "string" == typeof t ? t : t.getData("text/plain");
          return (
            !(!n || !Ul(e.model, { inputType: "insertFromPaste", data: n })) &&
            (e.stopCoalescingUndo(),
            e.stopRecording(),
            this.insert(e.model, n) &&
              (Jl(e.model, { inputType: "insertFromPaste" }),
              e.startRecording(),
              e.snapshot("paste"),
              fc(e)),
            e.startRecording(),
            !0)
          );
        }
        insert(e, t, n = {}) {
          if (!Ul(e, { data: t, inputType: "insertText" })) return !1;
          n.insertionMode || (n.insertionMode = "replaceSelection"),
            n.selectionMode || (n.selectionMode = "placeholder"),
            n.format || (n.format = "auto");
          let { silenceNotifications: i } = e;
          n.silenceNotifications && (e.silenceNotifications = !0);
          let r = e.silenceNotifications;
          (e.silenceNotifications = !0),
            "replaceSelection" !== n.insertionMode || e.selectionIsCollapsed
              ? "replaceAll" === n.insertionMode
                ? (e.root.setChildren([], "body"), (e.position = 0))
                : "insertBefore" === n.insertionMode
                ? e.collapseSelection("backward")
                : "insertAfter" === n.insertionMode &&
                  e.collapseSelection("forward")
              : e.deleteAtoms($o(e.selection));
          let a = (function (e, t) {
            return Zs(
              (e = (e = (e = (e = (e = (e = (e = (e = (e = (e = (e = e.replace(
                /\\/g,
                "\\textbackslash "
              )).replace(/#/g, "\\#")).replace(/\$/g, "\\$")).replace(
                /%/g,
                "\\%"
              )).replace(/&/g, "\\&")).replace(/_/g, "\\_")).replace(
                /{/g,
                "\\textbraceleft "
              )).replace(/}/g, "\\textbraceright ")).replace(
                /\^/g,
                "\\textasciicircum "
              )).replace(/~/g, "\\textasciitilde ")).replace(
                /\xa3/g,
                "\\textsterling "
              )),
              { context: t, parseMode: "text" }
            );
          })(t, e.mathfield.context);
          if ((Xd(a, n.style), !a)) return !1;
          let o = e.at(e.position),
            s = o.parent.addChildrenAfter(a, o);
          return (
            (e.silenceNotifications = r),
            "before" === n.selectionMode ||
              ("item" === n.selectionMode
                ? e.setSelection(e.anchor, e.offsetOf(s))
                : s && (e.position = e.offsetOf(s))),
            Jl(e, { data: t, inputType: "insertText" }),
            (e.silenceNotifications = i),
            !0
          );
        }
      })();
      var qu = 20,
        Ru = (e, t) =>
          `\n  <line x1="${e + qu}" y1="${t + qu}" \n    x2="${
            e > t ? e + qu : 180
          }" \n    y2="${
            e < t ? t + qu : 180
          }"/>\n  <svg id="plus" viewBox="0 0 40 40" x="${e}" y="${t}" width="40" height="40">\n    <circle class="cls-2" cx="20" cy="20" r="20"/>\n    <path class="font" d="m33.33,20c0,1.84-1.49,3.34-3.33,3.34h-6.67v6.66c0,1.84-1.49,3.34-3.33,3.34s-3.34-1.5-3.34-3.34v-6.66h-6.66c-1.84,0-3.34-1.5-3.34-3.34s1.5-3.33,3.34-3.33h6.66v-6.67c0-1.84,1.5-3.33,3.34-3.33s3.33,1.49,3.33,3.33v6.67h6.67c1.84,0,3.33,1.49,3.33,3.33Z"/>\n  </svg>`,
        Iu = (e, t) =>
          `\n  <line x1="${e + qu}" y1="${t + qu}" \n    x2="${
            e > t ? e + qu : 180
          }" \n    y2="${
            e < t ? t + qu : 180
          }"/>\n  <svg id="minus" viewBox="0 0 40 40" x="${e}" y="${t}" width="40" height="40">\n    <circle class="cls-2" cx="20" cy="20" r="20"/>\n    <path class="font" d="m33.33,20c0,1.84-1.49,3.33-3.33,3.33H10c-1.84,0-3.34-1.49-3.34-3.33s1.5-3.34,3.34-3.34h20c1.84,0,3.33,1.5,3.33,3.34Z"/>\n  </svg>`,
        Vu = (e, t, n) =>
          `\n  <svg id="arrow" viewBox="0 0 40 40" x="${e}" y="${t}" width="40" height="40">\n    <circle class="cls-2" cx="20" cy="20" r="20"/>\n    <g transform="rotate(${n})" transform-origin="20 20">\n      <path class="font" d="m17.7,7.23h4.6c.52,0,.94.42.94.94v13.82c0,.52.42.94.94.94h3.39c.83,0,1.25,1.01.66,1.6l-7.56,7.56c-.37.37-.96.37-1.32,0l-7.56-7.56c-.59-.59-.17-1.6.66-1.6h3.39c.52,0,.94-.42.94-.94v-13.82c0-.52.42-.94.94-.94Z"/>\n    </g>  \n  </svg>`,
        ju = `\n<svg class="MLEP__array-buttons" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" \nviewBox=\n"-2 -2 205 205">\n  <rect \n      class="MLEP__array-insert-background rows"\n      x="0" \n      y="52" \n      height="144" \n      width="48" \n      rx="24"/>\n      <rect \n      class="MLEP__array-insert-background columns"\n      x="52" \n      y="0" \n      height="48" \n      width="144" \n      rx="24"/>\n  <g data-command='"moveDown"'>\n  ${Vu(
          104,
          152,
          0
        )}\n  </g>\n  <g data-command='"moveUp"'>\n  ${Vu(
          104,
          56,
          180
        )}\n  </g>\n  <g data-command='"moveToNextWord"'>\n  ${Vu(
          152,
          104,
          -90
        )}\n  </g>\n  <g data-command='"moveToPreviousWord"'>\n  ${Vu(
          56,
          104,
          90
        )}\n  </g>\n  <g>\n\n  <g data-command='"addColumnBefore"'>\n  ${Ru(
          56,
          4
        )}\n  </g>\n  <g data-command='"removeColumn"'>\n  ${Iu(
          104,
          4
        )}\n  </g>\n  <g data-command='"addColumnAfter"'>\n  ${Ru(
          152,
          4
        )}\n  </g>\n  <g data-command='"addRowBefore"'>\n  ${Ru(
          4,
          56
        )}\n  </g>\n  <g data-command='"removeRow"'>\n  ${Iu(
          4,
          104
        )}\n  </g>\n  <g data-command='"addRowAfter"'>\n    ${Ru(
          4,
          152
        )}\n  </g>\n</svg>`,
        Hu = (e) =>
          `\n<svg id="Bmatrix" class="${e}" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 28 24" \n  data-command='["setEnvironment","Bmatrix"]'>\n  <rect class="cls-1" width="28" height="24"/>\n  <path class="cls-2" d="m6,4c-1.1,0-2,.9-2,2v3c0,1.66-.9,3-2,3,1.1,0,2,1.34,2,3v3c0,1.1.9,2,2,2"/>\n  <path class="cls-2" d="m22,4c1.1,0,2,.9,2,2v3c0,1.66.9,3,2,3-1.1,0-2,1.34-2,3v3c0,1.1-.9,2-2,2"/>\n  <circle cx="10" cy="8" r="1"/>\n  <circle cx="14" cy="12" r="1"/>\n  <circle cx="18" cy="16" r="1"/>\n</svg>`,
        Wu = {
          matrix: (e) =>
            `\n<svg id="matrix" class="${e}" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 28 24" \n  data-command='["setEnvironment","matrix"]'>\n  <rect class="cls-1" width="28" height="24"/>\n  <circle cx="10" cy="8" r="1"/>\n  <circle cx="14" cy="12" r="1"/>\n  <circle cx="18" cy="16" r="1"/></svg>`,
          pmatrix: (e) =>
            `\n<svg id="pmatrix" class="${e}" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 28 24" \ndata-command='["setEnvironment","pmatrix"]'>\n  <rect class="cls-1" width="28" height="24"/>\n  <path class="cls-2" d="m6,4c-3.96,4.6-3.96,11.4,0,16"/>\n  <path class="cls-2" d="m22,4c3.96,4.6,3.96,11.4,0,16"/>\n  <circle cx="10" cy="8" r="1"/>\n  <circle cx="14" cy="12" r="1"/>\n  <circle cx="18" cy="16" r="1"/></svg>`,
          bmatrix: (e) =>
            `\n<svg id="bmatrix" class="${e}" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 28 24" \n  data-command='["setEnvironment","bmatrix"]'>\n  <rect class="cls-1" width="28" height="24"/>\n  <path class="cls-2" d="m6,4h-3v16h3"/>\n  <path class="cls-2" d="m22,4h3v16h-3"/>\n  <circle cx="10" cy="8" r="1"/>\n  <circle cx="14" cy="12" r="1"/>\n  <circle cx="18" cy="16" r="1"/>\n</svg>`,
          Bmatrix: Hu,
          vmatrix: (e) =>
            `\n<svg id="vmatrix" class="${e}" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 28 24" \n  data-command='["setEnvironment","vmatrix"]'>\n  <rect class="cls-1" width="28" height="24"/>\n  <circle cx="10" cy="8" r="1"/>\n  <circle cx="14" cy="12" r="1"/>\n  <circle cx="18" cy="16" r="1"/>\n  <line class="cls-2" x1="4" y1="4" x2="4" y2="20"/>\n  <line class="cls-2" x1="24" y1="4" x2="24" y2="20"/>\n</svg>`,
          Vmatrix: (e) =>
            `\n<svg id="Vmatrix" class="${e}" xmlns="http://www.w3.org/2000/svg" viewBox="-3.5 -3 35 30" \n  data-command='["setEnvironment","Vmatrix"]'>\n  <rect class="cls-1" width="28" height="24"/>\n  <circle cx="10" cy="8" r="1"/>\n  <circle cx="14" cy="12" r="1"/>\n  <circle cx="18" cy="16" r="1"/>\n  <line class="cls-2" x1="6" y1="4" x2="6" y2="20"/>\n  <line class="cls-2" x1="22" y1="4" x2="22" y2="20"/>\n  <line class="cls-2" x1="2" y1="4" x2="2" y2="20"/>\n  <line class="cls-2" x1="26" y1="4" x2="26" y2="20"/>\n</svg>`,
        },
        Uu = {
          cases: (e) =>
            `\n<svg id="cases" class="${e}" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 28 24" \n  data-command='["setEnvironment","cases"]'>\n  <rect class="cls-1" width="28" height="24"/>\n  <path class="cls-2" d="m10,4c-1.1,0-2,.9-2,2v3c0,1.66-.9,3-2,3,1.1,0,2,1.34,2,3v3c0,1.1.9,2,2,2"/>\n  <circle cx="13" cy="8" r="1"/>\n  <circle cx="13" cy="16" r="1"/>\n  <circle cx="21" cy="8" r="1"/>\n  <circle cx="21" cy="16" r="1"/>\n</svg>`,
          rcases: (e) =>
            `\n<svg id="rcases" class="${e}" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 28 24" \n  data-command='["setEnvironment","rcases"]'>\n  <rect class="cls-1" width="28" height="24"/>\n  <path class="cls-2" d="m18,20c1.1,0,2-.9,2-2v-3c0-1.66.9-3,2-3-1.1,0-2-1.34-2-3v-3c0-1.1-.9-2-2-2"/>\n  <circle cx="15" cy="8" r="1"/>\n  <circle cx="15" cy="16" r="1"/>\n  <circle cx="7" cy="8" r="1"/>\n  <circle cx="7" cy="16" r="1"/>\n</svg>`,
          Bmatrix: Hu,
        };
      function Ju(e) {
        var t, n;
        let i = null == (t = e.model.parentEnvironment) ? void 0 : t.array;
        if (!i) return;
        let r = 0;
        i.forEach((e) => {
          (!r || e.length > r) && (r = e.length);
        });
        let a = document.getElementById("mathlive-environment-popover");
        a ||
          ((a = tc("mathlive-environment-popover")),
          ds("environment-popover"),
          ds("core"),
          a.setAttribute("aria-hidden", "true"));
        let o,
          s = a.querySelector(".MLEP__environment-controls");
        s
          ? (o = s)
          : ((o = document.createElement("div")),
            (a.innerHTML = ""),
            a.appendChild(o)),
          (o.className = "MLEP__environment-controls"),
          (o.style.display = "flex"),
          (o.style.width = "100%"),
          (o.style.height = "100%"),
          (o.style.boxSizing = "border-box"),
          (o.innerHTML = ju);
        let l = [],
          c = "",
          d = e.model.parentEnvironment.environmentName;
        if (Bs(d)) {
          let e = (function (e) {
            return e.replace("*", "");
          })(d);
          c = Wu[e]("active");
          let t = Wu,
            { [e]: n } = t,
            i = p(t, [h(e)]);
          l = Object.values(i).map((e) => e("inactive"));
        } else if (
          (function (e) {
            return Ks.includes(e);
          })(d)
        ) {
          let e = (function (e) {
            return "dcases" === e ? "cases" : e;
          })(d);
          c = Uu[e]("active");
          let t = Uu,
            { [e]: n } = t,
            i = p(t, [h(e)]);
          l = Object.values(i).map((e) => e("inactive"));
        } else
          (function (e) {
            return Ds.includes(e);
          })(d) &&
            ((c = Wu.matrix("active")),
            (l = Object.values(Uu).map((e) => e("inactive"))));
        let u = document.createElement("div");
        (u.className = "MLEP__environment-delimiter-controls"),
          (u.style.display = "flex"),
          (u.style.flexDirection = "column"),
          (u.innerHTML = `\n  <div class='MLEP__array-delimiter-options'>\n  ${c}\n  ${l.join(
            ""
          )}\n  </div>`),
          c && o.appendChild(u),
          o.querySelectorAll("[data-command]").forEach((t) => {
            let n = t.dataset.command,
              i = n;
            try {
              i = JSON.parse(n);
            } catch (r) {}
            t.addEventListener("mousedown", (e) => e.preventDefault()),
              i && t.addEventListener("click", () => e.executeCommand(i));
          });
        let m = null == (n = e.field) ? void 0 : n.getBoundingClientRect();
        m &&
          ((a.style.top = `${
            window.scrollY + (m.top - a.clientHeight - 15)
          }px`),
          (a.style.left = `${m.left + 20}px`),
          a.classList.add("is-visible"));
      }
      function Xu() {
        let e = document.getElementById("mathlive-environment-popover");
        null == e || e.classList.remove("is-visible");
      }
      function Gu(e) {
        if (!e.hasFocus()) return;
        let t = !1;
        if ("math" === e.model.mode) {
          let n = e.model.parentEnvironment;
          if (
            null != n &&
            n.array &&
            (function (e) {
              return Ts.concat(Ds).concat(Ks).concat(Es).includes(e);
            })(n.environmentName)
          ) {
            let n = e.options.environmentPopoverPolicy;
            t =
              ("auto" === n && window.mathVirtualKeyboard.visible) ||
              "on" === n;
          }
        }
        t ? Ju(e) : Xu();
      }
      function Zu(e, t, n) {
        if ("text" !== e.at(t).mode) return t;
        let i,
          r = "backward" === n ? -1 : 1;
        if ($.test(e.at(t).value)) {
          let n,
            a = t;
          do {
            (n = "text" === e.at(a).mode && $.test(e.at(a).value)), (a += r);
          } while (e.at(a) && n);
          i = e.at(a) ? a - 2 * r : a - r;
        } else if (/\s/.test(e.at(t).value)) {
          let n = t;
          for (
            ;
            e.at(n) && "text" === e.at(n).mode && /\s/.test(e.at(n).value);

          )
            n += r;
          if (e.at(n)) {
            let t = !0;
            do {
              (t = "text" === e.at(n).mode && !/\s/.test(e.at(n).value)),
                (n += r);
            } while (e.at(n) && t);
            i = e.at(n) ? n - 2 * r : n - r;
          } else i = n - r;
        } else {
          let n = t;
          for (
            ;
            e.at(n) && "text" === e.at(n).mode && !/\s/.test(e.at(n).value);

          )
            n += r;
          i = e.at(n) ? n : n - r;
          let a = !0;
          for (; e.at(n) && a; )
            (a = "text" === e.at(n).mode && /\s/.test(e.at(n).value)),
              a && (i = n),
              (n += r);
          i = e.at(n) ? n - 2 * r : n - r;
        }
        return i - (r > 0 ? 0 : 1);
      }
      function Yu(e, t, n) {
        var i, r, a, o, s, l, c;
        let d = e.position;
        (null != (i = null == n ? void 0 : n.extend) && i) ||
          e.collapseSelection(t);
        let u = e.at(e.position);
        if (
          ("forward" === t &&
            ("subsup" === u.type
              ? ((u = u.rightSibling), u || (u = e.at(e.position + 1)))
              : (u = e.at(e.position + 1))),
          !u)
        )
          return e.announce("plonk"), !1;
        let h = e.offsetOf(u);
        if (u instanceof To) h = Zu(e, h, t);
        else if (u instanceof ol)
          if (u.isSuggestion)
            for (; u && u instanceof ol; )
              (u.isSuggestion = !1), (h = e.offsetOf(u)), (u = u.rightSibling);
          else if ("forward" === t) {
            if (((u = u.rightSibling), !u || !(u instanceof ol)))
              return e.announce("plonk"), !1;
            for (; u && u instanceof ol && /[a-zA-Z\*]/.test(u.value); )
              (h = e.offsetOf(u)), (u = u.rightSibling);
          } else {
            if (((u = u.leftSibling), !u || !(u instanceof ol)))
              return e.announce("plonk"), !1;
            for (; u && u instanceof ol && /[a-zA-Z\*]/.test(u.value); )
              (h = e.offsetOf(u)), (u = u.leftSibling);
          }
        else if ("forward" === t && "mopen" === u.type) {
          let t = 0;
          do {
            "mopen" === u.type ? (t += 1) : "mclose" === u.type && (t -= 1),
              (u = u.rightSibling);
          } while (!u.isLastSibling && 0 !== t);
          h = e.offsetOf(u.leftSibling);
        } else if ("backward" === t && "mclose" === u.type) {
          let t = 0;
          do {
            "mopen" === u.type ? (t += 1) : "mclose" === u.type && (t -= 1),
              (u = u.leftSibling);
          } while (!u.isFirstSibling && 0 !== t);
          h = e.offsetOf(u);
        } else if ("backward" === t)
          if ("first" === u.type)
            for (; h > 0 && "first" === u.type; ) (h -= 1), (u = e.at(h));
          else {
            let t = u.type;
            "subsup" === u.type && (h = e.offsetOf(e.at(h).leftSibling)),
              (h -= 1);
            let n = null == (r = e.at(h)) ? void 0 : r.type;
            for (; h >= 0 && n === t; )
              "subsup" === (null == (a = e.at(h)) ? void 0 : a.type)
                ? (h = e.offsetOf(e.at(h).leftSibling))
                : (h -= 1),
                (n = e.at(h).type);
          }
        else {
          let { type: t } = u,
            n = null == (o = e.at(h)) ? void 0 : o.type,
            { lastOffset: i } = e;
          for (; h <= i && (n === t || "subsup" === n); ) {
            for (
              ;
              "subsup" ===
              (null == (s = e.at(h).rightSibling) ? void 0 : s.type);

            )
              h = e.offsetOf(e.at(h).rightSibling);
            (h += 1), (n = null == (l = e.at(h)) ? void 0 : l.type);
          }
          h -= 1;
        }
        if (null != (c = null == n ? void 0 : n.extend) && c) {
          if (!e.setSelection(e.anchor, h)) return e.announce("plonk"), !1;
        } else {
          if (h === e.position) return e.announce("plonk"), !1;
          e.position = h;
        }
        return e.announce("move", d), e.mathfield.stopCoalescingUndo(), !0;
      }
      function Qu(e, t, n) {
        var i, r;
        if (
          ((n = null != n ? n : { extend: !1 }),
          (e.mathfield.adoptStyle = "backward" === t ? "right" : "left"),
          "forward" !== t)
        ) {
          let [t, n] = Gl(e);
          void 0 !== t && void 0 !== n && e.deleteAtoms([t, n]);
        }
        if ("upward" === t)
          return (function (e, t) {
            var n, i;
            let r = null != (n = null == t ? void 0 : t.extend) && n;
            r || e.collapseSelection("backward");
            let a = () => {
                var t, n;
                let i = !0;
                return (
                  e.silenceNotifications ||
                    (i =
                      null ==
                        (n =
                          null == (t = e.mathfield.host)
                            ? void 0
                            : t.dispatchEvent(
                                new CustomEvent("move-out", {
                                  detail: { direction: "upward" },
                                  cancelable: !0,
                                  bubbles: !0,
                                  composed: !0,
                                })
                              )) || n),
                  e.announce(i ? "plonk" : "line"),
                  i
                );
              },
              o = e.at(e.position),
              s = o;
            for (
              ;
              s &&
              "below" !== s.parentBranch &&
              !(Array.isArray(s.parentBranch) && s.parent instanceof $s);

            )
              s = s.parent;
            if (
              Array.isArray(null == s ? void 0 : s.parentBranch) &&
              s.parent instanceof $s
            ) {
              let t = s.parent;
              if (s.parentBranch[0] < 1) return a();
              let n = s.parentBranch[0] - 1,
                i = t.array[n][s.parentBranch[1]];
              if (
                !i.some((e) => "prompt" === e.type && !e.captureSelection) &&
                e.mathfield.hasEditablePrompts
              )
                return a();
              nh(e, o, i, r, "up");
            } else {
              if (!s) return a();
              {
                let t =
                  null != (i = s.parent.branch("above"))
                    ? i
                    : s.parent.createBranch("above");
                if (
                  !t.some((e) => "prompt" === e.type && e.placeholderId) &&
                  e.mathfield.hasEditablePrompts
                )
                  return a();
                nh(e, o, t, r, "up");
              }
            }
            return e.mathfield.stopCoalescingUndo(), !0;
          })(e, n);
        if ("downward" === t)
          return (function (e, t) {
            var n, i;
            let r = null != (n = null == t ? void 0 : t.extend) && n;
            r || e.collapseSelection("forward");
            let a = () => {
                var t, n;
                let i = !0;
                return (
                  e.silenceNotifications ||
                    (i =
                      null ==
                        (n =
                          null == (t = e.mathfield.host)
                            ? void 0
                            : t.dispatchEvent(
                                new CustomEvent("move-out", {
                                  detail: { direction: "downward" },
                                  cancelable: !0,
                                  bubbles: !0,
                                  composed: !0,
                                })
                              )) || n),
                  e.announce(i ? "plonk" : "line"),
                  i
                );
              },
              o = e.at(e.position),
              s = o;
            for (
              ;
              s &&
              "above" !== s.parentBranch &&
              !(Array.isArray(s.parentBranch) && s.parent instanceof $s);

            )
              s = s.parent;
            if (
              Array.isArray(null == s ? void 0 : s.parentBranch) &&
              s.parent instanceof $s
            ) {
              let t = s.parent;
              if (s.parentBranch[0] + 1 > t.array.length - 1) return a();
              let n = s.parentBranch[0] + 1,
                i = t.array[n][s.parentBranch[1]];
              if (
                !i.some((e) => "prompt" === e.type && !e.captureSelection) &&
                e.mathfield.hasEditablePrompts
              )
                return a();
              nh(e, o, i, r, "down");
            } else {
              if (!s) return a();
              {
                let t =
                  null != (i = s.parent.branch("below"))
                    ? i
                    : s.parent.createBranch("below");
                if (
                  !t.some((e) => "prompt" === e.type) &&
                  e.mathfield.hasEditablePrompts
                )
                  return a();
                nh(e, o, t, r, "down");
              }
            }
            return !0;
          })(e, n);
        if (n.extend) {
          let n = eh(e, e.position, t);
          n < 0 && (n = 0), n > e.lastOffset && (n = e.lastOffset);
          let i = e.setSelection(e.anchor, n);
          return e.mathfield.stopCoalescingUndo(), i;
        }
        if (e.selectionIsPlaceholder) {
          e.collapseSelection(t);
          let n = Qu(e, t);
          return e.mathfield.stopCoalescingUndo(), n;
        }
        let a = e.position,
          o = a;
        if (
          (e.collapseSelection(t)
            ? ((a = e.position), th(e, a) || (a = eh(e, a, t)))
            : (a = eh(e, a, t)),
          a < 0 || a > e.lastOffset)
        ) {
          let n = !0;
          return (
            e.silenceNotifications ||
              (n =
                null ==
                  (r =
                    null == (i = e.mathfield.host)
                      ? void 0
                      : i.dispatchEvent(
                          new CustomEvent("move-out", {
                            detail: { direction: t },
                            cancelable: !0,
                            bubbles: !0,
                            composed: !0,
                          })
                        )) || r),
            n && e.announce("plonk"),
            n
          );
        }
        return (
          e.setPositionHandlingPlaceholder(a),
          e.mathfield.stopCoalescingUndo(),
          e.announce("move", o),
          !0
        );
      }
      function eh(e, t, n) {
        return (t += "forward" === n ? 1 : -1) < 0 ||
          t > e.lastOffset ||
          th(e, t)
          ? t
          : eh(e, t, n);
      }
      function th(e, t) {
        var n;
        let i = e.at(t),
          r = i.parent;
        for (; r && !r.inCaptureSelection; ) r = r.parent;
        return !(
          (null != r && r.inCaptureSelection) ||
          (null != (n = i.parent) &&
            n.skipBoundary &&
            ((!i.isFirstSibling && i.isLastSibling) || "first" === i.type)) ||
          (e.mathfield.hasEditablePrompts && !i.parentPrompt)
        );
      }
      function nh(e, t, n, i, r) {
        let a = e.mathfield.hasEditablePrompts,
          o = a
            ? n.filter((e) => "prompt" === e.type && !e.captureSelection)
            : n,
          s = as(e.mathfield.getHTMLElement(t)).right,
          l =
            e.offsetOf(
              (function (e, t, n) {
                let i = 1 / 0,
                  r = 0;
                for (; r < t.length; r++) {
                  let a = as(e.getHTMLElement(t[r])).right,
                    o = Math.abs(n - a);
                  if (!(o <= i)) break;
                  i = o;
                }
                return t[r - 1];
              })(e.mathfield, o, s)
            ) - (a ? 1 : 0);
        if (i) {
          let t,
            [n, i] = e.selection.ranges[0];
          (t =
            l < ("up" === r ? n : i)
              ? { ranges: [[l, i]], direction: "backward" }
              : { ranges: [[n, l]], direction: "forward" }),
            e.setSelection(t);
        } else e.setPositionHandlingPlaceholder(l);
        e.announce(`move ${r}`);
      }
      function ih(e) {
        if (e && (e.classList.remove("ML__highlight"), e.children))
          for (let t of e.children) ih(t);
      }
      function rh(e, t) {
        var n;
        e &&
          (t && (null == (n = e.dataset) ? void 0 : n.atomId) !== t
            ? (e.classList.remove("ML__highlight"),
              e.children &&
                e.children.length > 0 &&
                [...e.children].forEach((e) => {
                  e instanceof HTMLElement && rh(e, t);
                }))
            : (e.classList.add("ML__highlight"),
              e.children &&
                e.children.length > 0 &&
                [...e.children].forEach((e) => {
                  e instanceof HTMLElement && rh(e);
                })));
      }
      xc(
        {
          deleteAll: (e) =>
            Ul(e, { inputType: "deleteContent" }) &&
            Ud(e, [0, -1], "deleteContent"),
          deleteForward: (e) =>
            (function (e) {
              return (
                !(
                  !e.mathfield.isSelectionEditable ||
                  !Ul(e, { inputType: "deleteContentForward" })
                ) &&
                (e.selectionIsCollapsed
                  ? e.deferNotifications(
                      {
                        content: !0,
                        selection: !0,
                        type: "deleteContentForward",
                      },
                      () => {
                        var t, n;
                        let i = e.at(e.position).rightSibling;
                        if (i && Wd(e, "forward", i)) return;
                        if (i) {
                          if (
                            e.at(e.position).isLastSibling &&
                            Wd(e, "forward", i.parent, i.parentBranch)
                          )
                            return;
                        } else {
                          if (
                            ((i = e.at(e.position)),
                            i.isLastSibling &&
                              Wd(e, "forward", i.parent, i.parentBranch))
                          )
                            return;
                          i = void 0;
                        }
                        if (e.position === e.lastOffset || !i)
                          return void e.announce("plonk");
                        i.parent.removeChild(i);
                        let r =
                          null == (t = e.at(e.position))
                            ? void 0
                            : t.rightSibling;
                        for (; "subsup" === (null == r ? void 0 : r.type); )
                          r.parent.removeChild(r),
                            (r =
                              null == (n = e.at(e.position))
                                ? void 0
                                : n.rightSibling);
                        e.announce("delete", void 0, [i]);
                      }
                    )
                  : Ud(e, $o(e.selection), "deleteContentForward"))
              );
            })(e),
          deleteBackward: (e) =>
            (function (e) {
              return (
                !(
                  !e.mathfield.isSelectionEditable ||
                  !Ul(e, { inputType: "deleteContentBackward" })
                ) &&
                (e.selectionIsCollapsed
                  ? e.deferNotifications(
                      {
                        content: !0,
                        selection: !0,
                        type: "deleteContentBackward",
                      },
                      () => {
                        let t = e.at(e.position);
                        if (!t || !Wd(e, "backward", t)) {
                          if (null != t && t.isFirstSibling) {
                            if (Wd(e, "backward", t.parent, t.parentBranch))
                              return;
                            t = null;
                          }
                          if (!t) return void e.announce("plonk");
                          (e.position = e.offsetOf(t.leftSibling)),
                            t.parent.removeChild(t),
                            e.announce("delete", void 0, [t]);
                        }
                      }
                    )
                  : Ud(e, $o(e.selection), "deleteContentBackward"))
              );
            })(e),
          deleteNextWord: (e) =>
            Ul(e, { inputType: "deleteWordForward" }) &&
            Ud(
              e,
              [e.anchor, Zu(e, e.position, "forward")],
              "deleteWordForward"
            ),
          deletePreviousWord: (e) =>
            Ul(e, { inputType: "deleteWordBackward" }) &&
            Ud(
              e,
              [e.anchor, Zu(e, e.position, "backward")],
              "deleteWordBackward"
            ),
          deleteToGroupStart: (e) =>
            Ul(e, { inputType: "deleteSoftLineBackward" }) &&
            Ud(
              e,
              [e.anchor, e.offsetOf(e.at(e.position).firstSibling)],
              "deleteSoftLineBackward"
            ),
          deleteToGroupEnd: (e) =>
            Ul(e, { inputType: "deleteSoftLineForward" }) &&
            Ud(
              e,
              [e.anchor, e.offsetOf(e.at(e.position).lastSibling)],
              "deleteSoftLineForward"
            ),
          deleteToMathFieldStart: (e) =>
            Ul(e, { inputType: "deleteHardLineBackward" }) &&
            Ud(e, [e.anchor, 0], "deleteHardLineBackward"),
          deleteToMathFieldEnd: (e) =>
            Ul(e, { inputType: "deleteHardLineForward" }) &&
            Ud(e, [e.anchor, -1], "deleteHardLineForward"),
        },
        {
          target: "model",
          audioFeedback: "delete",
          canUndo: !0,
          changeContent: !0,
          changeSelection: !0,
        }
      ),
        f() ||
          console.error(
            'MathLive 0.95.0: this version of the MathLive library is for use in the browser. A subset of the API is available on the server side in the "mathlive-ssr" library. If using server side rendering (with React for example) you may want to do a dynamic import of the MathLive library inside a `useEffect()` call.'
          );
      var ah = new WeakMap(),
        oh = {
          letterShapeStyle: "mf.letterShapeStyle = ...",
          horizontalSpacingScale:
            'Removed. Use `"thinmuskip"`, `"medmuskip"`, and `"thickmuskip"` registers ',
          macros: "mf.macros = ...",
          registers: "mf.registers = ...",
          backgroundColorMap: "mf.backgroundColorMap = ...",
          colorMap: "mf.colorMap = ...",
          enablePopover: "mf.popoverPolicy = ...",
          mathModeSpace: "mf.mathModeSpace = ...",
          placeholderSymbol: "mf.placeholderSymbol = ...",
          readOnly: "mf.readOnly = ...",
          removeExtraneousParentheses: "mf.removeExtraneousParentheses = ...",
          scriptDepth: "mf.scriptDepth = ...",
          smartFence: "mf.smartFence = ...",
          smartMode: "mf.smartMode = ...",
          smartSuperscript: "mf.smartSuperscript = ...",
          inlineShortcutTimeout: "mf.inlineShortcutTimeout = ...",
          inlineShortcuts: "mf.inlineShortcuts = ...",
          keybindings: "mf.keybindings = ...",
          virtualKeyboardMode: "mf.mathVirtualKeyboardPolicy = ...",
          customVirtualKeyboardLayers: "mathVirtualKeyboard.layers = ...",
          customVirtualKeyboards: "mathVirtualKeyboard.layouts = ...",
          keypressSound: "mathVirtualKeyboard.keypressSound = ...",
          keypressVibration: "mathVirtualKeyboard.keypressVibration = ...",
          plonkSound: "mathVirtualKeyboard.plonkSound = ...",
          virtualKeyboardContainer: "mathVirtualKeyboard.container = ...",
          virtualKeyboardLayout: "mathVirtualKeyboard.alphabeticLayout = ...",
          virtualKeyboardTheme: "No longer supported",
          virtualKeyboardToggleGlyph: "No longer supported",
          virtualKeyboardToolbar: "mathVirtualKeyboard.editToolbar = ...",
          virtualKeyboards: "Use `mathVirtualKeyboard.layouts`",
          speechEngine: "`MathfieldElement.speechEngine`",
          speechEngineRate: "`MathfieldElement.speechEngineRate`",
          speechEngineVoice: "`MathfieldElement.speechEngineVoice`",
          textToSpeechMarkup: "`MathfieldElement.textToSpeechMarkup`",
          textToSpeechRules: "`MathfieldElement.textToSpeechRules`",
          textToSpeechRulesOptions:
            "`MathfieldElement.textToSpeechRulesOptions`",
          readAloudHook: "`MathfieldElement.readAloudHook`",
          speakHook: "`MathfieldElement.speakHook`",
          computeEngine: "`MathfieldElement.computeEngine`",
          fontsDirectory: "`MathfieldElement.fontsDirectory`",
          soundsDirectory: "`MathfieldElement.soundsDirectory`",
          createHTML: "`MathfieldElement.createHTML`",
          onExport: "`MathfieldElement.onExport`",
          onInlineShortcut: "`MathfieldElement.onInlineShortcut`",
          onScrollIntoView: "`MathfieldElement.onScrollIntoView`",
          locale: "MathfieldElement.locale = ...",
          strings: "MathfieldElement.strings = ...",
          decimalSeparator: "MathfieldElement.decimalSeparator = ...",
          fractionNavigationOrder:
            "MathfieldElement.fractionNavigationOrder = ...",
        },
        sh = class e extends HTMLElement {
          constructor(e) {
            if ((super(), e)) {
              let t = [];
              for (let n of Object.keys(e))
                if (oh[n])
                  if (oh[n].startsWith("mf."))
                    if (oh[n].startsWith(`mf.${n}`))
                      t.push(
                        `Option \`${n}\` cannot be used as a constructor option. Use ${oh[n]}`
                      );
                    else {
                      let e = oh[n].match(/([a-zA-Z]+) =/);
                      t.push(`Option \`${n}\` has been renamed \`${e[1]}\``);
                    }
                  else
                    t.push(
                      `Option \`${n}\` cannot be used as a constructor option. Use ${oh[n]}`
                    );
              if (t.length > 0) {
                console.group(
                  "%cMathLive 0.95.0: %cInvalid Options",
                  "color:#12b; font-size: 1.1rem",
                  "color:#db1111; font-size: 1.1rem"
                ),
                  console.warn(
                    "Some of the options passed to `new MathFieldElement(...)` are invalid. \n          See https://cortexjs.io/mathlive/changelog/ for details."
                  );
                for (let e of t) console.warn(e);
                console.groupEnd();
              }
            }
            uh() &&
              ((this._internals = this.attachInternals()),
              (this._internals.role = "math"),
              (this._internals.ariaLabel = "math input field"),
              (this._internals.ariaMultiLine = "false")),
              this.attachShadow({ mode: "open", delegatesFocus: !0 }),
              this.shadowRoot && "adoptedStyleSheets" in this.shadowRoot
                ? ((this.shadowRoot.adoptedStyleSheets = [
                    cs("core"),
                    cs("mathfield"),
                    cs("mathfield-element"),
                  ]),
                  (this.shadowRoot.innerHTML =
                    '<span style="pointer-events:auto"></span><slot style="display:none"></slot>'))
                : (this.shadowRoot.innerHTML = `<style>${ls("core")}${ls(
                    "mathfield"
                  )}${ls(
                    "mathfield-element"
                  )}</style><span style="pointer-events:auto"></span><slot style="display:none"></slot>`),
              e && this._setOptions(e);
          }
          static get formAssociated() {
            return uh();
          }
          static get optionsAttributes() {
            return {
              "default-mode": "string",
              "letter-shape-style": "string",
              "min-font-scale": "number",
              "popover-policy": "string",
              "math-mode-space": "string",
              "read-only": "boolean",
              "remove-extraneous-parentheses": "on/off",
              "smart-fence": "on/off",
              "smart-mode": "on/off",
              "smart-superscript": "on/off",
              "inline-shortcut-timeout": "string",
              "script-depth": "string",
              "virtual-keyboard-target-origin": "string",
              "math-virtual-keyboard-policy": "string",
            };
          }
          static get observedAttributes() {
            return [
              ...Object.keys(this.optionsAttributes),
              "contenteditable",
              "disabled",
              "readonly",
              "read-only",
            ];
          }
          static get fontsDirectory() {
            return this._fontsDirectory;
          }
          static set fontsDirectory(e) {
            e !== this._fontsDirectory &&
              ((this._fontsDirectory = e),
              (async function () {
                (hc = "not-loaded"), pc();
              })());
          }
          static get soundsDirectory() {
            return this._soundsDirectory;
          }
          static set soundsDirectory(e) {
            (this._soundsDirectory = e), (this.audioBuffers = {});
          }
          static get keypressSound() {
            return this._keypressSound;
          }
          static set keypressSound(e) {
            var t, n, i;
            (this.audioBuffers = {}),
              null === e
                ? (this._keypressSound = {
                    spacebar: null,
                    return: null,
                    delete: null,
                    default: null,
                  })
                : "string" == typeof e
                ? (this._keypressSound = {
                    spacebar: e,
                    return: e,
                    delete: e,
                    default: e,
                  })
                : "object" == typeof e &&
                  "default" in e &&
                  (this._keypressSound = {
                    spacebar: null != (t = e.spacebar) ? t : e.default,
                    return: null != (n = e.return) ? n : e.default,
                    delete: null != (i = e.delete) ? i : e.default,
                    default: e.default,
                  });
          }
          static get plonkSound() {
            return this._plonkSound;
          }
          static set plonkSound(e) {
            (this.audioBuffers = {}), (this._plonkSound = e);
          }
          static get audioContext() {
            return (
              this._audioContext || (this._audioContext = new AudioContext()),
              this._audioContext
            );
          }
          static get speechEngine() {
            return this._speechEngine;
          }
          static set speechEngine(e) {
            this._speechEngine = e;
          }
          static get speechEngineRate() {
            return this._speechEngineRate;
          }
          static set speechEngineRate(e) {
            this._speechEngineRate = e;
          }
          static get speechEngineVoice() {
            return this._speechEngineVoice;
          }
          static set speechEngineVoice(e) {
            this._speechEngineVoice = e;
          }
          static get textToSpeechMarkup() {
            return this._textToSpeechMarkup;
          }
          static set textToSpeechMarkup(e) {
            this._textToSpeechMarkup = e;
          }
          static get textToSpeechRules() {
            return this._textToSpeechRules;
          }
          static set textToSpeechRules(e) {
            this._textToSpeechRules = e;
          }
          static get textToSpeechRulesOptions() {
            return this._textToSpeechRulesOptions;
          }
          static set textToSpeechRulesOptions(e) {
            this._textToSpeechRulesOptions = e;
          }
          static get locale() {
            return b.locale;
          }
          static set locale(e) {
            "auto" === e && (e = navigator.language.slice(0, 5)),
              (b.locale = e);
          }
          static get decimalSeparator() {
            return this._decimalSeparator;
          }
          static set decimalSeparator(e) {
            (this._decimalSeparator = e),
              this._computeEngine &&
                (this._computeEngine.latexOptions.decimalMarker =
                  "," === this.decimalSeparator ? "{,}" : ".");
          }
          static get strings() {
            return b.strings;
          }
          static set strings(e) {
            b.merge(e);
          }
          static get computeEngine() {
            var e, t;
            if (void 0 === this._computeEngine) {
              let t =
                null == (e = window[Symbol.for("io.cortexjs.compute-engine")])
                  ? void 0
                  : e.ComputeEngine;
              if (!t) return null;
              (this._computeEngine = new t()),
                this._computeEngine &&
                  "," === this.decimalSeparator &&
                  (this._computeEngine.latexOptions.decimalMarker = "{,}");
            }
            return null != (t = this._computeEngine) ? t : null;
          }
          static set computeEngine(e) {
            this._computeEngine = e;
          }
          static async loadSound(e) {
            delete this.audioBuffers[e];
            let t = "";
            switch (e) {
              case "keypress":
                t = this._keypressSound.default;
                break;
              case "return":
                t = this._keypressSound.return;
                break;
              case "spacebar":
                t = this._keypressSound.spacebar;
                break;
              case "delete":
                t = this._keypressSound.delete;
                break;
              case "plonk":
                t = this.plonkSound;
            }
            if ("string" != typeof t) return;
            t = t.trim();
            let n = this.soundsDirectory;
            if (null != n && "null" !== n && "none" !== t && "null" !== t)
              try {
                let i = await (
                    await fetch(await uc(`${n}/${t}`))
                  ).arrayBuffer(),
                  r = await this.audioContext.decodeAudioData(i);
                this.audioBuffers[e] = r;
              } catch (i) {}
          }
          static async playSound(e) {
            if (
              (("suspended" === this.audioContext.state ||
                "interrupted" === this.audioContext.state) &&
                (await this.audioContext.resume()),
              this.audioBuffers[e] || (await this.loadSound(e)),
              !this.audioBuffers[e])
            )
              return;
            let t = this.audioContext.createBufferSource();
            t.buffer = this.audioBuffers[e];
            let n = this.audioContext.createGain();
            (n.gain.value = 0.5),
              t.connect(n).connect(this.audioContext.destination),
              t.start();
          }
          onPointerDown() {
            window.addEventListener(
              "pointerup",
              (e) => {
                var t;
                e.target === this &&
                  (null == (t = this._mathfield) || !t.disabled) &&
                  this.dispatchEvent(
                    new MouseEvent("click", {
                      altKey: e.altKey,
                      button: e.button,
                      buttons: e.buttons,
                      clientX: e.clientX,
                      clientY: e.clientY,
                      ctrlKey: e.ctrlKey,
                      metaKey: e.metaKey,
                      movementX: e.movementX,
                      movementY: e.movementY,
                      relatedTarget: e.relatedTarget,
                      screenX: e.screenX,
                      screenY: e.screenY,
                      shiftKey: e.shiftKey,
                    })
                  );
              },
              { once: !0 }
            );
          }
          getPromptValue(e, t) {
            var n, i;
            return null !=
              (i =
                null == (n = this._mathfield) ? void 0 : n.getPromptValue(e, t))
              ? i
              : "";
          }
          getPrompts(e) {
            var t, n;
            return null !=
              (n = null == (t = this._mathfield) ? void 0 : t.getPrompts(e))
              ? n
              : [];
          }
          get form() {
            var e;
            return null == (e = this._internals) ? void 0 : e.form;
          }
          get name() {
            var e;
            return null != (e = this.getAttribute("name")) ? e : "";
          }
          get type() {
            return this.localName;
          }
          get mode() {
            var e, t;
            return null !=
              (t = null == (e = this._mathfield) ? void 0 : e.model.mode)
              ? t
              : "math";
          }
          set mode(e) {
            this._mathfield && (this._mathfield.model.mode = e);
          }
          get expression() {
            if (this._mathfield)
              return window[Symbol.for("io.cortexjs.compute-engine")]
                ? this._mathfield.expression
                : (console.error(
                    'MathLive 0.95.0: The CortexJS Compute Engine library is not available.\n        \n        Load the library, for example with:\n        \n        import "https://unpkg.com/@cortex-js/compute-engine?module"'
                  ),
                  null);
          }
          set expression(t) {
            var n, i;
            if (!this._mathfield) return;
            let r =
              null !=
              (i = null == (n = e.computeEngine) ? void 0 : n.box(t).latex)
                ? i
                : null;
            null !== r && this._mathfield.setValue(r),
              window[Symbol.for("io.cortexjs.compute-engine")] ||
                console.error(
                  'MathLive 0.95.0: The CortexJS Compute Engine library is not available.\n        \n        Load the library, for example with:\n        \n        import "https://unpkg.com/@cortex-js/compute-engine?module"'
                );
          }
          get errors() {
            var e, t;
            return null !=
              (t = null == (e = this._mathfield) ? void 0 : e.errors)
              ? t
              : [];
          }
          _getOptions(e) {
            return this._mathfield
              ? td(this._mathfield.options, e)
              : ah.has(this)
              ? d({}, td(d(d({}, nd()), ed(ah.get(this).options)), e))
              : null;
          }
          getOptions(e) {
            return (
              console.warn(
                "%cMathLive 0.95.0: %cDeprecated Usage%c\n      `mf.getOptions()` is deprecated. Read the property directly on the mathfield instead.\n      See https://cortexjs.io/mathlive/changelog/ for details.",
                "color:#12b; font-size: 1.1rem",
                "color:#db1111; font-size: 1.1rem",
                "color: inherit, font-size: 1rem"
              ),
              this._mathfield
                ? td(this._mathfield.options, e)
                : ah.has(this)
                ? td(d(d({}, nd()), ed(ah.get(this).options)), e)
                : null
            );
          }
          reflectAttributes() {
            let t = nd(),
              n = this._getOptions();
            Object.keys(e.optionsAttributes).forEach((i) => {
              let r = ch(i);
              "on/off" === e.optionsAttributes[i]
                ? t[r] !== n[r]
                  ? this.setAttribute(i, n[r] ? "on" : "off")
                  : this.removeAttribute(i)
                : t[r] !== n[r] &&
                  ("boolean" === e.optionsAttributes[i]
                    ? n[r]
                      ? this.setAttribute(i, "")
                      : this.removeAttribute(i)
                    : ("string" == typeof n[r] || "number" == typeof n[r]) &&
                      this.setAttribute(i, n[r].toString()));
            });
          }
          getOption(e) {
            return (
              console.warn(
                "%cMathLive 0.95.0: %cDeprecated Usage%c\n      `mf.getOption()` is deprecated. Read the property directly on the mathfield instead.\n      See https://cortexjs.io/mathlive/changelog/ for details.",
                "color:#12b; font-size: 1.1rem",
                "color:#db1111; font-size: 1.1rem",
                "color: inherit, font-size: 1rem"
              ),
              this._getOptions([e])[e]
            );
          }
          _getOption(e) {
            return this._getOptions([e])[e];
          }
          _setOptions(e) {
            if (this._mathfield) this._mathfield.setOptions(e);
            else if (ah.has(this)) {
              let t = d(d({}, ah.get(this).options), e);
              ah.set(
                this,
                u(d({}, ah.get(this)), {
                  selection: { ranges: t.readOnly ? [[0, 0]] : [[0, -1]] },
                  options: t,
                })
              );
            } else
              ah.set(this, {
                value: void 0,
                selection: { ranges: [[0, 0]] },
                options: e,
              });
            this.reflectAttributes();
          }
          setOptions(e) {
            console.group(
              "%cMathLive 0.95.0: %cDeprecated Usage",
              "color:#12b; font-size: 1.1rem",
              "color:#db1111; font-size: 1.1rem"
            ),
              console.warn(
                " `mf.setOptions()` is deprecated. Set the property directly on the mathfield instead.\n      See https://cortexjs.io/mathlive/changelog/ for details."
              );
            for (let t of Object.keys(e))
              oh[t] &&
                console.warn(`\`mf.setOptions({${t}:...})\` -> ${oh[t]}`);
            console.groupEnd(), this._setOptions(e);
          }
          executeCommand(e) {
            var t, n;
            return (
              null !=
                (n =
                  null == (t = this._mathfield)
                    ? void 0
                    : t.executeCommand(e)) && n
            );
          }
          getValue(e, t, n) {
            var i, r;
            if (this._mathfield) return this._mathfield.model.getValue(e, t, n);
            if (ah.has(this)) {
              let a, o, s;
              if (
                (od(e)
                  ? (([a, o] = e.ranges[0]), (s = t))
                  : ad(e)
                  ? (([a, o] = e), (s = t))
                  : rd(e) && rd(t)
                  ? ((a = e), (o = t), (s = n))
                  : ((a = 0), (o = -1), (s = e)),
                (void 0 === s || "latex" === s) && 0 === a && -1 === o)
              )
                return null !=
                  (r = null != (i = ah.get(this).value) ? i : this.textContent)
                  ? r
                  : "";
            }
            return "";
          }
          setValue(e, t) {
            if (this._mathfield && void 0 !== e)
              return (
                null != t || (t = { silenceNotifications: !0, mode: "math" }),
                void this._mathfield.setValue(e, t)
              );
            if (ah.has(this)) {
              let t = ah.get(this).options;
              return void ah.set(this, {
                value: e,
                selection: {
                  ranges: t.readOnly ? [[0, 0]] : [[0, -1]],
                  direction: "forward",
                },
                options: t,
              });
            }
            let n = dh(this);
            ah.set(this, {
              value: e,
              selection: {
                ranges: n.readOnly ? [[0, 0]] : [[0, -1]],
                direction: "forward",
              },
              options: n,
            });
          }
          hasFocus() {
            var e, t;
            return (
              null !=
                (t = null == (e = this._mathfield) ? void 0 : e.hasFocus()) && t
            );
          }
          focus() {
            var e;
            null == (e = this._mathfield) || e.focus();
          }
          blur() {
            var e;
            null == (e = this._mathfield) || e.blur();
          }
          select() {
            var e;
            null == (e = this._mathfield) || e.select();
          }
          insert(e, t) {
            var n, i;
            return (
              null !=
                (i = null == (n = this._mathfield) ? void 0 : n.insert(e, t)) &&
              i
            );
          }
          applyStyle(e, t) {
            var n;
            return null == (n = this._mathfield) ? void 0 : n.applyStyle(e, t);
          }
          get caretPoint() {
            var e, t;
            return null !=
              (t = null == (e = this._mathfield) ? void 0 : e.getCaretPoint())
              ? t
              : null;
          }
          set caretPoint(e) {
            var t;
            e && (null == (t = this._mathfield) || t.setCaretPoint(e.x, e.y));
          }
          setCaretPoint(e, t) {
            var n, i;
            return (
              null !=
                (i =
                  null == (n = this._mathfield)
                    ? void 0
                    : n.setCaretPoint(e, t)) && i
            );
          }
          offsetFromPoint(e, t, n) {
            return this._mathfield ? Pu(this._mathfield, e, t, n) : -1;
          }
          hitboxFromOffset(e) {
            if (!this._mathfield) return null;
            let t = this._mathfield.model.at(e);
            if (!t) return null;
            let n = ns(this._mathfield, t);
            return n
              ? new DOMRect(n.left, n.top, n.right - n.left, n.bottom - n.top)
              : null;
          }
          resetUndo() {
            var e;
            null == (e = this._mathfield) || e.resetUndo();
          }
          canUndo() {
            return !!this._mathfield && this._mathfield.canUndo();
          }
          canRedo() {
            return !!this._mathfield && this._mathfield.canRedo();
          }
          handleEvent(e) {
            var t, n;
            "pointerdown" === e.type && this.onPointerDown(),
              "focus" === e.type &&
                (null == (t = this._mathfield) || t.focus()),
              "blur" === e.type && (null == (n = this._mathfield) || n.blur());
          }
          connectedCallback() {
            var t, n, i;
            this.shadowRoot.host.addEventListener("pointerdown", this, !0),
              this.shadowRoot.host.addEventListener("focus", this, !0),
              this.shadowRoot.host.addEventListener("blur", this, !0),
              uh() ||
                (this.hasAttribute("role") || this.setAttribute("role", "math"),
                this.hasAttribute("aria-label") ||
                  this.setAttribute("aria-label", "math input field"),
                this.setAttribute("aria-multiline", "false")),
              this.hasAttribute("contenteditable") ||
                this.setAttribute("contenteditable", "true"),
              this.hasAttribute("tabindex") ||
                this.setAttribute("tabindex", "0");
            let r = this.shadowRoot.querySelector("slot:not([name])"),
              a = "";
            if (
              ((a = this.hasAttribute("value")
                ? null != (t = this.getAttribute("value"))
                  ? t
                  : ""
                : null !=
                  (n =
                    null == r
                      ? void 0
                      : r
                          .assignedNodes()
                          .map((e) => (3 === e.nodeType ? e.textContent : ""))
                          .join("")
                          .trim())
                ? n
                : ""),
              (this._mathfield = new (class {
                constructor(e, t) {
                  var n, i, r;
                  (this.focusBlurInProgress = !1),
                    (this.options = d(
                      u(d({}, nd()), { macros: Q(), registers: So() }),
                      ed(t)
                    )),
                    (this.eventController = new AbortController()),
                    t.eventSink && (this.host = t.eventSink),
                    (this.element = e),
                    (e.mathfield = this),
                    (this.blurred = !0),
                    (this.keystrokeCaptionVisible = !1),
                    (this.suggestionIndex = 0),
                    (this.inlineShortcutBuffer = []),
                    (this.inlineShortcutBufferFlushTimer = 0),
                    (this.style = {}),
                    (this.adoptStyle = "left"),
                    "inline-math" === this.options.defaultMode
                      ? this.element.classList.add("ML__is-inline")
                      : this.element.classList.remove("ML__is-inline"),
                    (this.dirty = !1);
                  let a =
                    null !=
                    (i = null != (n = t.value) ? n : this.element.textContent)
                      ? i
                      : "";
                  a = a.trim();
                  let o = id(this.options),
                    s = new Eo({
                      type: "root",
                      mode: o,
                      body: Zs(a, { context: this.context }),
                    });
                  (this.model = new (class {
                    constructor(e, t, n, i) {
                      (this.mathfield = e),
                        (this.mode = t),
                        (this.silenceNotifications = !1),
                        (this.listeners = i),
                        (this._selection = {
                          ranges: [[0, 0]],
                          direction: "none",
                        }),
                        (this._anchor = 0),
                        (this._position = 0),
                        (this.root = n);
                    }
                    dispose() {
                      (this.mathfield = void 0),
                        (this.listeners.onSelectionDidChange = void 0),
                        (this.listeners.onContentWillChange = void 0);
                    }
                    getState() {
                      let e = { ranges: [...this._selection.ranges] };
                      return (
                        this.selection.direction &&
                          "none" !== this.selection.direction &&
                          (e.direction = this.selection.direction),
                        {
                          content: this.root.toJson(),
                          selection: e,
                          mode: this.mode,
                        }
                      );
                    }
                    setState(e, t) {
                      var n;
                      let i = this.silenceNotifications;
                      this.silenceNotifications =
                        null ==
                          (n = null == t ? void 0 : t.silenceNotifications) ||
                        n;
                      let r = {};
                      if (
                        ("undo" === (null == t ? void 0 : t.type) &&
                          (r = { inputType: "historyUndo" }),
                        "redo" === (null == t ? void 0 : t.type) &&
                          (r = { inputType: "historyRedo" }),
                        Ul(this, r))
                      ) {
                        let t = this.silenceNotifications;
                        (this.silenceNotifications = !0),
                          (this.mode = e.mode),
                          (this.root = wl(e.content)),
                          (this.selection = e.selection),
                          (this.silenceNotifications = t),
                          Jl(this, r);
                      }
                      this.silenceNotifications = i;
                    }
                    get atoms() {
                      return this.root.children;
                    }
                    get selection() {
                      return this._selection;
                    }
                    set selection(e) {
                      this.setSelection(e);
                    }
                    setSelection(e, t) {
                      return (
                        !(
                          !this.mathfield.contentEditable &&
                          "none" === this.mathfield.userSelect
                        ) &&
                        this.deferNotifications({ selection: !0 }, () => {
                          var n, i, r;
                          let a = this.normalizeSelection(e, t);
                          if (void 0 === a)
                            throw new TypeError("Invalid selection");
                          if (
                            1 === a.ranges.length &&
                            a.ranges[0][0] === a.ranges[0][1]
                          ) {
                            let e = a.ranges[0][0];
                            return this.mathfield.dirty ||
                              (null != (n = this.at(e)) && n.parentPrompt) ||
                              !this.mathfield.hasEditablePrompts
                              ? ((this._anchor = e),
                                (this._position = e),
                                (this._selection = a),
                                !1)
                              : null != (i = this.at(e - 1)) && i.parentPrompt
                              ? ((this._anchor = this.normalizeOffset(e - 1)),
                                (this._position = this._anchor),
                                (this._selection = this.normalizeSelection(
                                  this._anchor
                                )),
                                !0)
                              : null != (r = this.at(e + 1)) && r.parentPrompt
                              ? ((this._anchor = this.normalizeOffset(e + 1)),
                                (this._position = this._anchor),
                                (this._selection = this.normalizeSelection(
                                  this._anchor
                                )),
                                !0)
                              : ((this._anchor = 0),
                                (this._position = 0),
                                (this._selection = { ranges: [[0, 0]] }),
                                !1);
                          }
                          let o = $o(a);
                          "backward" === a.direction
                            ? ([this._position, this._anchor] = o)
                            : ([this._anchor, this._position] = o);
                          let s = this.at(o[0] + 1),
                            l = this.at(o[1]),
                            c = Eo.commonAncestor(s, l);
                          return (
                            "array" === (null == c ? void 0 : c.type) &&
                              s.parent === c &&
                              l.parent,
                            (this._selection = {
                              ranges: [o],
                              direction: a.direction,
                            }),
                            this._position >= 0 &&
                              (this._position, this.lastOffset),
                            !1
                          );
                        })
                      );
                    }
                    setPositionHandlingPlaceholder(e) {
                      var t;
                      let n = this.at(e);
                      "placeholder" === (null == n ? void 0 : n.type)
                        ? this.setSelection(e - 1, e)
                        : "placeholder" ===
                          (null == (t = null == n ? void 0 : n.rightSibling)
                            ? void 0
                            : t.type)
                        ? this.setSelection(e, e + 1)
                        : (this.position = e),
                        n instanceof ol &&
                          n.isSuggestion &&
                          (n.isSuggestion = !1),
                        this.mathfield.stopCoalescingUndo();
                    }
                    get position() {
                      return this._position;
                    }
                    set position(e) {
                      this.setSelection(e, e);
                    }
                    get anchor() {
                      return this._anchor;
                    }
                    get selectionIsCollapsed() {
                      return this._anchor === this._position;
                    }
                    get selectionIsPlaceholder() {
                      return (
                        1 === Math.abs(this._anchor - this._position) &&
                        "placeholder" ===
                          this.at(Math.max(this._anchor, this._position)).type
                      );
                    }
                    collapseSelection(e = "forward") {
                      return (
                        this._anchor !== this._position &&
                        ((this.position =
                          "backward" === e
                            ? Math.min(this._anchor, this._position)
                            : Math.max(this._anchor, this._position)),
                        !0)
                      );
                    }
                    get lastOffset() {
                      return this.atoms.length - 1;
                    }
                    at(e) {
                      return this.atoms[e];
                    }
                    offsetOf(e) {
                      return this.atoms.indexOf(e);
                    }
                    getSiblingsRange(e) {
                      let t = this.at(e),
                        { parent: n } = t;
                      if (!n) return [0, this.lastOffset];
                      let i = t.parent.branch(t.parentBranch);
                      return [
                        this.offsetOf(i[0]),
                        this.offsetOf(i[i.length - 1]),
                      ];
                    }
                    getBranchRange(e, t) {
                      let n = this.at(e).branch(t);
                      return [
                        this.offsetOf(n[0]),
                        this.offsetOf(n[n.length - 1]),
                      ];
                    }
                    getAtoms(e, t, n) {
                      let i,
                        r,
                        a = null != n ? n : {};
                      if (od(e)) {
                        if (((a = null != t ? t : {}), e.ranges.length > 1))
                          return e.ranges.reduce(
                            (e, t) => [...e, ...this.getAtoms(t, a)],
                            []
                          );
                        e = e.ranges[0];
                      }
                      if (rd(e)) {
                        if (((i = e), !rd(t))) return [];
                        r = t;
                      } else ([i, r] = e), (a = null != t ? t : {});
                      if (!Number.isFinite(i)) return [];
                      void 0 === a.includeChildren && (a.includeChildren = !1),
                        i < 0 && (i = this.lastOffset - i + 1),
                        r < 0 && (r = this.lastOffset - r + 1);
                      let o = Math.min(i, r) + 1,
                        s = Math.max(i, r);
                      if (
                        !a.includeChildren &&
                        1 === o &&
                        s === this.lastOffset
                      )
                        return [this.root];
                      let l = [];
                      for (let c = o; c <= s; c++) {
                        let e = this.atoms[c];
                        Td(this, e, o, s) && l.push(e);
                      }
                      return (
                        a.includeChildren ||
                          (l = l.filter((e) => {
                            let t = !1,
                              { parent: n } = e;
                            for (; n && !t; )
                              (t = Td(this, n, o, s)), (n = n.parent);
                            return !t;
                          })),
                        l
                      );
                    }
                    getAllAtoms(e = 0) {
                      let t = [],
                        n = this.lastOffset;
                      for (let i = e; i <= n; i++) t.push(this.atoms[i]);
                      for (let i = 0; i < e; i++) t.push(this.atoms[i]);
                      return t;
                    }
                    findAtom(e, t = 0, n = "forward") {
                      let i,
                        r = this.lastOffset;
                      if ("forward" !== n) {
                        for (let n = t; n >= 0; n--)
                          if (((i = this.atoms[n]), e(i))) return i;
                        for (let n = r; n > t; n--)
                          if (((i = this.atoms[n]), e(i))) return i;
                      } else {
                        for (let n = t; n <= r; n++)
                          if (((i = this.atoms[n]), e(i))) return i;
                        for (let n = 0; n < t; n++)
                          if (((i = this.atoms[n]), e(i))) return i;
                      }
                    }
                    extractAtoms(e) {
                      let t = this.getAtoms(e);
                      if (1 === t.length && !t[0].parent) {
                        if ("root" !== t[0].type)
                          return (
                            (t = this.root.cells.flat()),
                            (this.root = new Eo({ type: "root", body: [] })),
                            t
                          );
                        (t = [...t[0].body]), t.shift();
                      }
                      for (let n of t) n.parent.removeChild(n);
                      return t;
                    }
                    deleteAtoms(e) {
                      this.extractAtoms(e), (this.position = e[0]);
                    }
                    atomToString(e, t) {
                      let n = null != t ? t : "latex";
                      if (n.startsWith("latex"))
                        return Eo.serialize([e], {
                          expandMacro: "latex-expanded" === n,
                          skipStyles: "latex-unstyled" === n,
                          defaultMode: this.mathfield.options.defaultMode,
                        });
                      if ("math-ml" === n) return gd(e);
                      if ("spoken" === n) return Ad(e);
                      if ("spoken-text" === n) {
                        let t = window.MathfieldElement.textToSpeechMarkup;
                        window.MathfieldElement.textToSpeechMarkup = "";
                        let n = Ad(e);
                        return (
                          (window.MathfieldElement.textToSpeechMarkup = t), n
                        );
                      }
                      if (
                        "spoken-ssml" === n ||
                        "spoken-ssml-with-highlighting" === n
                      ) {
                        let t = window.MathfieldElement.textToSpeechMarkup;
                        window.MathfieldElement.textToSpeechMarkup = "ssml";
                        let n = Ad(e);
                        return (
                          (window.MathfieldElement.textToSpeechMarkup = t), n
                        );
                      }
                      return "ascii-math" === n
                        ? _d(e)
                        : (console.error(
                            `MathLive 0.95.0: Unexpected format "${n}`
                          ),
                          "");
                    }
                    getValue(e, t, i) {
                      if (void 0 === e)
                        return this.atomToString(this.root, "latex");
                      if ("string" == typeof e && "math-json" !== e)
                        return this.atomToString(this.root, e);
                      let r, a;
                      if (
                        (rd(e) && rd(t)
                          ? ((r = [this.normalizeRange([e, t])]),
                            (a = null != i ? i : "latex"))
                          : ad(e)
                          ? ((r = [this.normalizeRange(e)]), (a = t))
                          : od(e)
                          ? ((r = e.ranges), (a = t))
                          : ((r = [this.normalizeRange([0, -1])]),
                            (a = null != e ? e : "latex")),
                        "math-json" === a)
                      ) {
                        if (!window.MathfieldElement.computeEngine)
                          return (
                            window[Symbol.for("io.cortexjs.compute-engine")] ||
                              console.error(
                                'The CortexJS Compute Engine library is not available.\nLoad the library, for example with:\nimport "https://unpkg.com/@cortex-js/compute-engine?module"'
                              ),
                            '["Error", "compute-engine-not-available"]'
                          );
                        let e = this.getValue({ ranges: r }, "latex-unstyled");
                        try {
                          let t =
                            window.MathfieldElement.computeEngine.parse(e);
                          return JSON.stringify(t.json);
                        } catch (n) {
                          return JSON.stringify(["Error", `'${n.toString()}'`]);
                        }
                      }
                      if (a.startsWith("latex")) {
                        let e = {
                          expandMacro: "latex-expanded" === a,
                          skipStyles: "latex-unstyled" === a,
                          defaultMode: this.mathfield.options.defaultMode,
                        };
                        return Ja(
                          r.map((t) => Eo.serialize(this.getAtoms(t), e))
                        );
                      }
                      return r
                        .map((e) =>
                          this.getAtoms(e)
                            .map((e) => this.atomToString(e, a))
                            .join("")
                        )
                        .join("");
                    }
                    extendSelectionTo(e, t) {
                      return (
                        !(
                          !this.mathfield.contentEditable &&
                          "none" === this.mathfield.userSelect
                        ) &&
                        this.deferNotifications({ selection: !0 }, () => {
                          let n = this.normalizeRange([e, t]),
                            [i, r] = n,
                            { parent: a } = this.at(r);
                          if (
                            a &&
                            ("genfrac" === a.type || "subsup" === a.type)
                          )
                            for (; a !== this.root && Bd(this, a, [i, r]); )
                              (r = this.offsetOf(a)), (a = a.parent);
                          for (
                            a = this.at(i).parent;
                            a !== this.root && Bd(this, a, [i, r]);

                          )
                            (i = this.offsetOf(a.leftSibling)), (a = a.parent);
                          if (
                            ((a = this.at(r).parent),
                            "genfrac" === (null == a ? void 0 : a.type))
                          )
                            for (; a !== this.root && Bd(this, a, [i, r]); )
                              (r = this.offsetOf(a)), (a = a.parent);
                          (this._position = this.normalizeOffset(t)),
                            (this._selection = {
                              ranges: [[i, r]],
                              direction: "none",
                            });
                        })
                      );
                    }
                    announce(e, t, n = []) {
                      var i, r;
                      (null ==
                        (r =
                          null == (i = this.mathfield.host)
                            ? void 0
                            : i.dispatchEvent(
                                new CustomEvent("announce", {
                                  detail: {
                                    command: e,
                                    previousPosition: t,
                                    atoms: n,
                                  },
                                  cancelable: !0,
                                  bubbles: !0,
                                  composed: !0,
                                })
                              )) ||
                        r) &&
                        Dd(this.mathfield, e, t, n);
                    }
                    deferNotifications(e, t) {
                      let n = this._selection,
                        i = this._anchor,
                        r = this._position,
                        a = this.silenceNotifications;
                      this.silenceNotifications = !0;
                      let o = this.root.changeCounter;
                      t();
                      let s = this.root.changeCounter !== o,
                        l =
                          i !== this._anchor ||
                          r !== this._position ||
                          "different" ===
                            (function (e, t) {
                              if (e.direction === t.direction) {
                                let n = e.ranges.length;
                                if (t.ranges.length === n) {
                                  let i = 0;
                                  for (
                                    ;
                                    i < n &&
                                    "equal" === Bo(e.ranges[i], t.ranges[i]);

                                  )
                                    i++;
                                  return i === n ? "equal" : "different";
                                }
                              }
                              return "different";
                            })(this._selection, n);
                      return (
                        (this.silenceNotifications = a),
                        e.content && s && Jl(this, { inputType: e.type }),
                        e.selection && l && Wl(this),
                        s || l
                      );
                    }
                    normalizeOffset(e) {
                      return (
                        e > 0
                          ? (e = Math.min(e, this.lastOffset))
                          : e < 0 && (e = this.lastOffset + e + 1),
                        e
                      );
                    }
                    normalizeRange(e) {
                      let [t, n] = e;
                      return (
                        (t = this.normalizeOffset(t)),
                        (n = this.normalizeOffset(n)),
                        t < n ? [t, n] : [n, t]
                      );
                    }
                    normalizeSelection(e, t) {
                      var n;
                      let i;
                      if (rd(e)) {
                        let n = this.normalizeOffset(e);
                        if (rd(t)) {
                          let e = this.normalizeOffset(t);
                          i =
                            n <= e
                              ? { ranges: [[n, e]], direction: "none" }
                              : { ranges: [[e, n]], direction: "backward" };
                        } else i = { ranges: [[n, n]], direction: "none" };
                      } else if (ad(e)) {
                        let t = this.normalizeOffset(e[0]),
                          n = this.normalizeOffset(e[1]);
                        i =
                          t <= n
                            ? { ranges: [[t, n]], direction: "none" }
                            : { ranges: [[n, t]], direction: "backward" };
                      } else
                        od(e) &&
                          (i = {
                            ranges: e.ranges.map((e) => this.normalizeRange(e)),
                            direction: null != (n = e.direction) ? n : "none",
                          });
                      return i;
                    }
                    get parentEnvironment() {
                      let e = this.at(this.position).parent;
                      if (e) {
                        for (; e.parent && "array" !== e.type; ) e = e.parent;
                        if ("array" === e.type) return e;
                      }
                    }
                  })(this, o, s, {
                    onSelectionDidChange: () => this.onSelectionDidChange(),
                    onContentWillChange: (e) => this.onContentWillChange(e),
                  })),
                    (this.smartModeSuppressed = !1),
                    (this.undoManager = new iu(this.model));
                  let l = [];
                  var c;
                  l.push(
                    "<span contenteditable=true aria-multiline=false part=keyboard-sink class=ML__keyboard-sink autocapitalize=off autocomplete=off autocorrect=off spellcheck=false inputmode=none tabindex=0></span>"
                  ),
                    l.push(
                      '<span part=container class=ML__container aria-hidden=true  style="visibility:hidden">'
                    ),
                    l.push("<span part=content class=ML__content>"),
                    l.push(yc(this)),
                    l.push("</span>"),
                    window.mathVirtualKeyboard &&
                      (l.push(
                        `<div part=virtual-keyboard-toggle class=ML__virtual-keyboard-toggle role=button ${
                          this.hasEditableContent ? "" : 'style="display:none;"'
                        }data-ML__tooltip="${v(
                          "tooltip.toggle virtual keyboard"
                        )}">`
                      ),
                      l.push(
                        '<svg style="width: 21px;" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 576 512"><path d="M528 64H48C21.49 64 0 85.49 0 112v288c0 26.51 21.49 48 48 48h480c26.51 0 48-21.49 48-48V112c0-26.51-21.49-48-48-48zm16 336c0 8.823-7.177 16-16 16H48c-8.823 0-16-7.177-16-16V112c0-8.823 7.177-16 16-16h480c8.823 0 16 7.177 16 16v288zM168 268v-24c0-6.627-5.373-12-12-12h-24c-6.627 0-12 5.373-12 12v24c0 6.627 5.373 12 12 12h24c6.627 0 12-5.373 12-12zm96 0v-24c0-6.627-5.373-12-12-12h-24c-6.627 0-12 5.373-12 12v24c0 6.627 5.373 12 12 12h24c6.627 0 12-5.373 12-12zm96 0v-24c0-6.627-5.373-12-12-12h-24c-6.627 0-12 5.373-12 12v24c0 6.627 5.373 12 12 12h24c6.627 0 12-5.373 12-12zm96 0v-24c0-6.627-5.373-12-12-12h-24c-6.627 0-12 5.373-12 12v24c0 6.627 5.373 12 12 12h24c6.627 0 12-5.373 12-12zm-336 80v-24c0-6.627-5.373-12-12-12H84c-6.627 0-12 5.373-12 12v24c0 6.627 5.373 12 12 12h24c6.627 0 12-5.373 12-12zm384 0v-24c0-6.627-5.373-12-12-12h-24c-6.627 0-12 5.373-12 12v24c0 6.627 5.373 12 12 12h24c6.627 0 12-5.373 12-12zM120 188v-24c0-6.627-5.373-12-12-12H84c-6.627 0-12 5.373-12 12v24c0 6.627 5.373 12 12 12h24c6.627 0 12-5.373 12-12zm96 0v-24c0-6.627-5.373-12-12-12h-24c-6.627 0-12 5.373-12 12v24c0 6.627 5.373 12 12 12h24c6.627 0 12-5.373 12-12zm96 0v-24c0-6.627-5.373-12-12-12h-24c-6.627 0-12 5.373-12 12v24c0 6.627 5.373 12 12 12h24c6.627 0 12-5.373 12-12zm96 0v-24c0-6.627-5.373-12-12-12h-24c-6.627 0-12 5.373-12 12v24c0 6.627 5.373 12 12 12h24c6.627 0 12-5.373 12-12zm96 0v-24c0-6.627-5.373-12-12-12h-24c-6.627 0-12 5.373-12 12v24c0 6.627 5.373 12 12 12h24c6.627 0 12-5.373 12-12zm-96 152v-8c0-6.627-5.373-12-12-12H180c-6.627 0-12 5.373-12 12v8c0 6.627 5.373 12 12 12h216c6.627 0 12-5.373 12-12z"/></svg>'
                      ),
                      l.push("</div>")),
                    l.push("</span>"),
                    l.push("<span class=ML__sr-only>"),
                    l.push(
                      "<span role=status aria-live=assertive aria-atomic=true></span>"
                    ),
                    l.push("</span>"),
                    (this.element.innerHTML =
                      window.MathfieldElement.createHTML(l.join(""))),
                    this.element.children
                      ? ((this.field =
                          this.element.querySelector("[part=content]")),
                        this.field.addEventListener(
                          "click",
                          (e) => e.stopImmediatePropagation(),
                          { capture: !1, signal: this.eventController.signal }
                        ),
                        this.field.addEventListener("wheel", this, {
                          passive: !1,
                          signal: this.eventController.signal,
                        }),
                        "PointerEvent" in window
                          ? this.field.addEventListener("pointerdown", this, {
                              signal: this.eventController.signal,
                            })
                          : this.field.addEventListener("mousedown", this, {
                              signal: this.eventController.signal,
                            }),
                        null ==
                          (r = this.element.querySelector(
                            "[part=virtual-keyboard-toggle]"
                          )) ||
                          r.addEventListener(
                            "click",
                            () => {
                              window.mathVirtualKeyboard.visible
                                ? window.mathVirtualKeyboard.hide()
                                : (window.mathVirtualKeyboard.show({
                                    animate: !0,
                                  }),
                                  window.mathVirtualKeyboard.update(Hl(this)));
                            },
                            { signal: this.eventController.signal }
                          ),
                        (this.ariaLiveText =
                          this.element.querySelector("[role=status]")),
                        (this.keyboardDelegate = eu(
                          this.element.querySelector(".ML__keyboard-sink"),
                          this.element,
                          this
                        )),
                        window.addEventListener("resize", this, {
                          signal: this.eventController.signal,
                        }),
                        document.addEventListener("scroll", this, {
                          signal: this.eventController.signal,
                        }),
                        window.mathVirtualKeyboard.addEventListener(
                          "virtual-keyboard-toggle",
                          this
                        ),
                        Tl &&
                          !b.locale.startsWith(Tl.locale) &&
                          ((c = b.locale),
                          (Tl = Pl.find((e) => c.startsWith(e.locale)))),
                        "ready" !== hc &&
                          document.fonts.ready.then(() => bc(this)),
                        e
                          .querySelector(".ML__container")
                          .style.removeProperty("visibility"),
                        this.undoManager.startRecording(),
                        this.undoManager.snapshot("set-value"))
                      : console.error(
                          "%cMathLive 0.95.0: Something went wrong and the mathfield could not be created.%c\nIf you are using Vue, this may be because you are using the runtime-only build of Vue. Make sure to include `runtimeCompiler: true` in your Vue configuration. There may a warning from Vue in the log above.",
                          "color:red;font-family:system-ui;font-size:1.2rem;font-weight:bold",
                          "color:inherit;font-family:system-ui;font-size:inherit;font-weight:inherit"
                        );
                }
                connectToVirtualKeyboard() {
                  this.connectedToVirtualKeyboard ||
                    ((this.connectedToVirtualKeyboard = !0),
                    window.addEventListener("message", this, {
                      signal: this.eventController.signal,
                    }),
                    window.mathVirtualKeyboard.connect(),
                    window.mathVirtualKeyboard.visible &&
                      window.mathVirtualKeyboard.update(Hl(this)),
                    Gu(this));
                }
                disconnectFromVirtualKeyboard() {
                  this.connectedToVirtualKeyboard &&
                    (window.removeEventListener("message", this),
                    window.mathVirtualKeyboard.disconnect(),
                    (this.connectedToVirtualKeyboard = !1),
                    Xu());
                }
                get colorMap() {
                  return (e) => {
                    var t, n, i;
                    return null !=
                      (i =
                        null == (n = (t = this.options).colorMap)
                          ? void 0
                          : n.call(t, e))
                      ? i
                      : L(e);
                  };
                }
                get backgroundColorMap() {
                  return (e) => {
                    var t, n, i, r, a, o;
                    return null !=
                      (o =
                        null !=
                        (a =
                          null == (n = (t = this.options).backgroundColorMap)
                            ? void 0
                            : n.call(t, e))
                          ? a
                          : null == (r = (i = this.options).colorMap)
                          ? void 0
                          : r.call(i, e))
                      ? o
                      : C(e);
                  };
                }
                get smartFence() {
                  var e;
                  return null != (e = this.options.smartFence) && e;
                }
                get readOnly() {
                  var e;
                  return null != (e = this.options.readOnly) && e;
                }
                get disabled() {
                  var e, t;
                  return (
                    null !=
                      (t = null == (e = this.host) ? void 0 : e.disabled) && t
                  );
                }
                get contentEditable() {
                  var e;
                  return (
                    "false" !==
                    (null == (e = this.host)
                      ? void 0
                      : e.getAttribute("contenteditable"))
                  );
                }
                get userSelect() {
                  if (!this.host) return "";
                  let e = getComputedStyle(this.host);
                  return (
                    e.getPropertyValue("user-select") ||
                    e.getPropertyValue("-webkit-user-select")
                  );
                }
                get hasEditableContent() {
                  return (
                    !(this.disabled || !this.contentEditable) &&
                    (!this.readOnly || this.hasEditablePrompts)
                  );
                }
                get hasEditablePrompts() {
                  return (
                    this.readOnly &&
                    !this.disabled &&
                    this.contentEditable &&
                    void 0 !==
                      this.model.findAtom(
                        (e) => "prompt" === e.type && !e.locked
                      )
                  );
                }
                get isSelectionEditable() {
                  if (this.disabled || !this.contentEditable) return !1;
                  if (!this.readOnly) return !0;
                  let e = this.model.at(this.model.anchor),
                    t = this.model.at(this.model.position),
                    n = Eo.commonAncestor(e, t);
                  return !!(
                    "prompt" === (null == n ? void 0 : n.type) ||
                    (null != n && n.parentPrompt)
                  );
                }
                get letterShapeStyle() {
                  var e;
                  return null != (e = this.options.letterShapeStyle)
                    ? e
                    : "tex";
                }
                get minFontScale() {
                  return this.options.minFontScale;
                }
                get selectionStyle() {
                  if (this.model.selectionIsCollapsed) {
                    let e = this.model.at(this.model.selection.ranges[0][0]),
                      t = "right" === this.adoptStyle ? e.rightSibling : e;
                    if (!t) return {};
                    if ("group" === t.type) {
                      let e = t.branch("body");
                      return !e || e.length < 2
                        ? {}
                        : "right" === this.adoptStyle
                        ? e[1].style
                        : e[e.length - 1].style;
                    }
                    return t.style;
                  }
                  let e = this.model.getAtoms(this.model.selection);
                  if (0 === e.length) return {};
                  let t = d({}, e[0].style);
                  return (
                    e.forEach((e) => {
                      for (let [n, i] of Object.entries(e.style))
                        (!t[n] || t[n] !== i) && (t[n] = void 0);
                    }),
                    t
                  );
                }
                get keybindings() {
                  var e, t;
                  if (this._keybindings) return this._keybindings;
                  let [i, r] = (function (e, t) {
                    let i = [],
                      r = [];
                    for (let a of e)
                      try {
                        let e = Vl(a, t);
                        if (e) {
                          let n = i.filter(
                            (t) => t.key === e.key && t.ifMode === e.ifMode
                          );
                          if (n.length > 0)
                            throw new Error(
                              `Ambiguous key binding ${a.key} (${jl(
                                a.command
                              )}) matches ${n[0].key} (${jl(
                                n[0].command
                              )}) with the ${t.displayName} keyboard layout`
                            );
                          i.push(e);
                        }
                      } catch (n) {
                        n instanceof Error && r.push(n.message);
                      }
                    return [i, r];
                  })(this.options.keybindings, null != (e = Nl()) ? e : Bl);
                  return (
                    (null == (t = Nl()) ? void 0 : t.score) > 0 &&
                      ((this._keybindings = i),
                      r.length > 0 &&
                        console.error(
                          "MathLive 0.95.0: Invalid keybindings for current keyboard layout",
                          r
                        )),
                    i
                  );
                }
                setOptions(e) {
                  (this.options = d(d({}, this.options), ed(e))),
                    (this._keybindings = void 0),
                    "inline-math" === this.options.defaultMode
                      ? this.element.classList.add("ML__is-inline")
                      : this.element.classList.remove("ML__is-inline"),
                    this.options.readOnly &&
                      this.hasFocus() &&
                      window.mathVirtualKeyboard.visible &&
                      this.executeCommand("hideVirtualKeyboard");
                  let t = Eo.serialize([this.model.root], {
                    expandMacro: !1,
                    defaultMode: this.options.defaultMode,
                  });
                  ("macros" in e || this.model.getValue() !== t) &&
                    Wo.insert(this.model, t, {
                      insertionMode: "replaceAll",
                      selectionMode: "after",
                      format: "latex",
                      silenceNotifications: !0,
                      mode: "math",
                    }),
                    ("value" in e ||
                      "macros" in e ||
                      "registers" in e ||
                      "colorMap" in e ||
                      "backgroundColorMap" in e ||
                      "letterShapeStyle" in e ||
                      "minFontScale" in e ||
                      "readOnly" in e ||
                      "placeholderSymbol" in e) &&
                      fc(this);
                }
                getOptions(e) {
                  return td(this.options, e);
                }
                getOption(e) {
                  return td(this.options, e);
                }
                handleEvent(e) {
                  var t;
                  if (Zo(this)) {
                    if (Sc(e)) {
                      if (
                        !rs(
                          e.origin,
                          null != (t = this.options.originValidator)
                            ? t
                            : "none"
                        )
                      )
                        throw new DOMException(
                          `Message from unknown origin (${e.origin}) cannot be handled`,
                          "SecurityError"
                        );
                      let { action: n } = e.data;
                      if ("execute-command" === n) {
                        let t = e.data.command;
                        if ("virtual-keyboard" === kc(t)) return;
                        this.executeCommand(t);
                      } else
                        "update-state" === n ||
                          ("focus" === n
                            ? this.focus({ preventScroll: !0 })
                            : "blur" === n && this.blur());
                      return;
                    }
                    switch (e.type) {
                      case "focus":
                        this.onFocus();
                        break;
                      case "blur":
                        this.onBlur();
                        break;
                      case "mousedown":
                      case "pointerdown":
                        Du(this, e);
                        break;
                      case "virtual-keyboard-toggle":
                        this.hasFocus() && Gu(this);
                        break;
                      case "resize":
                      case "scroll":
                        this.geometryChangeTimer &&
                          cancelAnimationFrame(this.geometryChangeTimer),
                          (this.geometryChangeTimer = requestAnimationFrame(
                            () => Zo(this) && this.onGeometryChange()
                          ));
                        break;
                      case "wheel":
                        this.onWheel(e);
                        break;
                      default:
                        console.warn("Unexpected event type", e.type);
                    }
                  }
                }
                dispose() {
                  Zo(this) &&
                    (this.keyboardDelegate.dispose(),
                    (this.keyboardDelegate = void 0),
                    this.eventController.abort(),
                    window.mathVirtualKeyboard.removeEventListener(
                      "virtual-keyboard-toggle",
                      this
                    ),
                    this.disconnectFromVirtualKeyboard(),
                    this.model.dispose(),
                    delete this.element.mathfield,
                    (this.element = void 0),
                    (this.host = void 0),
                    (this.field = void 0),
                    (this.fieldContent = void 0),
                    (this.ariaLiveText = void 0),
                    document.getElementById(
                      "mathlive-keystroke-caption-panel"
                    ) &&
                      (nc("mathlive-keystroke-caption-panel"),
                      us("core"),
                      us("keystroke-caption")),
                    document.getElementById("mathlive-suggestion-popover") &&
                      (nc("mathlive-suggestion-popover"),
                      us("suggestion-popover"),
                      us("core")),
                    document.getElementById("mathlive-environment-popover") &&
                      (nc("mathlive-environment-popover"),
                      us("environment-popover"),
                      us("core")));
                }
                flushInlineShortcutBuffer(e) {
                  if ((null != e || (e = { defer: !1 }), !e.defer))
                    return (
                      (this.inlineShortcutBuffer = []),
                      clearTimeout(this.inlineShortcutBufferFlushTimer),
                      void (this.inlineShortcutBufferFlushTimer = 0)
                    );
                  this.options.inlineShortcutTimeout > 0 &&
                    (clearTimeout(this.inlineShortcutBufferFlushTimer),
                    (this.inlineShortcutBufferFlushTimer = setTimeout(
                      () => this.flushInlineShortcutBuffer(),
                      this.options.inlineShortcutTimeout
                    )));
                }
                executeCommand(e) {
                  return "virtual-keyboard" === kc(e)
                    ? (this.focus({ preventScroll: !0 }),
                      window.mathVirtualKeyboard.executeCommand(e),
                      requestAnimationFrame(() =>
                        window.mathVirtualKeyboard.update(Hl(this))
                      ),
                      !1)
                    : (function (e, t) {
                        var n;
                        if (!t) return !1;
                        let i,
                          r = [],
                          a = !1,
                          o = !1;
                        m(t) ? ((i = t[0]), (r = t.slice(1))) : (i = t),
                          (i = i.replace(/-\w/g, (e) => e[1].toUpperCase()));
                        let s = vc[i],
                          l = null == s ? void 0 : s.target;
                        if ("model" === l) {
                          if (
                            !e.isSelectionEditable &&
                            null != s &&
                            s.changeContent
                          )
                            return e.model.announce("plonk"), !1;
                          /^(delete|add)/.test(i) &&
                            ("deleteBackward" !== i &&
                              e.flushInlineShortcutBuffer(),
                            e.snapshot(i)),
                            /^complete/.test(i) || Zl(e),
                            vc[i].fn(e.model, ...r),
                            Yl(e),
                            (o = !0),
                            (a = !0);
                        } else if ("virtual-keyboard" === l)
                          (o =
                            null !=
                              (n =
                                window.mathVirtualKeyboard.executeCommand(t)) &&
                            n),
                            (a = !0);
                        else {
                          if (!vc[i]) throw new Error(`Unknown command "${i}"`);
                          if (
                            !e.isSelectionEditable &&
                            null != s &&
                            s.changeContent
                          )
                            return e.model.announce("plonk"), !1;
                          /^(undo|redo)/.test(i) &&
                            e.flushInlineShortcutBuffer(),
                            (o = vc[i].fn(e, ...r)),
                            (a = !0);
                        }
                        return (
                          "virtual-keyboard" !== l &&
                            (!e.model.selectionIsCollapsed ||
                              (null != s && s.changeSelection)) &&
                            (e.flushInlineShortcutBuffer(),
                            (null != s && s.changeContent) ||
                              e.stopCoalescingUndo(),
                            (e.style = {})),
                          o && fc(e),
                          a
                        );
                      })(this, e);
                }
                get errors() {
                  return Ys(this.model.getValue(), { context: this.context });
                }
                getValue(e, t, n) {
                  return this.model.getValue(e, t, n);
                }
                setValue(e, t) {
                  var n;
                  void 0 ===
                    (t = null != t ? t : { mode: "math" }).insertionMode &&
                    (t.insertionMode = "replaceAll"),
                    (void 0 === t.format || "auto" === t.format) &&
                      (t.format = "latex"),
                    (void 0 === t.mode || "auto" === t.mode) &&
                      (t.mode =
                        null != (n = Jd(this.model, this.model.position))
                          ? n
                          : "math"),
                    Wo.insert(this.model, e, t) &&
                      (fc(this), this.undoManager.snapshot("set-value"));
                }
                get expression() {
                  let e = window.MathfieldElement.computeEngine;
                  return e
                    ? e.box(e.parse(this.model.getValue("latex-unstyled")))
                    : (console.error(
                        "MathLive 0.95.0:  no compute engine available. Make sure the Compute Engine library is loaded."
                      ),
                      null);
                }
                scrollIntoView() {
                  var e;
                  if (!this.element) return;
                  if (this.host)
                    if (this.options.onScrollIntoView)
                      this.options.onScrollIntoView(this);
                    else if (
                      (this.host.scrollIntoView({
                        block: "nearest",
                        inline: "nearest",
                      }),
                      window.mathVirtualKeyboard.visible &&
                        window.mathVirtualKeyboard.container ===
                          window.document.body)
                    ) {
                      let t = window.mathVirtualKeyboard.boundingRect,
                        n = this.host.getBoundingClientRect();
                      n.bottom > t.top &&
                        (null == (e = window.document.scrollingElement) ||
                          e.scrollBy(0, n.bottom - t.top + 8));
                    }
                  this.dirty && gc(this, { interactive: !0 });
                  let t = this.field.getBoundingClientRect(),
                    n = null;
                  if (this.model.selectionIsCollapsed) n = Yo(this.field);
                  else {
                    let e = is(this);
                    if (e.length > 0) {
                      let i = -1 / 0,
                        r = -1 / 0;
                      for (let t of e)
                        t.right > i && (i = t.right), t.top < r && (r = t.top);
                      n = {
                        x: i + t.left - this.field.scrollLeft,
                        y: r + t.top - this.field.scrollTop,
                        height: 0,
                      };
                    }
                  }
                  if (this.host && n) {
                    let e = this.host.getBoundingClientRect(),
                      t = n.y,
                      i = this.host.scrollTop;
                    t < e.top
                      ? (i = t - e.top + this.host.scrollTop)
                      : t > e.bottom &&
                        (i = t - e.bottom + this.host.scrollTop + n.height),
                      this.host.scroll({ top: i, left: 0 });
                  }
                  if (n) {
                    let e = n.x - window.scrollX,
                      i = this.field.scrollLeft;
                    e < t.left
                      ? (i = e - t.left + this.field.scrollLeft - 20)
                      : e > t.right &&
                        (i = e - t.right + this.field.scrollLeft + 20),
                      this.field.scroll({ top: this.field.scrollTop, left: i });
                  }
                }
                insert(e, t) {
                  if (
                    "string" != typeof e ||
                    (0 === e.length &&
                      ("insertBefore" ===
                        (null == t ? void 0 : t.insertionMode) ||
                        "insertAfter" ===
                          (null == t ? void 0 : t.insertionMode))) ||
                    (0 === e.length && this.model.selectionIsCollapsed)
                  )
                    return !1;
                  if (
                    (this.flushInlineShortcutBuffer(),
                    (t = null != t ? t : { mode: "math" }).focus &&
                      this.focus(),
                    t.feedback &&
                      (window.MathfieldElement.keypressVibration &&
                        y() &&
                        navigator.vibrate(3),
                      window.MathfieldElement.playSound("keypress")),
                    "\\\\" === e)
                  )
                    Id(this.model);
                  else if ("&" === e) Vd(this.model);
                  else {
                    let n = this.style;
                    this.model.selectionIsCollapsed
                      ? Wo.insert(
                          this.model,
                          e,
                          d(
                            {
                              style: this.model.at(this.model.position)
                                .computedStyle,
                            },
                            t
                          )
                        )
                      : Wo.insert(this.model, e, t),
                      t.resetStyle && (this.style = n);
                  }
                  return (
                    this.snapshot(
                      `insert-${this.model.at(this.model.position).type}`
                    ),
                    fc(this),
                    t.scrollIntoView && this.scrollIntoView(),
                    !0
                  );
                }
                switchMode(e, t = "", n = "") {
                  var i;
                  if (
                    this.model.mode === e ||
                    !this.hasEditableContent ||
                    !this.contentEditable ||
                    this.disabled ||
                    null == (i = this.host) ||
                    !i.dispatchEvent(
                      new Event("mode-change", {
                        bubbles: !0,
                        composed: !0,
                        cancelable: !0,
                      })
                    )
                  )
                    return;
                  let r = this.model.mode,
                    { model: a } = this;
                  a.deferNotifications(
                    { content: !!n || !!t, selection: !0, type: "insertText" },
                    () => {
                      let i = !1;
                      if (
                        (this.flushInlineShortcutBuffer(),
                        this.stopCoalescingUndo(),
                        (this.smartModeSuppressed =
                          /text|math/.test(this.model.mode) &&
                          /text|math/.test(e)),
                        t && "latex" !== e)
                      ) {
                        let n = Zs(t, { context: this.context, parseMode: e });
                        a.collapseSelection("forward");
                        let r = a.at(a.position);
                        (a.position = a.offsetOf(
                          r.parent.addChildrenAfter(n, r)
                        )),
                          (i = !0);
                      }
                      if (((this.model.mode = e), "latex" === e)) {
                        let e = a.selectionIsCollapsed;
                        ec(this, "accept");
                        let n,
                          i = a.at(a.position);
                        if (e) n = "\\";
                        else {
                          let r = $o(a.selection);
                          n = this.model.getValue(r, "latex");
                          let o = this.model.extractAtoms(r);
                          1 === o.length &&
                            "placeholder" === o[0].type &&
                            ((n = t), (e = !0)),
                            (i = a.at(r[0]));
                        }
                        let r = new sl(n);
                        i.parent.addChildAfter(r, i),
                          e
                            ? (a.position = a.offsetOf(r.lastChild))
                            : a.setSelection(
                                a.offsetOf(r.firstChild),
                                a.offsetOf(r.lastChild)
                              );
                      } else
                        Xl(a).forEach((e) => {
                          e.isError = !1;
                        });
                      if (n) {
                        let e = Zs(n, { context: this.context, parseMode: r });
                        a.collapseSelection("forward");
                        let t = a.at(a.position);
                        (a.position = a.offsetOf(
                          t.parent.addChildrenAfter(e, t)
                        )),
                          (i = !0);
                      }
                      return (
                        fc(this),
                        this.undoManager.snapshot(
                          "latex" === e ? "insert-latex" : "insert"
                        ),
                        i
                      );
                    }
                  ),
                    (this.model.mode = e);
                }
                hasFocus() {
                  return !this.blurred;
                }
                focus(e) {
                  this.hasFocus() ||
                    (this.keyboardDelegate.focus(),
                    this.connectToVirtualKeyboard(),
                    this.model.announce("line")),
                    (null != e && e.preventScroll) || this.scrollIntoView();
                }
                blur() {
                  this.disconnectFromVirtualKeyboard(),
                    this.hasFocus() && this.keyboardDelegate.blur();
                }
                select() {
                  this.model.selection = {
                    ranges: [[0, this.model.lastOffset]],
                  };
                }
                applyStyle(e, t = {}) {
                  var n, i;
                  let r = { operation: "set", silenceNotifications: !1 };
                  ad(t)
                    ? (r.range = t)
                    : ((r.range = t.range),
                      (r.silenceNotifications =
                        null != (n = t.silenceNotifications) && n));
                  let a = Cu(this, e),
                    o = null != (i = r.operation) ? i : "set";
                  this.model.deferNotifications(
                    { content: !r.silenceNotifications, type: "insertText" },
                    () => {
                      if (void 0 === r.range)
                        for (let e of this.model.selection.ranges)
                          Gd(this.model, e, a, { operation: o });
                      else Gd(this.model, r.range, a, { operation: o });
                    }
                  ),
                    fc(this);
                }
                getCaretPoint() {
                  let e = Yo(this.field);
                  return e ? { x: e.x, y: e.y } : null;
                }
                setCaretPoint(e, t) {
                  let n = Pu(this, e, t, { bias: 0 });
                  if (n < 0) return !1;
                  let i = this.model.position;
                  return (
                    (this.model.position = n),
                    this.model.announce("move", i),
                    fc(this),
                    !0
                  );
                }
                getPrompt(e) {
                  return this.model.findAtom(
                    (t) => "prompt" === t.type && t.placeholderId === e
                  );
                }
                getPromptValue(e, t) {
                  let n = this.getPrompt(e);
                  if (!n)
                    return (
                      console.error(`MathLive 0.95.0: unknown prompt ${e}`), ""
                    );
                  let i = this.model.offsetOf(n.firstChild),
                    r = this.model.offsetOf(n.lastChild);
                  return this.model.getValue(i, r, t);
                }
                getPrompts(e) {
                  return this.model
                    .getAllAtoms()
                    .filter(
                      (t) =>
                        "prompt" === t.type &&
                        (!e ||
                          !(
                            (e.id && t.placeholderId !== e.id) ||
                            (e.locked && t.locked !== e.locked) ||
                            ("undefined" === e.correctness && t.correctness) ||
                            (e.correctness && t.correctness !== e.correctness)
                          ))
                    )
                    .map((e) => e.placeholderId);
                }
                setPromptValue(e, t, n) {
                  if (void 0 !== t) {
                    let i = this.getPrompt(e);
                    if (!i)
                      return void console.error(
                        `MathLive 0.95.0: unknown prompt ${e}`
                      );
                    let r = this.model.getBranchRange(
                      this.model.offsetOf(i),
                      "body"
                    );
                    this.model.setSelection(r),
                      this.insert(
                        t,
                        u(d({}, n), { insertionMode: "replaceSelection" })
                      );
                  }
                  null != n &&
                    n.silenceNotifications &&
                    (this.valueOnFocus = this.getValue()),
                    fc(this);
                }
                setPromptState(e, t, n) {
                  let i = this.getPrompt(e);
                  i
                    ? ("undefined" === t
                        ? (i.correctness = void 0)
                        : "string" == typeof t && (i.correctness = t),
                      "boolean" == typeof n &&
                        ((i.locked = n), (i.captureSelection = n)),
                      fc(this))
                    : console.error(`MathLive 0.95.0: unknown prompt ${e}`);
                }
                stripPromptContent(e) {
                  let t = this.model
                      .getAllAtoms()
                      .filter(
                        (t) =>
                          "prompt" === t.type &&
                          (!e ||
                            !(
                              (e.id && t.placeholderId !== e.id) ||
                              (e.locked && t.locked !== e.locked) ||
                              ("undefined" === e.correctness &&
                                t.correctness) ||
                              (e.correctness && t.correctness !== e.correctness)
                            ))
                      ),
                    n = {};
                  return (
                    t.forEach((e) => {
                      let t = e.placeholderId;
                      (n[t] = this.getPromptValue(t)),
                        this.setPromptValue(t, "");
                    }),
                    n
                  );
                }
                getPromptState(e) {
                  let t = this.getPrompt(e);
                  return t
                    ? [t.correctness, t.locked]
                    : (console.error(`MathLive 0.95.0: unknown prompt ${e}`),
                      [void 0, !0]);
                }
                canUndo() {
                  return this.undoManager.canUndo();
                }
                canRedo() {
                  return this.undoManager.canRedo();
                }
                popUndoStack() {
                  this.undoManager.pop();
                }
                snapshot(e) {
                  var t;
                  this.undoManager.snapshot(e) &&
                    (window.mathVirtualKeyboard.visible &&
                      window.mathVirtualKeyboard.update(Hl(this)),
                    null == (t = this.host) ||
                      t.dispatchEvent(
                        new CustomEvent("undo-state-change", {
                          bubbles: !0,
                          composed: !0,
                          detail: { type: "snapshot" },
                        })
                      ));
                }
                stopCoalescingUndo() {
                  this.undoManager.stopCoalescing(this.model.selection);
                }
                stopRecording() {
                  this.undoManager.stopRecording();
                }
                startRecording() {
                  this.undoManager.startRecording();
                }
                undo() {
                  var e;
                  this.undoManager.undo() &&
                    (window.mathVirtualKeyboard.visible &&
                      window.mathVirtualKeyboard.update(Hl(this)),
                    null == (e = this.host) ||
                      e.dispatchEvent(
                        new CustomEvent("undo-state-change", {
                          bubbles: !0,
                          composed: !0,
                          detail: { type: "undo" },
                        })
                      ));
                }
                redo() {
                  var e;
                  this.undoManager.redo() &&
                    (window.mathVirtualKeyboard.visible &&
                      window.mathVirtualKeyboard.update(Hl(this)),
                    null == (e = this.host) ||
                      e.dispatchEvent(
                        new CustomEvent("undo-state-change", {
                          bubbles: !0,
                          composed: !0,
                          detail: { type: "undo" },
                        })
                      ));
                }
                resetUndo() {
                  var e;
                  null == (e = this.undoManager) || e.reset();
                }
                onSelectionDidChange() {
                  var e, t;
                  let n = this.model;
                  this.keyboardDelegate.setValue(
                    n.getValue(this.model.selection, "latex-expanded")
                  );
                  {
                    let t = n.at(n.position),
                      i = null != (e = t.mode) ? e : id(this.options);
                    this.model.mode !== i &&
                      ("latex" === this.model.mode
                        ? (ec(this, "accept", { mode: i }),
                          (n.position = n.offsetOf(t)))
                        : this.switchMode(i));
                  }
                  null == (t = this.host) ||
                    t.dispatchEvent(
                      new Event("selection-change", {
                        bubbles: !0,
                        composed: !0,
                      })
                    ),
                    window.mathVirtualKeyboard.visible &&
                      window.mathVirtualKeyboard.update(Hl(this)),
                    Gu(this);
                }
                onContentWillChange(e) {
                  var t, n, i;
                  return (
                    null ==
                      (i =
                        null == (n = this.host)
                          ? void 0
                          : n.dispatchEvent(
                              new InputEvent(
                                "beforeinput",
                                u(d({}, e), {
                                  data: e.data
                                    ? e.data
                                    : null != (t = e.inputType)
                                    ? t
                                    : "",
                                  cancelable: !0,
                                  bubbles: !0,
                                  composed: !0,
                                })
                              )
                            )) || i
                  );
                }
                onFocus() {
                  this.focusBlurInProgress ||
                    !this.blurred ||
                    ((this.focusBlurInProgress = !0),
                    (this.blurred = !1),
                    this.keyboardDelegate.focus(),
                    this.stopCoalescingUndo(),
                    gc(this, { interactive: !0 }),
                    (this.valueOnFocus = this.model.getValue()),
                    this.hasEditablePrompts &&
                      !this.model.at(this.model.anchor).parentPrompt &&
                      this.executeCommand("moveToNextPlaceholder"),
                    (this.focusBlurInProgress = !1));
                }
                onBlur() {
                  var e, t, n;
                  if (this.focusBlurInProgress || this.blurred) return;
                  (this.focusBlurInProgress = !0),
                    this.stopCoalescingUndo(),
                    (this.blurred = !0),
                    (this.ariaLiveText.textContent = ""),
                    ec(this, "accept"),
                    this.model.getValue() !== this.valueOnFocus &&
                      (null == (e = this.host) ||
                        e.dispatchEvent(
                          new Event("change", { bubbles: !0, composed: !0 })
                        )),
                    this.disconnectFromVirtualKeyboard(),
                    null == (t = this.host) ||
                      t.dispatchEvent(
                        new Event("blur", { bubbles: !1, composed: !0 })
                      ),
                    null == (n = this.host) ||
                      n.dispatchEvent(
                        new UIEvent("focusout", { bubbles: !0, composed: !0 })
                      ),
                    fc(this),
                    (this.focusBlurInProgress = !1),
                    Xu();
                  let i = new AbortController(),
                    r = i.signal;
                  document.addEventListener(
                    "visibilitychange",
                    () => {
                      "hidden" === document.visibilityState &&
                        document.addEventListener(
                          "visibilitychange",
                          () => {
                            Zo(this) &&
                              "visible" === document.visibilityState &&
                              this.focus({ preventScroll: !0 });
                          },
                          { once: !0 }
                        );
                    },
                    { once: !0, signal: r }
                  ),
                    setTimeout(() => i.abort(), 100);
                }
                onInput(e) {
                  bu(this, e);
                }
                onKeystroke(e, t) {
                  return gu(this, e, t);
                }
                onCompositionStart(e) {
                  this.model.deleteAtoms($o(this.model.selection));
                  let t = Yo(this.field);
                  t &&
                    requestAnimationFrame(() => {
                      gc(this),
                        this.keyboardDelegate.moveTo(t.x, t.y - t.height);
                    });
                }
                onCompositionUpdate(e) {
                  (function (e, t) {
                    let n = e.at(e.position);
                    if ("composition" === n.type) n.value = t;
                    else {
                      let { caret: i } = n;
                      n.caret = void 0;
                      let r = new qs(t, { mode: n.mode });
                      (r.caret = i),
                        n.parent.addChildAfter(r, n),
                        (e.position += 1);
                    }
                  })(this.model, e),
                    fc(this);
                }
                onCompositionEnd(e) {
                  (function (e) {
                    let t = e.at(e.position);
                    "composition" === t.type &&
                      (t.parent.removeChild(t), (e.position -= 1));
                  })(this.model),
                    bu(this, e, { simulateKeystroke: !0 });
                }
                onCut(e) {
                  this.isSelectionEditable
                    ? Ul(this.model, { inputType: "deleteByCut" }) &&
                      (this.stopCoalescingUndo(),
                      Wo.onCopy(this, e),
                      Ud(this.model, $o(this.model.selection), "deleteByCut"),
                      this.snapshot("cut"),
                      fc(this))
                    : this.model.announce("plonk");
                }
                onCopy(e) {
                  Wo.onCopy(this, e);
                }
                onPaste(e) {
                  let t = this.isSelectionEditable;
                  return (
                    t &&
                      (t = Wo.onPaste(
                        this.model.at(this.model.position).mode,
                        this,
                        e.clipboardData
                      )),
                    t || this.model.announce("plonk"),
                    e.preventDefault(),
                    e.stopPropagation(),
                    t
                  );
                }
                onGeometryChange() {
                  ac(this), Gu(this);
                }
                onWheel(e) {
                  let t = 5 * e.deltaX;
                  if (!Number.isFinite(t) || 0 === t) return;
                  let n = this.field;
                  (t < 0 && 0 === n.scrollLeft) ||
                    (t > 0 && n.offsetWidth + n.scrollLeft >= n.scrollWidth) ||
                    (n.scrollBy({ top: 0, left: t }),
                    e.preventDefault(),
                    e.stopPropagation());
                }
                getHTMLElement(e) {
                  let t = e;
                  for (; !t.id && t.hasChildren; ) t = e.children[0];
                  return this.fieldContent.querySelector(
                    `[data-atom-id="${t.id}"]`
                  );
                }
                get context() {
                  var e, t;
                  return {
                    registers: null != (e = this.options.registers) ? e : {},
                    smartFence: this.smartFence,
                    letterShapeStyle: this.letterShapeStyle,
                    minFontScale: this.minFontScale,
                    placeholderSymbol:
                      null != (t = this.options.placeholderSymbol)
                        ? t
                        : "\u25a2",
                    colorMap: (e) => this.colorMap(e),
                    backgroundColorMap: (e) => this.backgroundColorMap(e),
                    getMacro: (e) => ie(e, this.options.macros),
                    atomIdsSettings: { seed: "random", groupNumbers: !1 },
                  };
                }
              })(
                this.shadowRoot.querySelector(":host > span"),
                u(d({}, ah.has(this) ? ah.get(this).options : dh(this)), {
                  eventSink: this,
                  value: a,
                })
              )),
              !ah.has(this))
            ) {
              this.upgradeProperty("disabled"),
                this.upgradeProperty("readonly");
              for (let t of Object.keys(e.optionsAttributes))
                this.upgradeProperty(ch(t));
            }
            null != (i = this._mathfield) && i.model
              ? (ah.has(this) &&
                  this._mathfield.model.deferNotifications(
                    { content: !1, selection: !1 },
                    () => {
                      let e = ah.get(this).value;
                      void 0 !== e && this._mathfield.setValue(e),
                        (this._mathfield.model.selection =
                          ah.get(this).selection),
                        ah.delete(this);
                    }
                  ),
                window.queueMicrotask(() => {
                  this.isConnected &&
                    this.dispatchEvent(
                      new Event("mount", {
                        cancelable: !1,
                        bubbles: !0,
                        composed: !0,
                      })
                    );
                }),
                pc())
              : (this._mathfield = null);
          }
          disconnectedCallback() {
            if (
              (this.shadowRoot.host.removeEventListener(
                "pointerdown",
                this,
                !0
              ),
              !this._mathfield)
            )
              return;
            window.queueMicrotask(() =>
              this.dispatchEvent(
                new Event("unmount", {
                  cancelable: !1,
                  bubbles: !0,
                  composed: !0,
                })
              )
            );
            let t = td(
              this._mathfield.options,
              Object.keys(e.optionsAttributes).map((e) => ch(e))
            );
            ah.set(this, {
              value: this._mathfield.getValue(),
              selection: this._mathfield.model.selection,
              options: t,
            }),
              this._mathfield.dispose(),
              (this._mathfield = null);
          }
          upgradeProperty(e) {
            if (this.hasOwnProperty(e)) {
              let t = this[e];
              delete this[e],
                ("readonly" === e || "read-only" === e) && (e = "readOnly"),
                (this[e] = t);
            }
          }
          attributeChangedCallback(e, t, n) {
            if (t === n) return;
            let i = null !== n;
            switch (e) {
              case "contenteditable":
                this._mathfield && fc(this._mathfield);
                break;
              case "disabled":
                this.disabled = i;
                break;
              case "read-only":
              case "readonly":
                this.readOnly = i;
            }
          }
          get readonly() {
            return (
              this.hasAttribute("readonly") || this.hasAttribute("read-only")
            );
          }
          set readonly(e) {
            let t = !!e;
            t
              ? (this.setAttribute("readonly", ""),
                uh()
                  ? (this._internals.ariaReadOnly = "true")
                  : this.setAttribute("aria-readonly", "true"),
                this.setAttribute("aria-readonly", "true"))
              : (uh()
                  ? (this._internals.ariaReadOnly = "false")
                  : this.removeAttribute("aria-readonly"),
                this.removeAttribute("readonly"),
                this.removeAttribute("read-only")),
              this._setOptions({ readOnly: t });
          }
          get disabled() {
            return this.hasAttribute("disabled");
          }
          set disabled(e) {
            var t;
            let n = !!e;
            n
              ? this.setAttribute("disabled", "")
              : this.removeAttribute("disabled"),
              uh()
                ? (this._internals.ariaDisabled = n ? "true" : "false")
                : this.setAttribute("aria-disabled", n ? "true" : "false"),
              n &&
                null != (t = this._mathfield) &&
                t.hasFocus &&
                window.mathVirtualKeyboard.visible &&
                this._mathfield.executeCommand("hideVirtualKeyboard");
          }
          get value() {
            return this.getValue();
          }
          set value(e) {
            this.setValue(e);
          }
          get defaultMode() {
            return this._getOption("defaultMode");
          }
          set defaultMode(e) {
            this._setOptions({ defaultMode: e });
          }
          get macros() {
            return this._getOption("macros");
          }
          set macros(e) {
            this._setOptions({ macros: e });
          }
          get registers() {
            return this._getOption("registers");
          }
          set registers(e) {
            this._setOptions({ registers: e });
          }
          get colorMap() {
            return this._getOption("colorMap");
          }
          set colorMap(e) {
            this._setOptions({ colorMap: e });
          }
          get backgroundColorMap() {
            return this._getOption("backgroundColorMap");
          }
          set backgroundColorMap(e) {
            this._setOptions({ backgroundColorMap: e });
          }
          get letterShapeStyle() {
            return this._getOption("letterShapeStyle");
          }
          set letterShapeStyle(e) {
            this._setOptions({ letterShapeStyle: e });
          }
          get minFontScale() {
            return this._getOption("minFontScale");
          }
          set minFontScale(e) {
            this._setOptions({ minFontScale: e });
          }
          get smartMode() {
            return this._getOption("smartMode");
          }
          set smartMode(e) {
            this._setOptions({ smartMode: e });
          }
          get smartFence() {
            return this._getOption("smartFence");
          }
          set smartFence(e) {
            this._setOptions({ smartFence: e });
          }
          get smartSuperscript() {
            return this._getOption("smartSuperscript");
          }
          set smartSuperscript(e) {
            this._setOptions({ smartSuperscript: e });
          }
          get scriptDepth() {
            return this._getOption("scriptDepth");
          }
          set scriptDepth(e) {
            this._setOptions({ scriptDepth: e });
          }
          get removeExtraneousParentheses() {
            return this._getOption("removeExtraneousParentheses");
          }
          set removeExtraneousParentheses(e) {
            this._setOptions({ removeExtraneousParentheses: e });
          }
          get mathModeSpace() {
            return this._getOption("mathModeSpace");
          }
          set mathModeSpace(e) {
            this._setOptions({ mathModeSpace: e });
          }
          get placeholderSymbol() {
            return this._getOption("placeholderSymbol");
          }
          set placeholderSymbol(e) {
            this._setOptions({ placeholderSymbol: e });
          }
          get popoverPolicy() {
            return this._getOption("popoverPolicy");
          }
          set popoverPolicy(e) {
            this._setOptions({ popoverPolicy: e });
          }
          get environmentPopoverPolicy() {
            return this._getOption("environmentPopoverPolicy");
          }
          set environmentPopoverPolicy(e) {
            this._setOptions({ environmentPopoverPolicy: e });
          }
          get mathVirtualKeyboardPolicy() {
            return this._getOption("mathVirtualKeyboardPolicy");
          }
          set mathVirtualKeyboardPolicy(e) {
            this._setOptions({ mathVirtualKeyboardPolicy: e });
          }
          get inlineShortcuts() {
            return this._getOption("inlineShortcuts");
          }
          set inlineShortcuts(e) {
            this._setOptions({ inlineShortcuts: e });
          }
          get inlineShortcutTimeout() {
            return this._getOption("inlineShortcutTimeout");
          }
          set inlineShortcutTimeout(e) {
            this._setOptions({ inlineShortcutTimeout: e });
          }
          get keybindings() {
            return this._getOption("keybindings");
          }
          set keybindings(e) {
            this._setOptions({ keybindings: e });
          }
          get onInlineShortcut() {
            return this._getOption("onInlineShortcut");
          }
          set onInlineShortcut(e) {
            this._setOptions({ onInlineShortcut: e });
          }
          get onScrollIntoView() {
            return this._getOption("onScrollIntoView");
          }
          set onScrollIntoView(e) {
            this._setOptions({ onScrollIntoView: e });
          }
          get onExport() {
            return this._getOption("onExport");
          }
          set onExport(e) {
            this._setOptions({ onExport: e });
          }
          get readOnly() {
            return this._getOption("readOnly");
          }
          set readOnly(e) {
            this._setOptions({ readOnly: e });
          }
          get isSelectionEditable() {
            var e, t;
            return (
              null !=
                (t =
                  null == (e = this._mathfield)
                    ? void 0
                    : e.isSelectionEditable) && t
            );
          }
          setPromptState(e, t, n) {
            var i;
            null == (i = this._mathfield) || i.setPromptState(e, t, n);
          }
          getPromptState(e) {
            var t, n;
            return null !=
              (n = null == (t = this._mathfield) ? void 0 : t.getPromptState(e))
              ? n
              : [void 0, !0];
          }
          setPromptContent(e, t, n) {
            var i;
            null == (i = this._mathfield) || i.setPromptValue(e, t, n);
          }
          stripPromptContent(e) {
            var t, n;
            return null !=
              (n =
                null == (t = this._mathfield)
                  ? void 0
                  : t.stripPromptContent(e))
              ? n
              : {};
          }
          get virtualKeyboardTargetOrigin() {
            return this._getOption("virtualKeyboardTargetOrigin");
          }
          set virtualKeyboardTargetOrigin(e) {
            this._setOptions({ virtualKeyboardTargetOrigin: e });
          }
          get selection() {
            return this._mathfield
              ? this._mathfield.model.selection
              : ah.has(this)
              ? ah.get(this).selection
              : { ranges: [[0, 0]], direction: "forward" };
          }
          set selection(e) {
            "number" == typeof e && (e = { ranges: [[e, e]] }),
              this._mathfield
                ? (this._mathfield.model.selection = e)
                : ah.has(this)
                ? ah.set(this, u(d({}, ah.get(this)), { selection: e }))
                : ah.set(this, {
                    value: void 0,
                    selection: e,
                    options: dh(this),
                  });
          }
          get selectionIsCollapsed() {
            let e = this.selection;
            return 1 === e.ranges.length && e.ranges[0][0] === e.ranges[0][1];
          }
          get position() {
            return this._mathfield
              ? this._mathfield.model.position
              : ah.has(this)
              ? ah.get(this).selection.ranges[0][0]
              : 0;
          }
          set position(e) {
            this._mathfield && (this._mathfield.model.position = e),
              ah.has(this)
                ? ah.set(
                    this,
                    u(d({}, ah.get(this)), { selection: { ranges: [[e, e]] } })
                  )
                : ah.set(this, {
                    value: void 0,
                    selection: { ranges: [[e, e]] },
                    options: dh(this),
                  });
          }
          getOffsetDepth(e) {
            var t;
            return this._mathfield
              ? (null == (t = this._mathfield.model.at(e))
                  ? void 0
                  : t.treeDepth) - 2
              : 0;
          }
          get lastOffset() {
            var e, t;
            return null !=
              (t = null == (e = this._mathfield) ? void 0 : e.model.lastOffset)
              ? t
              : -1;
          }
        };
      (sh.version = "0.95.0"),
        (sh._fontsDirectory = "./fonts"),
        (sh._soundsDirectory = "./sounds"),
        (sh.keypressVibration = !0),
        (sh._keypressSound = {
          spacebar: "keypress-spacebar.wav",
          return: "keypress-return.wav",
          delete: "keypress-delete.wav",
          default: "keypress-standard.wav",
        }),
        (sh._plonkSound = "plonk.wav"),
        (sh.audioBuffers = {}),
        (sh.createHTML = (e) => e),
        (sh._speechEngineRate = "100%"),
        (sh._speechEngineVoice = "Joanna"),
        (sh._textToSpeechMarkup = ""),
        (sh._textToSpeechRules = "mathlive"),
        (sh._textToSpeechRulesOptions = {}),
        (sh.speakHook = function (e) {
          var t, n;
          if (f())
            if (
              window.MathfieldElement.speechEngine &&
              "local" !== window.MathfieldElement.speechEngine
            )
              if ("amazon" === window.MathfieldElement.speechEngine)
                if ("AWS" in window) {
                  let i = new window.AWS.Polly({ apiVersion: "2016-06-10" }),
                    r = {
                      OutputFormat: "mp3",
                      VoiceId:
                        null != (t = window.MathfieldElement.speechEngineVoice)
                          ? t
                          : "Joanna",
                      Engine: [
                        "Amy",
                        "Emma",
                        "Brian",
                        "Ivy",
                        "Joanna",
                        "Kendra",
                        "Kimberly",
                        "Salli",
                        "Joey",
                        "Justin",
                        "Matthew",
                      ].includes(
                        null != (n = window.MathfieldElement.speechEngineVoice)
                          ? n
                          : "Joanna"
                      )
                        ? "neural"
                        : "standard",
                      Text: e,
                      TextType: "ssml",
                    };
                  i.synthesizeSpeech(r, (e, t) => {
                    if (e)
                      console.trace(
                        `MathLive 0.95.0: \`polly.synthesizeSpeech()\` error: ${e}`
                      );
                    else if (null != t && t.AudioStream) {
                      let e = new Uint8Array(t.AudioStream),
                        n = new Blob([e.buffer], { type: "audio/mpeg" }),
                        i = URL.createObjectURL(n);
                      new Audio(i).play().catch((e) => console.log(e));
                    }
                  });
                } else
                  console.error(
                    "MathLive 0.95.0: AWS SDK not loaded. See https://www.npmjs.com/package/aws-sdk"
                  );
              else
                "google" === window.MathfieldElement.speechEngine &&
                  console.error(
                    "MathLive 0.95.0: The Google speech engine is not supported yet. Please come again."
                  );
            else {
              let t = new SpeechSynthesisUtterance(e);
              window.speechSynthesis.speak(t);
            }
        }),
        (sh.readAloudHook = function (e, t) {
          var n;
          if (!f()) return;
          if ("amazon" !== window.MathfieldElement.speechEngine)
            return (
              console.error(
                "MathLive 0.95.0: Use Amazon TTS Engine for synchronized highlighting"
              ),
              void (
                "function" == typeof window.MathfieldElement.speakHook &&
                window.MathfieldElement.speakHook(t)
              )
            );
          if (!window.AWS)
            return void console.error(
              "MathLive 0.95.0: AWS SDK not loaded. See https://www.npmjs.com/package/aws-sdk"
            );
          let i = new window.AWS.Polly({ apiVersion: "2016-06-10" }),
            r = {
              OutputFormat: "json",
              VoiceId:
                null != (n = window.MathfieldElement.speechEngineVoice)
                  ? n
                  : "Joanna",
              Engine: "standard",
              Text: t,
              TextType: "ssml",
              SpeechMarkTypes: ["ssml"],
            };
          (yh().readAloudElement = e),
            i.synthesizeSpeech(r, (e, n) => {
              if (e)
                return void console.trace(
                  `MathLive 0.95.0: \`polly.synthesizeSpeech()\` error: ${e}`
                );
              if (null == n || !n.AudioStream) return;
              let a = new TextDecoder("utf-8").decode(
                new Uint8Array(n.AudioStream)
              );
              (yh().readAloudMarks = a
                .split("\n")
                .map((e) => (e ? JSON.parse(e) : {}))),
                (yh().readAloudTokens = []);
              for (let t of yh().readAloudMarks)
                t.value && yh().readAloudTokens.push(t.value);
              (yh().readAloudCurrentMark = ""),
                (r.OutputFormat = "mp3"),
                (r.SpeechMarkTypes = []),
                i.synthesizeSpeech(r, (e, n) => {
                  if (e)
                    return void console.trace(
                      `MathLive 0.95.0: \`polly.synthesizeSpeech("${t}") error:${e}`
                    );
                  if (null == n || !n.AudioStream) return;
                  let i = new Uint8Array(n.AudioStream),
                    r = new Blob([i.buffer], { type: "audio/mpeg" }),
                    a = URL.createObjectURL(r),
                    o = yh();
                  o.readAloudAudio
                    ? o.readAloudAudio.pause()
                    : ((o.readAloudAudio = new Audio()),
                      o.readAloudAudio.addEventListener("ended", () => {
                        let e = o.readAloudMathField;
                        (o.readAloudStatus = "ended"),
                          document.body.dispatchEvent(
                            new Event("read-aloud-status-change", {
                              bubbles: !0,
                              composed: !0,
                            })
                          ),
                          e
                            ? (gc(e),
                              (o.readAloudElement = null),
                              (o.readAloudMathField = null),
                              (o.readAloudTokens = []),
                              (o.readAloudMarks = []),
                              (o.readAloudCurrentMark = ""))
                            : ih(o.readAloudElement);
                      }),
                      o.readAloudAudio.addEventListener("timeupdate", () => {
                        let e = "",
                          t = 1e3 * o.readAloudAudio.currentTime + 100;
                        for (let n of o.readAloudMarks)
                          n.time < t && (e = n.value);
                        o.readAloudCurrentMark !== e &&
                          ((o.readAloudCurrentToken = e),
                          e && e === o.readAloudFinalToken
                            ? o.readAloudAudio.pause()
                            : ((o.readAloudCurrentMark = e),
                              rh(o.readAloudElement, o.readAloudCurrentMark)));
                      })),
                    (o.readAloudAudio.src = a),
                    (o.readAloudStatus = "playing"),
                    document.body.dispatchEvent(
                      new Event("read-aloud-status-change", {
                        bubbles: !0,
                        composed: !0,
                      })
                    ),
                    o.readAloudAudio.play();
                });
            });
        }),
        (sh._decimalSeparator = "."),
        (sh.fractionNavigationOrder = "numerator-denominator");
      var lh = sh;
      function ch(e) {
        return e.replace(/[^a-zA-Z\d]+(.)/g, (e, t) => t.toUpperCase());
      }
      function dh(e) {
        let t = { readOnly: !1 },
          n = lh.optionsAttributes;
        return (
          Object.keys(n).forEach((i) => {
            if (e.hasAttribute(i)) {
              let r = e.getAttribute(i);
              "boolean" === n[i]
                ? (t[ch(i)] = !0)
                : "on/off" === n[i]
                ? (t[ch(i)] = "on" === r || ("off" !== r && void 0))
                : "number" === n[i]
                ? (t[ch(i)] = Number.parseFloat(null != r ? r : "0"))
                : (t[ch(i)] = r);
            }
          }),
          t
        );
      }
      function uh() {
        return !(
          !("ElementInternals" in window) ||
          !HTMLElement.prototype.attachInternals ||
          !("role" in window.ElementInternals.prototype)
        );
      }
      var hh,
        ph,
        mh,
        fh = lh;
      if (
        f() &&
        (null == (hh = window.customElements) || !hh.get("math-field"))
      ) {
        null != window[(ph = Symbol.for("io.cortexjs.mathlive"))] ||
          (window[ph] = {}),
          (window[Symbol.for("io.cortexjs.mathlive")].version = "0.95.0"),
          (window.MathfieldElement = lh),
          null == (mh = window.customElements) || mh.define("math-field", lh);
      }
      function yh() {
        var e;
        return (
          null != globalThis[(e = Symbol.for("io.cortexjs.mathlive"))] ||
            (globalThis[e] = {}),
          globalThis[Symbol.for("io.cortexjs.mathlive")]
        );
      }
      xc(
        {
          switchKeyboardLayer: function (e) {
            let t = Qc.singleton;
            return (
              !!t &&
              (t.show(), Dc(), (t.currentLayer = e), t.render(), t.focus(), !0)
            );
          },
          toggleVirtualKeyboard: function () {
            let e = window.mathVirtualKeyboard;
            return (
              e.visible ? e.hide({ animate: !0 }) : e.show({ animate: !0 }), !1
            );
          },
          hideVirtualKeyboard: () => (
            window.mathVirtualKeyboard.hide({ animate: !0 }), !1
          ),
          showVirtualKeyboard: () => (
            window.mathVirtualKeyboard.show({ animate: !0 }), !1
          ),
        },
        { target: "virtual-keyboard" }
      );
    },
  },
]);
